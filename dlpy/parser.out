Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> stmt_list
Rule 2     stmt_list -> stmt_list stmt
Rule 3     stmt_list -> stmt
Rule 4     stmt -> simple_stmt
Rule 5     stmt -> compound_stmt
Rule 6     compound_stmt -> if_stmt
Rule 7     compound_stmt -> while_stmt
Rule 8     compound_stmt -> funcdef_stmt
Rule 9     compound_stmt -> print
Rule 10    simple_stmt -> small_stmt SEMICOLON
Rule 11    small_stmt -> test
Rule 12    small_stmt -> flow_stmt
Rule 13    small_stmt -> dl_stmt
Rule 14    small_stmt -> assign_expr
Rule 15    print -> PRINT LPAREN small_stmt RPAREN SEMICOLON
Rule 16    dl_stmt -> train_stmt
Rule 17    dl_stmt -> pred_stmt
Rule 18    dl_stmt -> save_stmt
Rule 19    train_stmt -> TRAIN name list_expr
Rule 20    pred_stmt -> PRED name STRING
Rule 21    save_stmt -> SAVE name STRING
Rule 22    flow_stmt -> RETURN
Rule 23    flow_stmt -> RETURN list_expr
Rule 24    flow_stmt -> BREAK
Rule 25    flow_stmt -> CONTINUE
Rule 26    while_stmt -> WHILE test suite
Rule 27    while_stmt -> WHILE test suite ELSE suite
Rule 28    if_stmt -> IF test suite
Rule 29    if_stmt -> IF test suite ELSE suite
Rule 30    funcdef_stmt -> DEF name LPAREN list_expr RPAREN suite
Rule 31    suite -> simple_stmt
Rule 32    suite -> LBRACK stmt_list RBRACK
Rule 33    test -> comparison OR test
Rule 34    test -> comparison AND test
Rule 35    test -> comparison
Rule 36    comparison -> expr GT expr
Rule 37    comparison -> expr LT expr
Rule 38    comparison -> expr GTE expr
Rule 39    comparison -> expr LTE expr
Rule 40    comparison -> expr EQ expr
Rule 41    comparison -> expr NEQ expr
Rule 42    comparison -> expr
Rule 43    basic_type -> INT_TYPE
Rule 44    basic_type -> FLOAT_TYPE
Rule 45    basic_type -> LIST_TYPE
Rule 46    basic_type -> TUPLE_TYPE
Rule 47    basic_type -> MLP
Rule 48    basic_type -> TRANSFORMER
Rule 49    assign_expr -> NAME ASSIGN expr
Rule 50    assign_expr -> NAME COLON basic_type ASSIGN expr
Rule 51    assign_expr -> NAME COLON basic_type ASSIGN STRING COLON STRING
Rule 52    assign_expr -> NAME COLON basic_type ASSIGN list_expr COLON STRING
Rule 53    expr -> expr PLUS expr
Rule 54    expr -> expr MINUS expr
Rule 55    expr -> expr TIMES expr
Rule 56    expr -> expr DIVIDE expr
Rule 57    expr -> expr MOD expr
Rule 58    expr -> factor
Rule 59    factor -> PLUS factor
Rule 60    factor -> MINUS factor
Rule 61    factor -> atom_expr
Rule 62    atom_expr -> <empty>
Rule 63    atom_expr -> atom
Rule 64    atom_expr -> atom_expr LSQBRACK expr RSQBRACK
Rule 65    atom_expr -> name LPAREN list_expr RPAREN
Rule 66    atom -> LPAREN list_expr RPAREN
Rule 67    atom -> LSQBRACK list_expr RSQBRACK
Rule 68    atom -> name
Rule 69    atom -> number
Rule 70    atom -> string
Rule 71    atom -> TRUE
Rule 72    atom -> FALSE
Rule 73    atom -> NONE
Rule 74    atom -> name LSQBRACK atom RSQBRACK
Rule 75    list_expr -> list_expr COMMA expr
Rule 76    list_expr -> expr
Rule 77    name -> NAME
Rule 78    number -> INT
Rule 79    number -> FLOAT
Rule 80    string -> STRING

Terminals, with rules where they appear

AND                  : 34
ASSIGN               : 49 50 51 52
BREAK                : 24
COLON                : 50 51 51 52 52
COMMA                : 75
CONTINUE             : 25
DEF                  : 30
DIVIDE               : 56
ELSE                 : 27 29
EQ                   : 40
FALSE                : 72
FLOAT                : 79
FLOAT_TYPE           : 44
GT                   : 36
GTE                  : 38
IF                   : 28 29
INT                  : 78
INT_TYPE             : 43
LBRACK               : 32
LIST_TYPE            : 45
LPAREN               : 15 30 65 66
LSQBRACK             : 64 67 74
LT                   : 37
LTE                  : 39
MINUS                : 54 60
MLP                  : 47
MOD                  : 57
NAME                 : 49 50 51 52 77
NEQ                  : 41
NONE                 : 73
OR                   : 33
PLUS                 : 53 59
PRED                 : 20
PRINT                : 15
RBRACK               : 32
RETURN               : 22 23
RPAREN               : 15 30 65 66
RSQBRACK             : 64 67 74
SAVE                 : 21
SEMICOLON            : 10 15
STRING               : 20 21 51 51 52 80
TIMES                : 55
TRAIN                : 19
TRANSFORMER          : 48
TRUE                 : 71
TUPLE_TYPE           : 46
WHILE                : 26 27
error                : 

Nonterminals, with rules where they appear

assign_expr          : 14
atom                 : 63 74
atom_expr            : 61 64
basic_type           : 50 51 52
comparison           : 33 34 35
compound_stmt        : 5
dl_stmt              : 13
expr                 : 36 36 37 37 38 38 39 39 40 40 41 41 42 49 50 53 53 54 54 55 55 56 56 57 57 64 75 76
factor               : 58 59 60
flow_stmt            : 12
funcdef_stmt         : 8
if_stmt              : 6
list_expr            : 19 23 30 52 65 66 67 75
name                 : 19 20 21 30 65 68 74
number               : 69
pred_stmt            : 17
print                : 9
program              : 0
save_stmt            : 18
simple_stmt          : 4 31
small_stmt           : 10 15
stmt                 : 2 3
stmt_list            : 1 2 32
string               : 70
suite                : 26 27 27 28 29 29 30
test                 : 11 26 27 28 29 33 34
train_stmt           : 16
while_stmt           : 7

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . stmt_list
    (2) stmt_list -> . stmt_list stmt
    (3) stmt_list -> . stmt
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (10) simple_stmt -> . small_stmt SEMICOLON
    (6) compound_stmt -> . if_stmt
    (7) compound_stmt -> . while_stmt
    (8) compound_stmt -> . funcdef_stmt
    (9) compound_stmt -> . print
    (11) small_stmt -> . test
    (12) small_stmt -> . flow_stmt
    (13) small_stmt -> . dl_stmt
    (14) small_stmt -> . assign_expr
    (28) if_stmt -> . IF test suite
    (29) if_stmt -> . IF test suite ELSE suite
    (26) while_stmt -> . WHILE test suite
    (27) while_stmt -> . WHILE test suite ELSE suite
    (30) funcdef_stmt -> . DEF name LPAREN list_expr RPAREN suite
    (15) print -> . PRINT LPAREN small_stmt RPAREN SEMICOLON
    (33) test -> . comparison OR test
    (34) test -> . comparison AND test
    (35) test -> . comparison
    (22) flow_stmt -> . RETURN
    (23) flow_stmt -> . RETURN list_expr
    (24) flow_stmt -> . BREAK
    (25) flow_stmt -> . CONTINUE
    (16) dl_stmt -> . train_stmt
    (17) dl_stmt -> . pred_stmt
    (18) dl_stmt -> . save_stmt
    (49) assign_expr -> . NAME ASSIGN expr
    (50) assign_expr -> . NAME COLON basic_type ASSIGN expr
    (51) assign_expr -> . NAME COLON basic_type ASSIGN STRING COLON STRING
    (52) assign_expr -> . NAME COLON basic_type ASSIGN list_expr COLON STRING
    (36) comparison -> . expr GT expr
    (37) comparison -> . expr LT expr
    (38) comparison -> . expr GTE expr
    (39) comparison -> . expr LTE expr
    (40) comparison -> . expr EQ expr
    (41) comparison -> . expr NEQ expr
    (42) comparison -> . expr
    (19) train_stmt -> . TRAIN name list_expr
    (20) pred_stmt -> . PRED name STRING
    (21) save_stmt -> . SAVE name STRING
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MOD expr
    (58) expr -> . factor
    (59) factor -> . PLUS factor
    (60) factor -> . MINUS factor
    (61) factor -> . atom_expr
    (62) atom_expr -> .
    (63) atom_expr -> . atom
    (64) atom_expr -> . atom_expr LSQBRACK expr RSQBRACK
    (65) atom_expr -> . name LPAREN list_expr RPAREN
    (66) atom -> . LPAREN list_expr RPAREN
    (67) atom -> . LSQBRACK list_expr RSQBRACK
    (68) atom -> . name
    (69) atom -> . number
    (70) atom -> . string
    (71) atom -> . TRUE
    (72) atom -> . FALSE
    (73) atom -> . NONE
    (74) atom -> . name LSQBRACK atom RSQBRACK
    (77) name -> . NAME
    (78) number -> . INT
    (79) number -> . FLOAT
    (80) string -> . STRING

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    DEF             shift and go to state 17
    PRINT           shift and go to state 20
    RETURN          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    NAME            shift and go to state 28
    TRAIN           shift and go to state 31
    PRED            shift and go to state 32
    SAVE            shift and go to state 33
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    GT              reduce using rule 62 (atom_expr -> .)
    LT              reduce using rule 62 (atom_expr -> .)
    GTE             reduce using rule 62 (atom_expr -> .)
    LTE             reduce using rule 62 (atom_expr -> .)
    EQ              reduce using rule 62 (atom_expr -> .)
    NEQ             reduce using rule 62 (atom_expr -> .)
    TIMES           reduce using rule 62 (atom_expr -> .)
    DIVIDE          reduce using rule 62 (atom_expr -> .)
    MOD             reduce using rule 62 (atom_expr -> .)
    OR              reduce using rule 62 (atom_expr -> .)
    AND             reduce using rule 62 (atom_expr -> .)
    SEMICOLON       reduce using rule 62 (atom_expr -> .)
    LPAREN          shift and go to state 19
    LSQBRACK        shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    NONE            shift and go to state 44
    INT             shift and go to state 45
    FLOAT           shift and go to state 46
    STRING          shift and go to state 30

  ! LSQBRACK        [ reduce using rule 62 (atom_expr -> .) ]
  ! PLUS            [ reduce using rule 62 (atom_expr -> .) ]
  ! MINUS           [ reduce using rule 62 (atom_expr -> .) ]

    program                        shift and go to state 1
    stmt_list                      shift and go to state 2
    stmt                           shift and go to state 3
    simple_stmt                    shift and go to state 4
    compound_stmt                  shift and go to state 5
    small_stmt                     shift and go to state 6
    if_stmt                        shift and go to state 7
    while_stmt                     shift and go to state 8
    funcdef_stmt                   shift and go to state 9
    print                          shift and go to state 10
    test                           shift and go to state 11
    flow_stmt                      shift and go to state 12
    dl_stmt                        shift and go to state 13
    assign_expr                    shift and go to state 14
    name                           shift and go to state 18
    comparison                     shift and go to state 21
    train_stmt                     shift and go to state 25
    pred_stmt                      shift and go to state 26
    save_stmt                      shift and go to state 27
    expr                           shift and go to state 29
    factor                         shift and go to state 36
    atom_expr                      shift and go to state 37
    atom                           shift and go to state 38
    number                         shift and go to state 40
    string                         shift and go to state 41

state 1

    (0) S' -> program .



state 2

    (1) program -> stmt_list .
    (2) stmt_list -> stmt_list . stmt
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (10) simple_stmt -> . small_stmt SEMICOLON
    (6) compound_stmt -> . if_stmt
    (7) compound_stmt -> . while_stmt
    (8) compound_stmt -> . funcdef_stmt
    (9) compound_stmt -> . print
    (11) small_stmt -> . test
    (12) small_stmt -> . flow_stmt
    (13) small_stmt -> . dl_stmt
    (14) small_stmt -> . assign_expr
    (28) if_stmt -> . IF test suite
    (29) if_stmt -> . IF test suite ELSE suite
    (26) while_stmt -> . WHILE test suite
    (27) while_stmt -> . WHILE test suite ELSE suite
    (30) funcdef_stmt -> . DEF name LPAREN list_expr RPAREN suite
    (15) print -> . PRINT LPAREN small_stmt RPAREN SEMICOLON
    (33) test -> . comparison OR test
    (34) test -> . comparison AND test
    (35) test -> . comparison
    (22) flow_stmt -> . RETURN
    (23) flow_stmt -> . RETURN list_expr
    (24) flow_stmt -> . BREAK
    (25) flow_stmt -> . CONTINUE
    (16) dl_stmt -> . train_stmt
    (17) dl_stmt -> . pred_stmt
    (18) dl_stmt -> . save_stmt
    (49) assign_expr -> . NAME ASSIGN expr
    (50) assign_expr -> . NAME COLON basic_type ASSIGN expr
    (51) assign_expr -> . NAME COLON basic_type ASSIGN STRING COLON STRING
    (52) assign_expr -> . NAME COLON basic_type ASSIGN list_expr COLON STRING
    (36) comparison -> . expr GT expr
    (37) comparison -> . expr LT expr
    (38) comparison -> . expr GTE expr
    (39) comparison -> . expr LTE expr
    (40) comparison -> . expr EQ expr
    (41) comparison -> . expr NEQ expr
    (42) comparison -> . expr
    (19) train_stmt -> . TRAIN name list_expr
    (20) pred_stmt -> . PRED name STRING
    (21) save_stmt -> . SAVE name STRING
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MOD expr
    (58) expr -> . factor
    (59) factor -> . PLUS factor
    (60) factor -> . MINUS factor
    (61) factor -> . atom_expr
    (62) atom_expr -> .
    (63) atom_expr -> . atom
    (64) atom_expr -> . atom_expr LSQBRACK expr RSQBRACK
    (65) atom_expr -> . name LPAREN list_expr RPAREN
    (66) atom -> . LPAREN list_expr RPAREN
    (67) atom -> . LSQBRACK list_expr RSQBRACK
    (68) atom -> . name
    (69) atom -> . number
    (70) atom -> . string
    (71) atom -> . TRUE
    (72) atom -> . FALSE
    (73) atom -> . NONE
    (74) atom -> . name LSQBRACK atom RSQBRACK
    (77) name -> . NAME
    (78) number -> . INT
    (79) number -> . FLOAT
    (80) string -> . STRING

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
    $end            reduce using rule 1 (program -> stmt_list .)
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    DEF             shift and go to state 17
    PRINT           shift and go to state 20
    RETURN          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    NAME            shift and go to state 28
    TRAIN           shift and go to state 31
    PRED            shift and go to state 32
    SAVE            shift and go to state 33
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    GT              reduce using rule 62 (atom_expr -> .)
    LT              reduce using rule 62 (atom_expr -> .)
    GTE             reduce using rule 62 (atom_expr -> .)
    LTE             reduce using rule 62 (atom_expr -> .)
    EQ              reduce using rule 62 (atom_expr -> .)
    NEQ             reduce using rule 62 (atom_expr -> .)
    TIMES           reduce using rule 62 (atom_expr -> .)
    DIVIDE          reduce using rule 62 (atom_expr -> .)
    MOD             reduce using rule 62 (atom_expr -> .)
    OR              reduce using rule 62 (atom_expr -> .)
    AND             reduce using rule 62 (atom_expr -> .)
    SEMICOLON       reduce using rule 62 (atom_expr -> .)
    LPAREN          shift and go to state 19
    LSQBRACK        shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    NONE            shift and go to state 44
    INT             shift and go to state 45
    FLOAT           shift and go to state 46
    STRING          shift and go to state 30

  ! LSQBRACK        [ reduce using rule 62 (atom_expr -> .) ]
  ! PLUS            [ reduce using rule 62 (atom_expr -> .) ]
  ! MINUS           [ reduce using rule 62 (atom_expr -> .) ]

    stmt                           shift and go to state 47
    simple_stmt                    shift and go to state 4
    compound_stmt                  shift and go to state 5
    small_stmt                     shift and go to state 6
    if_stmt                        shift and go to state 7
    while_stmt                     shift and go to state 8
    funcdef_stmt                   shift and go to state 9
    print                          shift and go to state 10
    test                           shift and go to state 11
    flow_stmt                      shift and go to state 12
    dl_stmt                        shift and go to state 13
    assign_expr                    shift and go to state 14
    name                           shift and go to state 18
    comparison                     shift and go to state 21
    train_stmt                     shift and go to state 25
    pred_stmt                      shift and go to state 26
    save_stmt                      shift and go to state 27
    expr                           shift and go to state 29
    factor                         shift and go to state 36
    atom_expr                      shift and go to state 37
    atom                           shift and go to state 38
    number                         shift and go to state 40
    string                         shift and go to state 41

state 3

    (3) stmt_list -> stmt .

    IF              reduce using rule 3 (stmt_list -> stmt .)
    WHILE           reduce using rule 3 (stmt_list -> stmt .)
    DEF             reduce using rule 3 (stmt_list -> stmt .)
    PRINT           reduce using rule 3 (stmt_list -> stmt .)
    RETURN          reduce using rule 3 (stmt_list -> stmt .)
    BREAK           reduce using rule 3 (stmt_list -> stmt .)
    CONTINUE        reduce using rule 3 (stmt_list -> stmt .)
    NAME            reduce using rule 3 (stmt_list -> stmt .)
    TRAIN           reduce using rule 3 (stmt_list -> stmt .)
    PRED            reduce using rule 3 (stmt_list -> stmt .)
    SAVE            reduce using rule 3 (stmt_list -> stmt .)
    PLUS            reduce using rule 3 (stmt_list -> stmt .)
    MINUS           reduce using rule 3 (stmt_list -> stmt .)
    LPAREN          reduce using rule 3 (stmt_list -> stmt .)
    LSQBRACK        reduce using rule 3 (stmt_list -> stmt .)
    TRUE            reduce using rule 3 (stmt_list -> stmt .)
    FALSE           reduce using rule 3 (stmt_list -> stmt .)
    NONE            reduce using rule 3 (stmt_list -> stmt .)
    INT             reduce using rule 3 (stmt_list -> stmt .)
    FLOAT           reduce using rule 3 (stmt_list -> stmt .)
    STRING          reduce using rule 3 (stmt_list -> stmt .)
    SEMICOLON       reduce using rule 3 (stmt_list -> stmt .)
    OR              reduce using rule 3 (stmt_list -> stmt .)
    AND             reduce using rule 3 (stmt_list -> stmt .)
    GT              reduce using rule 3 (stmt_list -> stmt .)
    LT              reduce using rule 3 (stmt_list -> stmt .)
    GTE             reduce using rule 3 (stmt_list -> stmt .)
    LTE             reduce using rule 3 (stmt_list -> stmt .)
    EQ              reduce using rule 3 (stmt_list -> stmt .)
    NEQ             reduce using rule 3 (stmt_list -> stmt .)
    TIMES           reduce using rule 3 (stmt_list -> stmt .)
    DIVIDE          reduce using rule 3 (stmt_list -> stmt .)
    MOD             reduce using rule 3 (stmt_list -> stmt .)
    $end            reduce using rule 3 (stmt_list -> stmt .)
    RBRACK          reduce using rule 3 (stmt_list -> stmt .)


state 4

    (4) stmt -> simple_stmt .

    IF              reduce using rule 4 (stmt -> simple_stmt .)
    WHILE           reduce using rule 4 (stmt -> simple_stmt .)
    DEF             reduce using rule 4 (stmt -> simple_stmt .)
    PRINT           reduce using rule 4 (stmt -> simple_stmt .)
    RETURN          reduce using rule 4 (stmt -> simple_stmt .)
    BREAK           reduce using rule 4 (stmt -> simple_stmt .)
    CONTINUE        reduce using rule 4 (stmt -> simple_stmt .)
    NAME            reduce using rule 4 (stmt -> simple_stmt .)
    TRAIN           reduce using rule 4 (stmt -> simple_stmt .)
    PRED            reduce using rule 4 (stmt -> simple_stmt .)
    SAVE            reduce using rule 4 (stmt -> simple_stmt .)
    PLUS            reduce using rule 4 (stmt -> simple_stmt .)
    MINUS           reduce using rule 4 (stmt -> simple_stmt .)
    LPAREN          reduce using rule 4 (stmt -> simple_stmt .)
    LSQBRACK        reduce using rule 4 (stmt -> simple_stmt .)
    TRUE            reduce using rule 4 (stmt -> simple_stmt .)
    FALSE           reduce using rule 4 (stmt -> simple_stmt .)
    NONE            reduce using rule 4 (stmt -> simple_stmt .)
    INT             reduce using rule 4 (stmt -> simple_stmt .)
    FLOAT           reduce using rule 4 (stmt -> simple_stmt .)
    STRING          reduce using rule 4 (stmt -> simple_stmt .)
    SEMICOLON       reduce using rule 4 (stmt -> simple_stmt .)
    OR              reduce using rule 4 (stmt -> simple_stmt .)
    AND             reduce using rule 4 (stmt -> simple_stmt .)
    GT              reduce using rule 4 (stmt -> simple_stmt .)
    LT              reduce using rule 4 (stmt -> simple_stmt .)
    GTE             reduce using rule 4 (stmt -> simple_stmt .)
    LTE             reduce using rule 4 (stmt -> simple_stmt .)
    EQ              reduce using rule 4 (stmt -> simple_stmt .)
    NEQ             reduce using rule 4 (stmt -> simple_stmt .)
    TIMES           reduce using rule 4 (stmt -> simple_stmt .)
    DIVIDE          reduce using rule 4 (stmt -> simple_stmt .)
    MOD             reduce using rule 4 (stmt -> simple_stmt .)
    $end            reduce using rule 4 (stmt -> simple_stmt .)
    RBRACK          reduce using rule 4 (stmt -> simple_stmt .)


state 5

    (5) stmt -> compound_stmt .

    IF              reduce using rule 5 (stmt -> compound_stmt .)
    WHILE           reduce using rule 5 (stmt -> compound_stmt .)
    DEF             reduce using rule 5 (stmt -> compound_stmt .)
    PRINT           reduce using rule 5 (stmt -> compound_stmt .)
    RETURN          reduce using rule 5 (stmt -> compound_stmt .)
    BREAK           reduce using rule 5 (stmt -> compound_stmt .)
    CONTINUE        reduce using rule 5 (stmt -> compound_stmt .)
    NAME            reduce using rule 5 (stmt -> compound_stmt .)
    TRAIN           reduce using rule 5 (stmt -> compound_stmt .)
    PRED            reduce using rule 5 (stmt -> compound_stmt .)
    SAVE            reduce using rule 5 (stmt -> compound_stmt .)
    PLUS            reduce using rule 5 (stmt -> compound_stmt .)
    MINUS           reduce using rule 5 (stmt -> compound_stmt .)
    LPAREN          reduce using rule 5 (stmt -> compound_stmt .)
    LSQBRACK        reduce using rule 5 (stmt -> compound_stmt .)
    TRUE            reduce using rule 5 (stmt -> compound_stmt .)
    FALSE           reduce using rule 5 (stmt -> compound_stmt .)
    NONE            reduce using rule 5 (stmt -> compound_stmt .)
    INT             reduce using rule 5 (stmt -> compound_stmt .)
    FLOAT           reduce using rule 5 (stmt -> compound_stmt .)
    STRING          reduce using rule 5 (stmt -> compound_stmt .)
    SEMICOLON       reduce using rule 5 (stmt -> compound_stmt .)
    OR              reduce using rule 5 (stmt -> compound_stmt .)
    AND             reduce using rule 5 (stmt -> compound_stmt .)
    GT              reduce using rule 5 (stmt -> compound_stmt .)
    LT              reduce using rule 5 (stmt -> compound_stmt .)
    GTE             reduce using rule 5 (stmt -> compound_stmt .)
    LTE             reduce using rule 5 (stmt -> compound_stmt .)
    EQ              reduce using rule 5 (stmt -> compound_stmt .)
    NEQ             reduce using rule 5 (stmt -> compound_stmt .)
    TIMES           reduce using rule 5 (stmt -> compound_stmt .)
    DIVIDE          reduce using rule 5 (stmt -> compound_stmt .)
    MOD             reduce using rule 5 (stmt -> compound_stmt .)
    $end            reduce using rule 5 (stmt -> compound_stmt .)
    RBRACK          reduce using rule 5 (stmt -> compound_stmt .)


state 6

    (10) simple_stmt -> small_stmt . SEMICOLON

    SEMICOLON       shift and go to state 48


state 7

    (6) compound_stmt -> if_stmt .

    IF              reduce using rule 6 (compound_stmt -> if_stmt .)
    WHILE           reduce using rule 6 (compound_stmt -> if_stmt .)
    DEF             reduce using rule 6 (compound_stmt -> if_stmt .)
    PRINT           reduce using rule 6 (compound_stmt -> if_stmt .)
    RETURN          reduce using rule 6 (compound_stmt -> if_stmt .)
    BREAK           reduce using rule 6 (compound_stmt -> if_stmt .)
    CONTINUE        reduce using rule 6 (compound_stmt -> if_stmt .)
    NAME            reduce using rule 6 (compound_stmt -> if_stmt .)
    TRAIN           reduce using rule 6 (compound_stmt -> if_stmt .)
    PRED            reduce using rule 6 (compound_stmt -> if_stmt .)
    SAVE            reduce using rule 6 (compound_stmt -> if_stmt .)
    PLUS            reduce using rule 6 (compound_stmt -> if_stmt .)
    MINUS           reduce using rule 6 (compound_stmt -> if_stmt .)
    LPAREN          reduce using rule 6 (compound_stmt -> if_stmt .)
    LSQBRACK        reduce using rule 6 (compound_stmt -> if_stmt .)
    TRUE            reduce using rule 6 (compound_stmt -> if_stmt .)
    FALSE           reduce using rule 6 (compound_stmt -> if_stmt .)
    NONE            reduce using rule 6 (compound_stmt -> if_stmt .)
    INT             reduce using rule 6 (compound_stmt -> if_stmt .)
    FLOAT           reduce using rule 6 (compound_stmt -> if_stmt .)
    STRING          reduce using rule 6 (compound_stmt -> if_stmt .)
    SEMICOLON       reduce using rule 6 (compound_stmt -> if_stmt .)
    OR              reduce using rule 6 (compound_stmt -> if_stmt .)
    AND             reduce using rule 6 (compound_stmt -> if_stmt .)
    GT              reduce using rule 6 (compound_stmt -> if_stmt .)
    LT              reduce using rule 6 (compound_stmt -> if_stmt .)
    GTE             reduce using rule 6 (compound_stmt -> if_stmt .)
    LTE             reduce using rule 6 (compound_stmt -> if_stmt .)
    EQ              reduce using rule 6 (compound_stmt -> if_stmt .)
    NEQ             reduce using rule 6 (compound_stmt -> if_stmt .)
    TIMES           reduce using rule 6 (compound_stmt -> if_stmt .)
    DIVIDE          reduce using rule 6 (compound_stmt -> if_stmt .)
    MOD             reduce using rule 6 (compound_stmt -> if_stmt .)
    $end            reduce using rule 6 (compound_stmt -> if_stmt .)
    RBRACK          reduce using rule 6 (compound_stmt -> if_stmt .)


state 8

    (7) compound_stmt -> while_stmt .

    IF              reduce using rule 7 (compound_stmt -> while_stmt .)
    WHILE           reduce using rule 7 (compound_stmt -> while_stmt .)
    DEF             reduce using rule 7 (compound_stmt -> while_stmt .)
    PRINT           reduce using rule 7 (compound_stmt -> while_stmt .)
    RETURN          reduce using rule 7 (compound_stmt -> while_stmt .)
    BREAK           reduce using rule 7 (compound_stmt -> while_stmt .)
    CONTINUE        reduce using rule 7 (compound_stmt -> while_stmt .)
    NAME            reduce using rule 7 (compound_stmt -> while_stmt .)
    TRAIN           reduce using rule 7 (compound_stmt -> while_stmt .)
    PRED            reduce using rule 7 (compound_stmt -> while_stmt .)
    SAVE            reduce using rule 7 (compound_stmt -> while_stmt .)
    PLUS            reduce using rule 7 (compound_stmt -> while_stmt .)
    MINUS           reduce using rule 7 (compound_stmt -> while_stmt .)
    LPAREN          reduce using rule 7 (compound_stmt -> while_stmt .)
    LSQBRACK        reduce using rule 7 (compound_stmt -> while_stmt .)
    TRUE            reduce using rule 7 (compound_stmt -> while_stmt .)
    FALSE           reduce using rule 7 (compound_stmt -> while_stmt .)
    NONE            reduce using rule 7 (compound_stmt -> while_stmt .)
    INT             reduce using rule 7 (compound_stmt -> while_stmt .)
    FLOAT           reduce using rule 7 (compound_stmt -> while_stmt .)
    STRING          reduce using rule 7 (compound_stmt -> while_stmt .)
    SEMICOLON       reduce using rule 7 (compound_stmt -> while_stmt .)
    OR              reduce using rule 7 (compound_stmt -> while_stmt .)
    AND             reduce using rule 7 (compound_stmt -> while_stmt .)
    GT              reduce using rule 7 (compound_stmt -> while_stmt .)
    LT              reduce using rule 7 (compound_stmt -> while_stmt .)
    GTE             reduce using rule 7 (compound_stmt -> while_stmt .)
    LTE             reduce using rule 7 (compound_stmt -> while_stmt .)
    EQ              reduce using rule 7 (compound_stmt -> while_stmt .)
    NEQ             reduce using rule 7 (compound_stmt -> while_stmt .)
    TIMES           reduce using rule 7 (compound_stmt -> while_stmt .)
    DIVIDE          reduce using rule 7 (compound_stmt -> while_stmt .)
    MOD             reduce using rule 7 (compound_stmt -> while_stmt .)
    $end            reduce using rule 7 (compound_stmt -> while_stmt .)
    RBRACK          reduce using rule 7 (compound_stmt -> while_stmt .)


state 9

    (8) compound_stmt -> funcdef_stmt .

    IF              reduce using rule 8 (compound_stmt -> funcdef_stmt .)
    WHILE           reduce using rule 8 (compound_stmt -> funcdef_stmt .)
    DEF             reduce using rule 8 (compound_stmt -> funcdef_stmt .)
    PRINT           reduce using rule 8 (compound_stmt -> funcdef_stmt .)
    RETURN          reduce using rule 8 (compound_stmt -> funcdef_stmt .)
    BREAK           reduce using rule 8 (compound_stmt -> funcdef_stmt .)
    CONTINUE        reduce using rule 8 (compound_stmt -> funcdef_stmt .)
    NAME            reduce using rule 8 (compound_stmt -> funcdef_stmt .)
    TRAIN           reduce using rule 8 (compound_stmt -> funcdef_stmt .)
    PRED            reduce using rule 8 (compound_stmt -> funcdef_stmt .)
    SAVE            reduce using rule 8 (compound_stmt -> funcdef_stmt .)
    PLUS            reduce using rule 8 (compound_stmt -> funcdef_stmt .)
    MINUS           reduce using rule 8 (compound_stmt -> funcdef_stmt .)
    LPAREN          reduce using rule 8 (compound_stmt -> funcdef_stmt .)
    LSQBRACK        reduce using rule 8 (compound_stmt -> funcdef_stmt .)
    TRUE            reduce using rule 8 (compound_stmt -> funcdef_stmt .)
    FALSE           reduce using rule 8 (compound_stmt -> funcdef_stmt .)
    NONE            reduce using rule 8 (compound_stmt -> funcdef_stmt .)
    INT             reduce using rule 8 (compound_stmt -> funcdef_stmt .)
    FLOAT           reduce using rule 8 (compound_stmt -> funcdef_stmt .)
    STRING          reduce using rule 8 (compound_stmt -> funcdef_stmt .)
    SEMICOLON       reduce using rule 8 (compound_stmt -> funcdef_stmt .)
    OR              reduce using rule 8 (compound_stmt -> funcdef_stmt .)
    AND             reduce using rule 8 (compound_stmt -> funcdef_stmt .)
    GT              reduce using rule 8 (compound_stmt -> funcdef_stmt .)
    LT              reduce using rule 8 (compound_stmt -> funcdef_stmt .)
    GTE             reduce using rule 8 (compound_stmt -> funcdef_stmt .)
    LTE             reduce using rule 8 (compound_stmt -> funcdef_stmt .)
    EQ              reduce using rule 8 (compound_stmt -> funcdef_stmt .)
    NEQ             reduce using rule 8 (compound_stmt -> funcdef_stmt .)
    TIMES           reduce using rule 8 (compound_stmt -> funcdef_stmt .)
    DIVIDE          reduce using rule 8 (compound_stmt -> funcdef_stmt .)
    MOD             reduce using rule 8 (compound_stmt -> funcdef_stmt .)
    $end            reduce using rule 8 (compound_stmt -> funcdef_stmt .)
    RBRACK          reduce using rule 8 (compound_stmt -> funcdef_stmt .)


state 10

    (9) compound_stmt -> print .

    IF              reduce using rule 9 (compound_stmt -> print .)
    WHILE           reduce using rule 9 (compound_stmt -> print .)
    DEF             reduce using rule 9 (compound_stmt -> print .)
    PRINT           reduce using rule 9 (compound_stmt -> print .)
    RETURN          reduce using rule 9 (compound_stmt -> print .)
    BREAK           reduce using rule 9 (compound_stmt -> print .)
    CONTINUE        reduce using rule 9 (compound_stmt -> print .)
    NAME            reduce using rule 9 (compound_stmt -> print .)
    TRAIN           reduce using rule 9 (compound_stmt -> print .)
    PRED            reduce using rule 9 (compound_stmt -> print .)
    SAVE            reduce using rule 9 (compound_stmt -> print .)
    PLUS            reduce using rule 9 (compound_stmt -> print .)
    MINUS           reduce using rule 9 (compound_stmt -> print .)
    LPAREN          reduce using rule 9 (compound_stmt -> print .)
    LSQBRACK        reduce using rule 9 (compound_stmt -> print .)
    TRUE            reduce using rule 9 (compound_stmt -> print .)
    FALSE           reduce using rule 9 (compound_stmt -> print .)
    NONE            reduce using rule 9 (compound_stmt -> print .)
    INT             reduce using rule 9 (compound_stmt -> print .)
    FLOAT           reduce using rule 9 (compound_stmt -> print .)
    STRING          reduce using rule 9 (compound_stmt -> print .)
    SEMICOLON       reduce using rule 9 (compound_stmt -> print .)
    OR              reduce using rule 9 (compound_stmt -> print .)
    AND             reduce using rule 9 (compound_stmt -> print .)
    GT              reduce using rule 9 (compound_stmt -> print .)
    LT              reduce using rule 9 (compound_stmt -> print .)
    GTE             reduce using rule 9 (compound_stmt -> print .)
    LTE             reduce using rule 9 (compound_stmt -> print .)
    EQ              reduce using rule 9 (compound_stmt -> print .)
    NEQ             reduce using rule 9 (compound_stmt -> print .)
    TIMES           reduce using rule 9 (compound_stmt -> print .)
    DIVIDE          reduce using rule 9 (compound_stmt -> print .)
    MOD             reduce using rule 9 (compound_stmt -> print .)
    $end            reduce using rule 9 (compound_stmt -> print .)
    RBRACK          reduce using rule 9 (compound_stmt -> print .)


state 11

    (11) small_stmt -> test .

    SEMICOLON       reduce using rule 11 (small_stmt -> test .)
    RPAREN          reduce using rule 11 (small_stmt -> test .)


state 12

    (12) small_stmt -> flow_stmt .

    SEMICOLON       reduce using rule 12 (small_stmt -> flow_stmt .)
    RPAREN          reduce using rule 12 (small_stmt -> flow_stmt .)


state 13

    (13) small_stmt -> dl_stmt .

    SEMICOLON       reduce using rule 13 (small_stmt -> dl_stmt .)
    RPAREN          reduce using rule 13 (small_stmt -> dl_stmt .)


state 14

    (14) small_stmt -> assign_expr .

    SEMICOLON       reduce using rule 14 (small_stmt -> assign_expr .)
    RPAREN          reduce using rule 14 (small_stmt -> assign_expr .)


state 15

    (28) if_stmt -> IF . test suite
    (29) if_stmt -> IF . test suite ELSE suite
    (33) test -> . comparison OR test
    (34) test -> . comparison AND test
    (35) test -> . comparison
    (36) comparison -> . expr GT expr
    (37) comparison -> . expr LT expr
    (38) comparison -> . expr GTE expr
    (39) comparison -> . expr LTE expr
    (40) comparison -> . expr EQ expr
    (41) comparison -> . expr NEQ expr
    (42) comparison -> . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MOD expr
    (58) expr -> . factor
    (59) factor -> . PLUS factor
    (60) factor -> . MINUS factor
    (61) factor -> . atom_expr
    (62) atom_expr -> .
    (63) atom_expr -> . atom
    (64) atom_expr -> . atom_expr LSQBRACK expr RSQBRACK
    (65) atom_expr -> . name LPAREN list_expr RPAREN
    (66) atom -> . LPAREN list_expr RPAREN
    (67) atom -> . LSQBRACK list_expr RSQBRACK
    (68) atom -> . name
    (69) atom -> . number
    (70) atom -> . string
    (71) atom -> . TRUE
    (72) atom -> . FALSE
    (73) atom -> . NONE
    (74) atom -> . name LSQBRACK atom RSQBRACK
    (77) name -> . NAME
    (78) number -> . INT
    (79) number -> . FLOAT
    (80) string -> . STRING

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for NONE resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    GT              reduce using rule 62 (atom_expr -> .)
    LT              reduce using rule 62 (atom_expr -> .)
    GTE             reduce using rule 62 (atom_expr -> .)
    LTE             reduce using rule 62 (atom_expr -> .)
    EQ              reduce using rule 62 (atom_expr -> .)
    NEQ             reduce using rule 62 (atom_expr -> .)
    TIMES           reduce using rule 62 (atom_expr -> .)
    DIVIDE          reduce using rule 62 (atom_expr -> .)
    MOD             reduce using rule 62 (atom_expr -> .)
    OR              reduce using rule 62 (atom_expr -> .)
    AND             reduce using rule 62 (atom_expr -> .)
    LBRACK          reduce using rule 62 (atom_expr -> .)
    RETURN          reduce using rule 62 (atom_expr -> .)
    BREAK           reduce using rule 62 (atom_expr -> .)
    CONTINUE        reduce using rule 62 (atom_expr -> .)
    TRAIN           reduce using rule 62 (atom_expr -> .)
    PRED            reduce using rule 62 (atom_expr -> .)
    SAVE            reduce using rule 62 (atom_expr -> .)
    SEMICOLON       reduce using rule 62 (atom_expr -> .)
    LPAREN          shift and go to state 19
    LSQBRACK        shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    NONE            shift and go to state 44
    NAME            shift and go to state 50
    INT             shift and go to state 45
    FLOAT           shift and go to state 46
    STRING          shift and go to state 30

  ! LSQBRACK        [ reduce using rule 62 (atom_expr -> .) ]
  ! PLUS            [ reduce using rule 62 (atom_expr -> .) ]
  ! MINUS           [ reduce using rule 62 (atom_expr -> .) ]
  ! NAME            [ reduce using rule 62 (atom_expr -> .) ]
  ! LPAREN          [ reduce using rule 62 (atom_expr -> .) ]
  ! TRUE            [ reduce using rule 62 (atom_expr -> .) ]
  ! FALSE           [ reduce using rule 62 (atom_expr -> .) ]
  ! NONE            [ reduce using rule 62 (atom_expr -> .) ]
  ! INT             [ reduce using rule 62 (atom_expr -> .) ]
  ! FLOAT           [ reduce using rule 62 (atom_expr -> .) ]
  ! STRING          [ reduce using rule 62 (atom_expr -> .) ]

    test                           shift and go to state 49
    comparison                     shift and go to state 21
    expr                           shift and go to state 29
    factor                         shift and go to state 36
    atom_expr                      shift and go to state 37
    atom                           shift and go to state 38
    name                           shift and go to state 18
    number                         shift and go to state 40
    string                         shift and go to state 41

state 16

    (26) while_stmt -> WHILE . test suite
    (27) while_stmt -> WHILE . test suite ELSE suite
    (33) test -> . comparison OR test
    (34) test -> . comparison AND test
    (35) test -> . comparison
    (36) comparison -> . expr GT expr
    (37) comparison -> . expr LT expr
    (38) comparison -> . expr GTE expr
    (39) comparison -> . expr LTE expr
    (40) comparison -> . expr EQ expr
    (41) comparison -> . expr NEQ expr
    (42) comparison -> . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MOD expr
    (58) expr -> . factor
    (59) factor -> . PLUS factor
    (60) factor -> . MINUS factor
    (61) factor -> . atom_expr
    (62) atom_expr -> .
    (63) atom_expr -> . atom
    (64) atom_expr -> . atom_expr LSQBRACK expr RSQBRACK
    (65) atom_expr -> . name LPAREN list_expr RPAREN
    (66) atom -> . LPAREN list_expr RPAREN
    (67) atom -> . LSQBRACK list_expr RSQBRACK
    (68) atom -> . name
    (69) atom -> . number
    (70) atom -> . string
    (71) atom -> . TRUE
    (72) atom -> . FALSE
    (73) atom -> . NONE
    (74) atom -> . name LSQBRACK atom RSQBRACK
    (77) name -> . NAME
    (78) number -> . INT
    (79) number -> . FLOAT
    (80) string -> . STRING

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for NONE resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    GT              reduce using rule 62 (atom_expr -> .)
    LT              reduce using rule 62 (atom_expr -> .)
    GTE             reduce using rule 62 (atom_expr -> .)
    LTE             reduce using rule 62 (atom_expr -> .)
    EQ              reduce using rule 62 (atom_expr -> .)
    NEQ             reduce using rule 62 (atom_expr -> .)
    TIMES           reduce using rule 62 (atom_expr -> .)
    DIVIDE          reduce using rule 62 (atom_expr -> .)
    MOD             reduce using rule 62 (atom_expr -> .)
    OR              reduce using rule 62 (atom_expr -> .)
    AND             reduce using rule 62 (atom_expr -> .)
    LBRACK          reduce using rule 62 (atom_expr -> .)
    RETURN          reduce using rule 62 (atom_expr -> .)
    BREAK           reduce using rule 62 (atom_expr -> .)
    CONTINUE        reduce using rule 62 (atom_expr -> .)
    TRAIN           reduce using rule 62 (atom_expr -> .)
    PRED            reduce using rule 62 (atom_expr -> .)
    SAVE            reduce using rule 62 (atom_expr -> .)
    SEMICOLON       reduce using rule 62 (atom_expr -> .)
    LPAREN          shift and go to state 19
    LSQBRACK        shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    NONE            shift and go to state 44
    NAME            shift and go to state 50
    INT             shift and go to state 45
    FLOAT           shift and go to state 46
    STRING          shift and go to state 30

  ! LSQBRACK        [ reduce using rule 62 (atom_expr -> .) ]
  ! PLUS            [ reduce using rule 62 (atom_expr -> .) ]
  ! MINUS           [ reduce using rule 62 (atom_expr -> .) ]
  ! NAME            [ reduce using rule 62 (atom_expr -> .) ]
  ! LPAREN          [ reduce using rule 62 (atom_expr -> .) ]
  ! TRUE            [ reduce using rule 62 (atom_expr -> .) ]
  ! FALSE           [ reduce using rule 62 (atom_expr -> .) ]
  ! NONE            [ reduce using rule 62 (atom_expr -> .) ]
  ! INT             [ reduce using rule 62 (atom_expr -> .) ]
  ! FLOAT           [ reduce using rule 62 (atom_expr -> .) ]
  ! STRING          [ reduce using rule 62 (atom_expr -> .) ]

    test                           shift and go to state 51
    comparison                     shift and go to state 21
    expr                           shift and go to state 29
    factor                         shift and go to state 36
    atom_expr                      shift and go to state 37
    atom                           shift and go to state 38
    name                           shift and go to state 18
    number                         shift and go to state 40
    string                         shift and go to state 41

state 17

    (30) funcdef_stmt -> DEF . name LPAREN list_expr RPAREN suite
    (77) name -> . NAME

    NAME            shift and go to state 50

    name                           shift and go to state 52

state 18

    (65) atom_expr -> name . LPAREN list_expr RPAREN
    (68) atom -> name .
    (74) atom -> name . LSQBRACK atom RSQBRACK

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
    LPAREN          shift and go to state 53
    GT              reduce using rule 68 (atom -> name .)
    LT              reduce using rule 68 (atom -> name .)
    GTE             reduce using rule 68 (atom -> name .)
    LTE             reduce using rule 68 (atom -> name .)
    EQ              reduce using rule 68 (atom -> name .)
    NEQ             reduce using rule 68 (atom -> name .)
    PLUS            reduce using rule 68 (atom -> name .)
    MINUS           reduce using rule 68 (atom -> name .)
    TIMES           reduce using rule 68 (atom -> name .)
    DIVIDE          reduce using rule 68 (atom -> name .)
    MOD             reduce using rule 68 (atom -> name .)
    OR              reduce using rule 68 (atom -> name .)
    AND             reduce using rule 68 (atom -> name .)
    SEMICOLON       reduce using rule 68 (atom -> name .)
    LBRACK          reduce using rule 68 (atom -> name .)
    RETURN          reduce using rule 68 (atom -> name .)
    BREAK           reduce using rule 68 (atom -> name .)
    CONTINUE        reduce using rule 68 (atom -> name .)
    NAME            reduce using rule 68 (atom -> name .)
    TRAIN           reduce using rule 68 (atom -> name .)
    PRED            reduce using rule 68 (atom -> name .)
    SAVE            reduce using rule 68 (atom -> name .)
    TRUE            reduce using rule 68 (atom -> name .)
    FALSE           reduce using rule 68 (atom -> name .)
    NONE            reduce using rule 68 (atom -> name .)
    INT             reduce using rule 68 (atom -> name .)
    FLOAT           reduce using rule 68 (atom -> name .)
    STRING          reduce using rule 68 (atom -> name .)
    RPAREN          reduce using rule 68 (atom -> name .)
    COMMA           reduce using rule 68 (atom -> name .)
    RSQBRACK        reduce using rule 68 (atom -> name .)
    COLON           reduce using rule 68 (atom -> name .)
    LSQBRACK        shift and go to state 54

  ! LSQBRACK        [ reduce using rule 68 (atom -> name .) ]
  ! LPAREN          [ reduce using rule 68 (atom -> name .) ]


state 19

    (66) atom -> LPAREN . list_expr RPAREN
    (75) list_expr -> . list_expr COMMA expr
    (76) list_expr -> . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MOD expr
    (58) expr -> . factor
    (59) factor -> . PLUS factor
    (60) factor -> . MINUS factor
    (61) factor -> . atom_expr
    (62) atom_expr -> .
    (63) atom_expr -> . atom
    (64) atom_expr -> . atom_expr LSQBRACK expr RSQBRACK
    (65) atom_expr -> . name LPAREN list_expr RPAREN
    (66) atom -> . LPAREN list_expr RPAREN
    (67) atom -> . LSQBRACK list_expr RSQBRACK
    (68) atom -> . name
    (69) atom -> . number
    (70) atom -> . string
    (71) atom -> . TRUE
    (72) atom -> . FALSE
    (73) atom -> . NONE
    (74) atom -> . name LSQBRACK atom RSQBRACK
    (77) name -> . NAME
    (78) number -> . INT
    (79) number -> . FLOAT
    (80) string -> . STRING

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           reduce using rule 62 (atom_expr -> .)
    DIVIDE          reduce using rule 62 (atom_expr -> .)
    MOD             reduce using rule 62 (atom_expr -> .)
    RPAREN          reduce using rule 62 (atom_expr -> .)
    COMMA           reduce using rule 62 (atom_expr -> .)
    LPAREN          shift and go to state 19
    LSQBRACK        shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    NONE            shift and go to state 44
    NAME            shift and go to state 50
    INT             shift and go to state 45
    FLOAT           shift and go to state 46
    STRING          shift and go to state 30

  ! LSQBRACK        [ reduce using rule 62 (atom_expr -> .) ]
  ! PLUS            [ reduce using rule 62 (atom_expr -> .) ]
  ! MINUS           [ reduce using rule 62 (atom_expr -> .) ]

    list_expr                      shift and go to state 55
    expr                           shift and go to state 56
    factor                         shift and go to state 36
    atom_expr                      shift and go to state 37
    atom                           shift and go to state 38
    name                           shift and go to state 18
    number                         shift and go to state 40
    string                         shift and go to state 41

state 20

    (15) print -> PRINT . LPAREN small_stmt RPAREN SEMICOLON

    LPAREN          shift and go to state 57


state 21

    (33) test -> comparison . OR test
    (34) test -> comparison . AND test
    (35) test -> comparison .

  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    OR              shift and go to state 58
    AND             shift and go to state 59
    SEMICOLON       reduce using rule 35 (test -> comparison .)
    LBRACK          reduce using rule 35 (test -> comparison .)
    RETURN          reduce using rule 35 (test -> comparison .)
    BREAK           reduce using rule 35 (test -> comparison .)
    CONTINUE        reduce using rule 35 (test -> comparison .)
    NAME            reduce using rule 35 (test -> comparison .)
    TRAIN           reduce using rule 35 (test -> comparison .)
    PRED            reduce using rule 35 (test -> comparison .)
    SAVE            reduce using rule 35 (test -> comparison .)
    PLUS            reduce using rule 35 (test -> comparison .)
    MINUS           reduce using rule 35 (test -> comparison .)
    LPAREN          reduce using rule 35 (test -> comparison .)
    LSQBRACK        reduce using rule 35 (test -> comparison .)
    TRUE            reduce using rule 35 (test -> comparison .)
    FALSE           reduce using rule 35 (test -> comparison .)
    NONE            reduce using rule 35 (test -> comparison .)
    INT             reduce using rule 35 (test -> comparison .)
    FLOAT           reduce using rule 35 (test -> comparison .)
    STRING          reduce using rule 35 (test -> comparison .)
    GT              reduce using rule 35 (test -> comparison .)
    LT              reduce using rule 35 (test -> comparison .)
    GTE             reduce using rule 35 (test -> comparison .)
    LTE             reduce using rule 35 (test -> comparison .)
    EQ              reduce using rule 35 (test -> comparison .)
    NEQ             reduce using rule 35 (test -> comparison .)
    TIMES           reduce using rule 35 (test -> comparison .)
    DIVIDE          reduce using rule 35 (test -> comparison .)
    MOD             reduce using rule 35 (test -> comparison .)
    RPAREN          reduce using rule 35 (test -> comparison .)

  ! OR              [ reduce using rule 35 (test -> comparison .) ]
  ! AND             [ reduce using rule 35 (test -> comparison .) ]


state 22

    (22) flow_stmt -> RETURN .
    (23) flow_stmt -> RETURN . list_expr
    (75) list_expr -> . list_expr COMMA expr
    (76) list_expr -> . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MOD expr
    (58) expr -> . factor
    (59) factor -> . PLUS factor
    (60) factor -> . MINUS factor
    (61) factor -> . atom_expr
    (62) atom_expr -> .
    (63) atom_expr -> . atom
    (64) atom_expr -> . atom_expr LSQBRACK expr RSQBRACK
    (65) atom_expr -> . name LPAREN list_expr RPAREN
    (66) atom -> . LPAREN list_expr RPAREN
    (67) atom -> . LSQBRACK list_expr RSQBRACK
    (68) atom -> . name
    (69) atom -> . number
    (70) atom -> . string
    (71) atom -> . TRUE
    (72) atom -> . FALSE
    (73) atom -> . NONE
    (74) atom -> . name LSQBRACK atom RSQBRACK
    (77) name -> . NAME
    (78) number -> . INT
    (79) number -> . FLOAT
    (80) string -> . STRING

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for SEMICOLON resolved using rule 22 (flow_stmt -> RETURN .)
  ! reduce/reduce conflict for RPAREN resolved using rule 22 (flow_stmt -> RETURN .)
  ! shift/reduce conflict for LSQBRACK resolved as shift
    SEMICOLON       reduce using rule 22 (flow_stmt -> RETURN .)
    RPAREN          reduce using rule 22 (flow_stmt -> RETURN .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           reduce using rule 62 (atom_expr -> .)
    DIVIDE          reduce using rule 62 (atom_expr -> .)
    MOD             reduce using rule 62 (atom_expr -> .)
    COMMA           reduce using rule 62 (atom_expr -> .)
    LPAREN          shift and go to state 19
    LSQBRACK        shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    NONE            shift and go to state 44
    NAME            shift and go to state 50
    INT             shift and go to state 45
    FLOAT           shift and go to state 46
    STRING          shift and go to state 30

  ! LSQBRACK        [ reduce using rule 62 (atom_expr -> .) ]
  ! PLUS            [ reduce using rule 62 (atom_expr -> .) ]
  ! MINUS           [ reduce using rule 62 (atom_expr -> .) ]
  ! SEMICOLON       [ reduce using rule 62 (atom_expr -> .) ]
  ! RPAREN          [ reduce using rule 62 (atom_expr -> .) ]

    list_expr                      shift and go to state 60
    expr                           shift and go to state 56
    factor                         shift and go to state 36
    atom_expr                      shift and go to state 37
    atom                           shift and go to state 38
    name                           shift and go to state 18
    number                         shift and go to state 40
    string                         shift and go to state 41

state 23

    (24) flow_stmt -> BREAK .

    SEMICOLON       reduce using rule 24 (flow_stmt -> BREAK .)
    RPAREN          reduce using rule 24 (flow_stmt -> BREAK .)


state 24

    (25) flow_stmt -> CONTINUE .

    SEMICOLON       reduce using rule 25 (flow_stmt -> CONTINUE .)
    RPAREN          reduce using rule 25 (flow_stmt -> CONTINUE .)


state 25

    (16) dl_stmt -> train_stmt .

    SEMICOLON       reduce using rule 16 (dl_stmt -> train_stmt .)
    RPAREN          reduce using rule 16 (dl_stmt -> train_stmt .)


state 26

    (17) dl_stmt -> pred_stmt .

    SEMICOLON       reduce using rule 17 (dl_stmt -> pred_stmt .)
    RPAREN          reduce using rule 17 (dl_stmt -> pred_stmt .)


state 27

    (18) dl_stmt -> save_stmt .

    SEMICOLON       reduce using rule 18 (dl_stmt -> save_stmt .)
    RPAREN          reduce using rule 18 (dl_stmt -> save_stmt .)


state 28

    (49) assign_expr -> NAME . ASSIGN expr
    (50) assign_expr -> NAME . COLON basic_type ASSIGN expr
    (51) assign_expr -> NAME . COLON basic_type ASSIGN STRING COLON STRING
    (52) assign_expr -> NAME . COLON basic_type ASSIGN list_expr COLON STRING
    (77) name -> NAME .

    ASSIGN          shift and go to state 61
    COLON           shift and go to state 62
    LPAREN          reduce using rule 77 (name -> NAME .)
    LSQBRACK        reduce using rule 77 (name -> NAME .)
    GT              reduce using rule 77 (name -> NAME .)
    LT              reduce using rule 77 (name -> NAME .)
    GTE             reduce using rule 77 (name -> NAME .)
    LTE             reduce using rule 77 (name -> NAME .)
    EQ              reduce using rule 77 (name -> NAME .)
    NEQ             reduce using rule 77 (name -> NAME .)
    PLUS            reduce using rule 77 (name -> NAME .)
    MINUS           reduce using rule 77 (name -> NAME .)
    TIMES           reduce using rule 77 (name -> NAME .)
    DIVIDE          reduce using rule 77 (name -> NAME .)
    MOD             reduce using rule 77 (name -> NAME .)
    OR              reduce using rule 77 (name -> NAME .)
    AND             reduce using rule 77 (name -> NAME .)
    SEMICOLON       reduce using rule 77 (name -> NAME .)
    RPAREN          reduce using rule 77 (name -> NAME .)


state 29

    (36) comparison -> expr . GT expr
    (37) comparison -> expr . LT expr
    (38) comparison -> expr . GTE expr
    (39) comparison -> expr . LTE expr
    (40) comparison -> expr . EQ expr
    (41) comparison -> expr . NEQ expr
    (42) comparison -> expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MOD expr

  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    GT              shift and go to state 63
    LT              shift and go to state 64
    GTE             shift and go to state 65
    LTE             shift and go to state 66
    EQ              shift and go to state 67
    NEQ             shift and go to state 68
    OR              reduce using rule 42 (comparison -> expr .)
    AND             reduce using rule 42 (comparison -> expr .)
    SEMICOLON       reduce using rule 42 (comparison -> expr .)
    LBRACK          reduce using rule 42 (comparison -> expr .)
    RETURN          reduce using rule 42 (comparison -> expr .)
    BREAK           reduce using rule 42 (comparison -> expr .)
    CONTINUE        reduce using rule 42 (comparison -> expr .)
    NAME            reduce using rule 42 (comparison -> expr .)
    TRAIN           reduce using rule 42 (comparison -> expr .)
    PRED            reduce using rule 42 (comparison -> expr .)
    SAVE            reduce using rule 42 (comparison -> expr .)
    LPAREN          reduce using rule 42 (comparison -> expr .)
    LSQBRACK        reduce using rule 42 (comparison -> expr .)
    TRUE            reduce using rule 42 (comparison -> expr .)
    FALSE           reduce using rule 42 (comparison -> expr .)
    NONE            reduce using rule 42 (comparison -> expr .)
    INT             reduce using rule 42 (comparison -> expr .)
    FLOAT           reduce using rule 42 (comparison -> expr .)
    STRING          reduce using rule 42 (comparison -> expr .)
    RPAREN          reduce using rule 42 (comparison -> expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72
    MOD             shift and go to state 73

  ! PLUS            [ reduce using rule 42 (comparison -> expr .) ]
  ! MINUS           [ reduce using rule 42 (comparison -> expr .) ]
  ! GT              [ reduce using rule 42 (comparison -> expr .) ]
  ! LT              [ reduce using rule 42 (comparison -> expr .) ]
  ! GTE             [ reduce using rule 42 (comparison -> expr .) ]
  ! LTE             [ reduce using rule 42 (comparison -> expr .) ]
  ! EQ              [ reduce using rule 42 (comparison -> expr .) ]
  ! NEQ             [ reduce using rule 42 (comparison -> expr .) ]
  ! TIMES           [ reduce using rule 42 (comparison -> expr .) ]
  ! DIVIDE          [ reduce using rule 42 (comparison -> expr .) ]
  ! MOD             [ reduce using rule 42 (comparison -> expr .) ]


state 30

    (80) string -> STRING .

    LSQBRACK        reduce using rule 80 (string -> STRING .)
    GT              reduce using rule 80 (string -> STRING .)
    LT              reduce using rule 80 (string -> STRING .)
    GTE             reduce using rule 80 (string -> STRING .)
    LTE             reduce using rule 80 (string -> STRING .)
    EQ              reduce using rule 80 (string -> STRING .)
    NEQ             reduce using rule 80 (string -> STRING .)
    PLUS            reduce using rule 80 (string -> STRING .)
    MINUS           reduce using rule 80 (string -> STRING .)
    TIMES           reduce using rule 80 (string -> STRING .)
    DIVIDE          reduce using rule 80 (string -> STRING .)
    MOD             reduce using rule 80 (string -> STRING .)
    OR              reduce using rule 80 (string -> STRING .)
    AND             reduce using rule 80 (string -> STRING .)
    SEMICOLON       reduce using rule 80 (string -> STRING .)
    LBRACK          reduce using rule 80 (string -> STRING .)
    RETURN          reduce using rule 80 (string -> STRING .)
    BREAK           reduce using rule 80 (string -> STRING .)
    CONTINUE        reduce using rule 80 (string -> STRING .)
    NAME            reduce using rule 80 (string -> STRING .)
    TRAIN           reduce using rule 80 (string -> STRING .)
    PRED            reduce using rule 80 (string -> STRING .)
    SAVE            reduce using rule 80 (string -> STRING .)
    LPAREN          reduce using rule 80 (string -> STRING .)
    TRUE            reduce using rule 80 (string -> STRING .)
    FALSE           reduce using rule 80 (string -> STRING .)
    NONE            reduce using rule 80 (string -> STRING .)
    INT             reduce using rule 80 (string -> STRING .)
    FLOAT           reduce using rule 80 (string -> STRING .)
    STRING          reduce using rule 80 (string -> STRING .)
    RPAREN          reduce using rule 80 (string -> STRING .)
    COMMA           reduce using rule 80 (string -> STRING .)
    RSQBRACK        reduce using rule 80 (string -> STRING .)
    COLON           reduce using rule 80 (string -> STRING .)


state 31

    (19) train_stmt -> TRAIN . name list_expr
    (77) name -> . NAME

    NAME            shift and go to state 50

    name                           shift and go to state 74

state 32

    (20) pred_stmt -> PRED . name STRING
    (77) name -> . NAME

    NAME            shift and go to state 50

    name                           shift and go to state 75

state 33

    (21) save_stmt -> SAVE . name STRING
    (77) name -> . NAME

    NAME            shift and go to state 50

    name                           shift and go to state 76

state 34

    (59) factor -> PLUS . factor
    (59) factor -> . PLUS factor
    (60) factor -> . MINUS factor
    (61) factor -> . atom_expr
    (62) atom_expr -> .
    (63) atom_expr -> . atom
    (64) atom_expr -> . atom_expr LSQBRACK expr RSQBRACK
    (65) atom_expr -> . name LPAREN list_expr RPAREN
    (66) atom -> . LPAREN list_expr RPAREN
    (67) atom -> . LSQBRACK list_expr RSQBRACK
    (68) atom -> . name
    (69) atom -> . number
    (70) atom -> . string
    (71) atom -> . TRUE
    (72) atom -> . FALSE
    (73) atom -> . NONE
    (74) atom -> . name LSQBRACK atom RSQBRACK
    (77) name -> . NAME
    (78) number -> . INT
    (79) number -> . FLOAT
    (80) string -> . STRING

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for NONE resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    GT              reduce using rule 62 (atom_expr -> .)
    LT              reduce using rule 62 (atom_expr -> .)
    GTE             reduce using rule 62 (atom_expr -> .)
    LTE             reduce using rule 62 (atom_expr -> .)
    EQ              reduce using rule 62 (atom_expr -> .)
    NEQ             reduce using rule 62 (atom_expr -> .)
    TIMES           reduce using rule 62 (atom_expr -> .)
    DIVIDE          reduce using rule 62 (atom_expr -> .)
    MOD             reduce using rule 62 (atom_expr -> .)
    OR              reduce using rule 62 (atom_expr -> .)
    AND             reduce using rule 62 (atom_expr -> .)
    SEMICOLON       reduce using rule 62 (atom_expr -> .)
    LBRACK          reduce using rule 62 (atom_expr -> .)
    RETURN          reduce using rule 62 (atom_expr -> .)
    BREAK           reduce using rule 62 (atom_expr -> .)
    CONTINUE        reduce using rule 62 (atom_expr -> .)
    TRAIN           reduce using rule 62 (atom_expr -> .)
    PRED            reduce using rule 62 (atom_expr -> .)
    SAVE            reduce using rule 62 (atom_expr -> .)
    RPAREN          reduce using rule 62 (atom_expr -> .)
    COMMA           reduce using rule 62 (atom_expr -> .)
    RSQBRACK        reduce using rule 62 (atom_expr -> .)
    COLON           reduce using rule 62 (atom_expr -> .)
    LPAREN          shift and go to state 19
    LSQBRACK        shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    NONE            shift and go to state 44
    NAME            shift and go to state 50
    INT             shift and go to state 45
    FLOAT           shift and go to state 46
    STRING          shift and go to state 30

  ! LSQBRACK        [ reduce using rule 62 (atom_expr -> .) ]
  ! PLUS            [ reduce using rule 62 (atom_expr -> .) ]
  ! MINUS           [ reduce using rule 62 (atom_expr -> .) ]
  ! NAME            [ reduce using rule 62 (atom_expr -> .) ]
  ! LPAREN          [ reduce using rule 62 (atom_expr -> .) ]
  ! TRUE            [ reduce using rule 62 (atom_expr -> .) ]
  ! FALSE           [ reduce using rule 62 (atom_expr -> .) ]
  ! NONE            [ reduce using rule 62 (atom_expr -> .) ]
  ! INT             [ reduce using rule 62 (atom_expr -> .) ]
  ! FLOAT           [ reduce using rule 62 (atom_expr -> .) ]
  ! STRING          [ reduce using rule 62 (atom_expr -> .) ]

    factor                         shift and go to state 77
    atom_expr                      shift and go to state 37
    atom                           shift and go to state 38
    name                           shift and go to state 18
    number                         shift and go to state 40
    string                         shift and go to state 41

state 35

    (60) factor -> MINUS . factor
    (59) factor -> . PLUS factor
    (60) factor -> . MINUS factor
    (61) factor -> . atom_expr
    (62) atom_expr -> .
    (63) atom_expr -> . atom
    (64) atom_expr -> . atom_expr LSQBRACK expr RSQBRACK
    (65) atom_expr -> . name LPAREN list_expr RPAREN
    (66) atom -> . LPAREN list_expr RPAREN
    (67) atom -> . LSQBRACK list_expr RSQBRACK
    (68) atom -> . name
    (69) atom -> . number
    (70) atom -> . string
    (71) atom -> . TRUE
    (72) atom -> . FALSE
    (73) atom -> . NONE
    (74) atom -> . name LSQBRACK atom RSQBRACK
    (77) name -> . NAME
    (78) number -> . INT
    (79) number -> . FLOAT
    (80) string -> . STRING

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for NONE resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    GT              reduce using rule 62 (atom_expr -> .)
    LT              reduce using rule 62 (atom_expr -> .)
    GTE             reduce using rule 62 (atom_expr -> .)
    LTE             reduce using rule 62 (atom_expr -> .)
    EQ              reduce using rule 62 (atom_expr -> .)
    NEQ             reduce using rule 62 (atom_expr -> .)
    TIMES           reduce using rule 62 (atom_expr -> .)
    DIVIDE          reduce using rule 62 (atom_expr -> .)
    MOD             reduce using rule 62 (atom_expr -> .)
    OR              reduce using rule 62 (atom_expr -> .)
    AND             reduce using rule 62 (atom_expr -> .)
    SEMICOLON       reduce using rule 62 (atom_expr -> .)
    LBRACK          reduce using rule 62 (atom_expr -> .)
    RETURN          reduce using rule 62 (atom_expr -> .)
    BREAK           reduce using rule 62 (atom_expr -> .)
    CONTINUE        reduce using rule 62 (atom_expr -> .)
    TRAIN           reduce using rule 62 (atom_expr -> .)
    PRED            reduce using rule 62 (atom_expr -> .)
    SAVE            reduce using rule 62 (atom_expr -> .)
    RPAREN          reduce using rule 62 (atom_expr -> .)
    COMMA           reduce using rule 62 (atom_expr -> .)
    RSQBRACK        reduce using rule 62 (atom_expr -> .)
    COLON           reduce using rule 62 (atom_expr -> .)
    LPAREN          shift and go to state 19
    LSQBRACK        shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    NONE            shift and go to state 44
    NAME            shift and go to state 50
    INT             shift and go to state 45
    FLOAT           shift and go to state 46
    STRING          shift and go to state 30

  ! LSQBRACK        [ reduce using rule 62 (atom_expr -> .) ]
  ! PLUS            [ reduce using rule 62 (atom_expr -> .) ]
  ! MINUS           [ reduce using rule 62 (atom_expr -> .) ]
  ! NAME            [ reduce using rule 62 (atom_expr -> .) ]
  ! LPAREN          [ reduce using rule 62 (atom_expr -> .) ]
  ! TRUE            [ reduce using rule 62 (atom_expr -> .) ]
  ! FALSE           [ reduce using rule 62 (atom_expr -> .) ]
  ! NONE            [ reduce using rule 62 (atom_expr -> .) ]
  ! INT             [ reduce using rule 62 (atom_expr -> .) ]
  ! FLOAT           [ reduce using rule 62 (atom_expr -> .) ]
  ! STRING          [ reduce using rule 62 (atom_expr -> .) ]

    factor                         shift and go to state 78
    atom_expr                      shift and go to state 37
    atom                           shift and go to state 38
    name                           shift and go to state 18
    number                         shift and go to state 40
    string                         shift and go to state 41

state 36

    (58) expr -> factor .

    GT              reduce using rule 58 (expr -> factor .)
    LT              reduce using rule 58 (expr -> factor .)
    GTE             reduce using rule 58 (expr -> factor .)
    LTE             reduce using rule 58 (expr -> factor .)
    EQ              reduce using rule 58 (expr -> factor .)
    NEQ             reduce using rule 58 (expr -> factor .)
    PLUS            reduce using rule 58 (expr -> factor .)
    MINUS           reduce using rule 58 (expr -> factor .)
    TIMES           reduce using rule 58 (expr -> factor .)
    DIVIDE          reduce using rule 58 (expr -> factor .)
    MOD             reduce using rule 58 (expr -> factor .)
    OR              reduce using rule 58 (expr -> factor .)
    AND             reduce using rule 58 (expr -> factor .)
    SEMICOLON       reduce using rule 58 (expr -> factor .)
    LBRACK          reduce using rule 58 (expr -> factor .)
    RETURN          reduce using rule 58 (expr -> factor .)
    BREAK           reduce using rule 58 (expr -> factor .)
    CONTINUE        reduce using rule 58 (expr -> factor .)
    NAME            reduce using rule 58 (expr -> factor .)
    TRAIN           reduce using rule 58 (expr -> factor .)
    PRED            reduce using rule 58 (expr -> factor .)
    SAVE            reduce using rule 58 (expr -> factor .)
    LPAREN          reduce using rule 58 (expr -> factor .)
    LSQBRACK        reduce using rule 58 (expr -> factor .)
    TRUE            reduce using rule 58 (expr -> factor .)
    FALSE           reduce using rule 58 (expr -> factor .)
    NONE            reduce using rule 58 (expr -> factor .)
    INT             reduce using rule 58 (expr -> factor .)
    FLOAT           reduce using rule 58 (expr -> factor .)
    STRING          reduce using rule 58 (expr -> factor .)
    RPAREN          reduce using rule 58 (expr -> factor .)
    COMMA           reduce using rule 58 (expr -> factor .)
    RSQBRACK        reduce using rule 58 (expr -> factor .)
    COLON           reduce using rule 58 (expr -> factor .)


state 37

    (61) factor -> atom_expr .
    (64) atom_expr -> atom_expr . LSQBRACK expr RSQBRACK

  ! shift/reduce conflict for LSQBRACK resolved as shift
    GT              reduce using rule 61 (factor -> atom_expr .)
    LT              reduce using rule 61 (factor -> atom_expr .)
    GTE             reduce using rule 61 (factor -> atom_expr .)
    LTE             reduce using rule 61 (factor -> atom_expr .)
    EQ              reduce using rule 61 (factor -> atom_expr .)
    NEQ             reduce using rule 61 (factor -> atom_expr .)
    PLUS            reduce using rule 61 (factor -> atom_expr .)
    MINUS           reduce using rule 61 (factor -> atom_expr .)
    TIMES           reduce using rule 61 (factor -> atom_expr .)
    DIVIDE          reduce using rule 61 (factor -> atom_expr .)
    MOD             reduce using rule 61 (factor -> atom_expr .)
    OR              reduce using rule 61 (factor -> atom_expr .)
    AND             reduce using rule 61 (factor -> atom_expr .)
    SEMICOLON       reduce using rule 61 (factor -> atom_expr .)
    LBRACK          reduce using rule 61 (factor -> atom_expr .)
    RETURN          reduce using rule 61 (factor -> atom_expr .)
    BREAK           reduce using rule 61 (factor -> atom_expr .)
    CONTINUE        reduce using rule 61 (factor -> atom_expr .)
    NAME            reduce using rule 61 (factor -> atom_expr .)
    TRAIN           reduce using rule 61 (factor -> atom_expr .)
    PRED            reduce using rule 61 (factor -> atom_expr .)
    SAVE            reduce using rule 61 (factor -> atom_expr .)
    LPAREN          reduce using rule 61 (factor -> atom_expr .)
    TRUE            reduce using rule 61 (factor -> atom_expr .)
    FALSE           reduce using rule 61 (factor -> atom_expr .)
    NONE            reduce using rule 61 (factor -> atom_expr .)
    INT             reduce using rule 61 (factor -> atom_expr .)
    FLOAT           reduce using rule 61 (factor -> atom_expr .)
    STRING          reduce using rule 61 (factor -> atom_expr .)
    RPAREN          reduce using rule 61 (factor -> atom_expr .)
    COMMA           reduce using rule 61 (factor -> atom_expr .)
    RSQBRACK        reduce using rule 61 (factor -> atom_expr .)
    COLON           reduce using rule 61 (factor -> atom_expr .)
    LSQBRACK        shift and go to state 79

  ! LSQBRACK        [ reduce using rule 61 (factor -> atom_expr .) ]


state 38

    (63) atom_expr -> atom .

    LSQBRACK        reduce using rule 63 (atom_expr -> atom .)
    GT              reduce using rule 63 (atom_expr -> atom .)
    LT              reduce using rule 63 (atom_expr -> atom .)
    GTE             reduce using rule 63 (atom_expr -> atom .)
    LTE             reduce using rule 63 (atom_expr -> atom .)
    EQ              reduce using rule 63 (atom_expr -> atom .)
    NEQ             reduce using rule 63 (atom_expr -> atom .)
    PLUS            reduce using rule 63 (atom_expr -> atom .)
    MINUS           reduce using rule 63 (atom_expr -> atom .)
    TIMES           reduce using rule 63 (atom_expr -> atom .)
    DIVIDE          reduce using rule 63 (atom_expr -> atom .)
    MOD             reduce using rule 63 (atom_expr -> atom .)
    OR              reduce using rule 63 (atom_expr -> atom .)
    AND             reduce using rule 63 (atom_expr -> atom .)
    SEMICOLON       reduce using rule 63 (atom_expr -> atom .)
    LBRACK          reduce using rule 63 (atom_expr -> atom .)
    RETURN          reduce using rule 63 (atom_expr -> atom .)
    BREAK           reduce using rule 63 (atom_expr -> atom .)
    CONTINUE        reduce using rule 63 (atom_expr -> atom .)
    NAME            reduce using rule 63 (atom_expr -> atom .)
    TRAIN           reduce using rule 63 (atom_expr -> atom .)
    PRED            reduce using rule 63 (atom_expr -> atom .)
    SAVE            reduce using rule 63 (atom_expr -> atom .)
    LPAREN          reduce using rule 63 (atom_expr -> atom .)
    TRUE            reduce using rule 63 (atom_expr -> atom .)
    FALSE           reduce using rule 63 (atom_expr -> atom .)
    NONE            reduce using rule 63 (atom_expr -> atom .)
    INT             reduce using rule 63 (atom_expr -> atom .)
    FLOAT           reduce using rule 63 (atom_expr -> atom .)
    STRING          reduce using rule 63 (atom_expr -> atom .)
    RPAREN          reduce using rule 63 (atom_expr -> atom .)
    COMMA           reduce using rule 63 (atom_expr -> atom .)
    RSQBRACK        reduce using rule 63 (atom_expr -> atom .)
    COLON           reduce using rule 63 (atom_expr -> atom .)


state 39

    (67) atom -> LSQBRACK . list_expr RSQBRACK
    (75) list_expr -> . list_expr COMMA expr
    (76) list_expr -> . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MOD expr
    (58) expr -> . factor
    (59) factor -> . PLUS factor
    (60) factor -> . MINUS factor
    (61) factor -> . atom_expr
    (62) atom_expr -> .
    (63) atom_expr -> . atom
    (64) atom_expr -> . atom_expr LSQBRACK expr RSQBRACK
    (65) atom_expr -> . name LPAREN list_expr RPAREN
    (66) atom -> . LPAREN list_expr RPAREN
    (67) atom -> . LSQBRACK list_expr RSQBRACK
    (68) atom -> . name
    (69) atom -> . number
    (70) atom -> . string
    (71) atom -> . TRUE
    (72) atom -> . FALSE
    (73) atom -> . NONE
    (74) atom -> . name LSQBRACK atom RSQBRACK
    (77) name -> . NAME
    (78) number -> . INT
    (79) number -> . FLOAT
    (80) string -> . STRING

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           reduce using rule 62 (atom_expr -> .)
    DIVIDE          reduce using rule 62 (atom_expr -> .)
    MOD             reduce using rule 62 (atom_expr -> .)
    RSQBRACK        reduce using rule 62 (atom_expr -> .)
    COMMA           reduce using rule 62 (atom_expr -> .)
    LPAREN          shift and go to state 19
    LSQBRACK        shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    NONE            shift and go to state 44
    NAME            shift and go to state 50
    INT             shift and go to state 45
    FLOAT           shift and go to state 46
    STRING          shift and go to state 30

  ! LSQBRACK        [ reduce using rule 62 (atom_expr -> .) ]
  ! PLUS            [ reduce using rule 62 (atom_expr -> .) ]
  ! MINUS           [ reduce using rule 62 (atom_expr -> .) ]

    list_expr                      shift and go to state 80
    expr                           shift and go to state 56
    factor                         shift and go to state 36
    atom_expr                      shift and go to state 37
    atom                           shift and go to state 38
    name                           shift and go to state 18
    number                         shift and go to state 40
    string                         shift and go to state 41

state 40

    (69) atom -> number .

    LSQBRACK        reduce using rule 69 (atom -> number .)
    GT              reduce using rule 69 (atom -> number .)
    LT              reduce using rule 69 (atom -> number .)
    GTE             reduce using rule 69 (atom -> number .)
    LTE             reduce using rule 69 (atom -> number .)
    EQ              reduce using rule 69 (atom -> number .)
    NEQ             reduce using rule 69 (atom -> number .)
    PLUS            reduce using rule 69 (atom -> number .)
    MINUS           reduce using rule 69 (atom -> number .)
    TIMES           reduce using rule 69 (atom -> number .)
    DIVIDE          reduce using rule 69 (atom -> number .)
    MOD             reduce using rule 69 (atom -> number .)
    OR              reduce using rule 69 (atom -> number .)
    AND             reduce using rule 69 (atom -> number .)
    SEMICOLON       reduce using rule 69 (atom -> number .)
    LBRACK          reduce using rule 69 (atom -> number .)
    RETURN          reduce using rule 69 (atom -> number .)
    BREAK           reduce using rule 69 (atom -> number .)
    CONTINUE        reduce using rule 69 (atom -> number .)
    NAME            reduce using rule 69 (atom -> number .)
    TRAIN           reduce using rule 69 (atom -> number .)
    PRED            reduce using rule 69 (atom -> number .)
    SAVE            reduce using rule 69 (atom -> number .)
    LPAREN          reduce using rule 69 (atom -> number .)
    TRUE            reduce using rule 69 (atom -> number .)
    FALSE           reduce using rule 69 (atom -> number .)
    NONE            reduce using rule 69 (atom -> number .)
    INT             reduce using rule 69 (atom -> number .)
    FLOAT           reduce using rule 69 (atom -> number .)
    STRING          reduce using rule 69 (atom -> number .)
    RPAREN          reduce using rule 69 (atom -> number .)
    COMMA           reduce using rule 69 (atom -> number .)
    RSQBRACK        reduce using rule 69 (atom -> number .)
    COLON           reduce using rule 69 (atom -> number .)


state 41

    (70) atom -> string .

    LSQBRACK        reduce using rule 70 (atom -> string .)
    GT              reduce using rule 70 (atom -> string .)
    LT              reduce using rule 70 (atom -> string .)
    GTE             reduce using rule 70 (atom -> string .)
    LTE             reduce using rule 70 (atom -> string .)
    EQ              reduce using rule 70 (atom -> string .)
    NEQ             reduce using rule 70 (atom -> string .)
    PLUS            reduce using rule 70 (atom -> string .)
    MINUS           reduce using rule 70 (atom -> string .)
    TIMES           reduce using rule 70 (atom -> string .)
    DIVIDE          reduce using rule 70 (atom -> string .)
    MOD             reduce using rule 70 (atom -> string .)
    OR              reduce using rule 70 (atom -> string .)
    AND             reduce using rule 70 (atom -> string .)
    SEMICOLON       reduce using rule 70 (atom -> string .)
    LBRACK          reduce using rule 70 (atom -> string .)
    RETURN          reduce using rule 70 (atom -> string .)
    BREAK           reduce using rule 70 (atom -> string .)
    CONTINUE        reduce using rule 70 (atom -> string .)
    NAME            reduce using rule 70 (atom -> string .)
    TRAIN           reduce using rule 70 (atom -> string .)
    PRED            reduce using rule 70 (atom -> string .)
    SAVE            reduce using rule 70 (atom -> string .)
    LPAREN          reduce using rule 70 (atom -> string .)
    TRUE            reduce using rule 70 (atom -> string .)
    FALSE           reduce using rule 70 (atom -> string .)
    NONE            reduce using rule 70 (atom -> string .)
    INT             reduce using rule 70 (atom -> string .)
    FLOAT           reduce using rule 70 (atom -> string .)
    STRING          reduce using rule 70 (atom -> string .)
    RPAREN          reduce using rule 70 (atom -> string .)
    COMMA           reduce using rule 70 (atom -> string .)
    RSQBRACK        reduce using rule 70 (atom -> string .)
    COLON           reduce using rule 70 (atom -> string .)


state 42

    (71) atom -> TRUE .

    LSQBRACK        reduce using rule 71 (atom -> TRUE .)
    GT              reduce using rule 71 (atom -> TRUE .)
    LT              reduce using rule 71 (atom -> TRUE .)
    GTE             reduce using rule 71 (atom -> TRUE .)
    LTE             reduce using rule 71 (atom -> TRUE .)
    EQ              reduce using rule 71 (atom -> TRUE .)
    NEQ             reduce using rule 71 (atom -> TRUE .)
    PLUS            reduce using rule 71 (atom -> TRUE .)
    MINUS           reduce using rule 71 (atom -> TRUE .)
    TIMES           reduce using rule 71 (atom -> TRUE .)
    DIVIDE          reduce using rule 71 (atom -> TRUE .)
    MOD             reduce using rule 71 (atom -> TRUE .)
    OR              reduce using rule 71 (atom -> TRUE .)
    AND             reduce using rule 71 (atom -> TRUE .)
    SEMICOLON       reduce using rule 71 (atom -> TRUE .)
    LBRACK          reduce using rule 71 (atom -> TRUE .)
    RETURN          reduce using rule 71 (atom -> TRUE .)
    BREAK           reduce using rule 71 (atom -> TRUE .)
    CONTINUE        reduce using rule 71 (atom -> TRUE .)
    NAME            reduce using rule 71 (atom -> TRUE .)
    TRAIN           reduce using rule 71 (atom -> TRUE .)
    PRED            reduce using rule 71 (atom -> TRUE .)
    SAVE            reduce using rule 71 (atom -> TRUE .)
    LPAREN          reduce using rule 71 (atom -> TRUE .)
    TRUE            reduce using rule 71 (atom -> TRUE .)
    FALSE           reduce using rule 71 (atom -> TRUE .)
    NONE            reduce using rule 71 (atom -> TRUE .)
    INT             reduce using rule 71 (atom -> TRUE .)
    FLOAT           reduce using rule 71 (atom -> TRUE .)
    STRING          reduce using rule 71 (atom -> TRUE .)
    RPAREN          reduce using rule 71 (atom -> TRUE .)
    COMMA           reduce using rule 71 (atom -> TRUE .)
    RSQBRACK        reduce using rule 71 (atom -> TRUE .)
    COLON           reduce using rule 71 (atom -> TRUE .)


state 43

    (72) atom -> FALSE .

    LSQBRACK        reduce using rule 72 (atom -> FALSE .)
    GT              reduce using rule 72 (atom -> FALSE .)
    LT              reduce using rule 72 (atom -> FALSE .)
    GTE             reduce using rule 72 (atom -> FALSE .)
    LTE             reduce using rule 72 (atom -> FALSE .)
    EQ              reduce using rule 72 (atom -> FALSE .)
    NEQ             reduce using rule 72 (atom -> FALSE .)
    PLUS            reduce using rule 72 (atom -> FALSE .)
    MINUS           reduce using rule 72 (atom -> FALSE .)
    TIMES           reduce using rule 72 (atom -> FALSE .)
    DIVIDE          reduce using rule 72 (atom -> FALSE .)
    MOD             reduce using rule 72 (atom -> FALSE .)
    OR              reduce using rule 72 (atom -> FALSE .)
    AND             reduce using rule 72 (atom -> FALSE .)
    SEMICOLON       reduce using rule 72 (atom -> FALSE .)
    LBRACK          reduce using rule 72 (atom -> FALSE .)
    RETURN          reduce using rule 72 (atom -> FALSE .)
    BREAK           reduce using rule 72 (atom -> FALSE .)
    CONTINUE        reduce using rule 72 (atom -> FALSE .)
    NAME            reduce using rule 72 (atom -> FALSE .)
    TRAIN           reduce using rule 72 (atom -> FALSE .)
    PRED            reduce using rule 72 (atom -> FALSE .)
    SAVE            reduce using rule 72 (atom -> FALSE .)
    LPAREN          reduce using rule 72 (atom -> FALSE .)
    TRUE            reduce using rule 72 (atom -> FALSE .)
    FALSE           reduce using rule 72 (atom -> FALSE .)
    NONE            reduce using rule 72 (atom -> FALSE .)
    INT             reduce using rule 72 (atom -> FALSE .)
    FLOAT           reduce using rule 72 (atom -> FALSE .)
    STRING          reduce using rule 72 (atom -> FALSE .)
    RPAREN          reduce using rule 72 (atom -> FALSE .)
    COMMA           reduce using rule 72 (atom -> FALSE .)
    RSQBRACK        reduce using rule 72 (atom -> FALSE .)
    COLON           reduce using rule 72 (atom -> FALSE .)


state 44

    (73) atom -> NONE .

    LSQBRACK        reduce using rule 73 (atom -> NONE .)
    GT              reduce using rule 73 (atom -> NONE .)
    LT              reduce using rule 73 (atom -> NONE .)
    GTE             reduce using rule 73 (atom -> NONE .)
    LTE             reduce using rule 73 (atom -> NONE .)
    EQ              reduce using rule 73 (atom -> NONE .)
    NEQ             reduce using rule 73 (atom -> NONE .)
    PLUS            reduce using rule 73 (atom -> NONE .)
    MINUS           reduce using rule 73 (atom -> NONE .)
    TIMES           reduce using rule 73 (atom -> NONE .)
    DIVIDE          reduce using rule 73 (atom -> NONE .)
    MOD             reduce using rule 73 (atom -> NONE .)
    OR              reduce using rule 73 (atom -> NONE .)
    AND             reduce using rule 73 (atom -> NONE .)
    SEMICOLON       reduce using rule 73 (atom -> NONE .)
    LBRACK          reduce using rule 73 (atom -> NONE .)
    RETURN          reduce using rule 73 (atom -> NONE .)
    BREAK           reduce using rule 73 (atom -> NONE .)
    CONTINUE        reduce using rule 73 (atom -> NONE .)
    NAME            reduce using rule 73 (atom -> NONE .)
    TRAIN           reduce using rule 73 (atom -> NONE .)
    PRED            reduce using rule 73 (atom -> NONE .)
    SAVE            reduce using rule 73 (atom -> NONE .)
    LPAREN          reduce using rule 73 (atom -> NONE .)
    TRUE            reduce using rule 73 (atom -> NONE .)
    FALSE           reduce using rule 73 (atom -> NONE .)
    NONE            reduce using rule 73 (atom -> NONE .)
    INT             reduce using rule 73 (atom -> NONE .)
    FLOAT           reduce using rule 73 (atom -> NONE .)
    STRING          reduce using rule 73 (atom -> NONE .)
    RPAREN          reduce using rule 73 (atom -> NONE .)
    COMMA           reduce using rule 73 (atom -> NONE .)
    RSQBRACK        reduce using rule 73 (atom -> NONE .)
    COLON           reduce using rule 73 (atom -> NONE .)


state 45

    (78) number -> INT .

    LSQBRACK        reduce using rule 78 (number -> INT .)
    GT              reduce using rule 78 (number -> INT .)
    LT              reduce using rule 78 (number -> INT .)
    GTE             reduce using rule 78 (number -> INT .)
    LTE             reduce using rule 78 (number -> INT .)
    EQ              reduce using rule 78 (number -> INT .)
    NEQ             reduce using rule 78 (number -> INT .)
    PLUS            reduce using rule 78 (number -> INT .)
    MINUS           reduce using rule 78 (number -> INT .)
    TIMES           reduce using rule 78 (number -> INT .)
    DIVIDE          reduce using rule 78 (number -> INT .)
    MOD             reduce using rule 78 (number -> INT .)
    OR              reduce using rule 78 (number -> INT .)
    AND             reduce using rule 78 (number -> INT .)
    SEMICOLON       reduce using rule 78 (number -> INT .)
    LBRACK          reduce using rule 78 (number -> INT .)
    RETURN          reduce using rule 78 (number -> INT .)
    BREAK           reduce using rule 78 (number -> INT .)
    CONTINUE        reduce using rule 78 (number -> INT .)
    NAME            reduce using rule 78 (number -> INT .)
    TRAIN           reduce using rule 78 (number -> INT .)
    PRED            reduce using rule 78 (number -> INT .)
    SAVE            reduce using rule 78 (number -> INT .)
    LPAREN          reduce using rule 78 (number -> INT .)
    TRUE            reduce using rule 78 (number -> INT .)
    FALSE           reduce using rule 78 (number -> INT .)
    NONE            reduce using rule 78 (number -> INT .)
    INT             reduce using rule 78 (number -> INT .)
    FLOAT           reduce using rule 78 (number -> INT .)
    STRING          reduce using rule 78 (number -> INT .)
    RPAREN          reduce using rule 78 (number -> INT .)
    COMMA           reduce using rule 78 (number -> INT .)
    RSQBRACK        reduce using rule 78 (number -> INT .)
    COLON           reduce using rule 78 (number -> INT .)


state 46

    (79) number -> FLOAT .

    LSQBRACK        reduce using rule 79 (number -> FLOAT .)
    GT              reduce using rule 79 (number -> FLOAT .)
    LT              reduce using rule 79 (number -> FLOAT .)
    GTE             reduce using rule 79 (number -> FLOAT .)
    LTE             reduce using rule 79 (number -> FLOAT .)
    EQ              reduce using rule 79 (number -> FLOAT .)
    NEQ             reduce using rule 79 (number -> FLOAT .)
    PLUS            reduce using rule 79 (number -> FLOAT .)
    MINUS           reduce using rule 79 (number -> FLOAT .)
    TIMES           reduce using rule 79 (number -> FLOAT .)
    DIVIDE          reduce using rule 79 (number -> FLOAT .)
    MOD             reduce using rule 79 (number -> FLOAT .)
    OR              reduce using rule 79 (number -> FLOAT .)
    AND             reduce using rule 79 (number -> FLOAT .)
    SEMICOLON       reduce using rule 79 (number -> FLOAT .)
    LBRACK          reduce using rule 79 (number -> FLOAT .)
    RETURN          reduce using rule 79 (number -> FLOAT .)
    BREAK           reduce using rule 79 (number -> FLOAT .)
    CONTINUE        reduce using rule 79 (number -> FLOAT .)
    NAME            reduce using rule 79 (number -> FLOAT .)
    TRAIN           reduce using rule 79 (number -> FLOAT .)
    PRED            reduce using rule 79 (number -> FLOAT .)
    SAVE            reduce using rule 79 (number -> FLOAT .)
    LPAREN          reduce using rule 79 (number -> FLOAT .)
    TRUE            reduce using rule 79 (number -> FLOAT .)
    FALSE           reduce using rule 79 (number -> FLOAT .)
    NONE            reduce using rule 79 (number -> FLOAT .)
    INT             reduce using rule 79 (number -> FLOAT .)
    FLOAT           reduce using rule 79 (number -> FLOAT .)
    STRING          reduce using rule 79 (number -> FLOAT .)
    RPAREN          reduce using rule 79 (number -> FLOAT .)
    COMMA           reduce using rule 79 (number -> FLOAT .)
    RSQBRACK        reduce using rule 79 (number -> FLOAT .)
    COLON           reduce using rule 79 (number -> FLOAT .)


state 47

    (2) stmt_list -> stmt_list stmt .

    IF              reduce using rule 2 (stmt_list -> stmt_list stmt .)
    WHILE           reduce using rule 2 (stmt_list -> stmt_list stmt .)
    DEF             reduce using rule 2 (stmt_list -> stmt_list stmt .)
    PRINT           reduce using rule 2 (stmt_list -> stmt_list stmt .)
    RETURN          reduce using rule 2 (stmt_list -> stmt_list stmt .)
    BREAK           reduce using rule 2 (stmt_list -> stmt_list stmt .)
    CONTINUE        reduce using rule 2 (stmt_list -> stmt_list stmt .)
    NAME            reduce using rule 2 (stmt_list -> stmt_list stmt .)
    TRAIN           reduce using rule 2 (stmt_list -> stmt_list stmt .)
    PRED            reduce using rule 2 (stmt_list -> stmt_list stmt .)
    SAVE            reduce using rule 2 (stmt_list -> stmt_list stmt .)
    PLUS            reduce using rule 2 (stmt_list -> stmt_list stmt .)
    MINUS           reduce using rule 2 (stmt_list -> stmt_list stmt .)
    LPAREN          reduce using rule 2 (stmt_list -> stmt_list stmt .)
    LSQBRACK        reduce using rule 2 (stmt_list -> stmt_list stmt .)
    TRUE            reduce using rule 2 (stmt_list -> stmt_list stmt .)
    FALSE           reduce using rule 2 (stmt_list -> stmt_list stmt .)
    NONE            reduce using rule 2 (stmt_list -> stmt_list stmt .)
    INT             reduce using rule 2 (stmt_list -> stmt_list stmt .)
    FLOAT           reduce using rule 2 (stmt_list -> stmt_list stmt .)
    STRING          reduce using rule 2 (stmt_list -> stmt_list stmt .)
    SEMICOLON       reduce using rule 2 (stmt_list -> stmt_list stmt .)
    OR              reduce using rule 2 (stmt_list -> stmt_list stmt .)
    AND             reduce using rule 2 (stmt_list -> stmt_list stmt .)
    GT              reduce using rule 2 (stmt_list -> stmt_list stmt .)
    LT              reduce using rule 2 (stmt_list -> stmt_list stmt .)
    GTE             reduce using rule 2 (stmt_list -> stmt_list stmt .)
    LTE             reduce using rule 2 (stmt_list -> stmt_list stmt .)
    EQ              reduce using rule 2 (stmt_list -> stmt_list stmt .)
    NEQ             reduce using rule 2 (stmt_list -> stmt_list stmt .)
    TIMES           reduce using rule 2 (stmt_list -> stmt_list stmt .)
    DIVIDE          reduce using rule 2 (stmt_list -> stmt_list stmt .)
    MOD             reduce using rule 2 (stmt_list -> stmt_list stmt .)
    $end            reduce using rule 2 (stmt_list -> stmt_list stmt .)
    RBRACK          reduce using rule 2 (stmt_list -> stmt_list stmt .)


state 48

    (10) simple_stmt -> small_stmt SEMICOLON .

    IF              reduce using rule 10 (simple_stmt -> small_stmt SEMICOLON .)
    WHILE           reduce using rule 10 (simple_stmt -> small_stmt SEMICOLON .)
    DEF             reduce using rule 10 (simple_stmt -> small_stmt SEMICOLON .)
    PRINT           reduce using rule 10 (simple_stmt -> small_stmt SEMICOLON .)
    RETURN          reduce using rule 10 (simple_stmt -> small_stmt SEMICOLON .)
    BREAK           reduce using rule 10 (simple_stmt -> small_stmt SEMICOLON .)
    CONTINUE        reduce using rule 10 (simple_stmt -> small_stmt SEMICOLON .)
    NAME            reduce using rule 10 (simple_stmt -> small_stmt SEMICOLON .)
    TRAIN           reduce using rule 10 (simple_stmt -> small_stmt SEMICOLON .)
    PRED            reduce using rule 10 (simple_stmt -> small_stmt SEMICOLON .)
    SAVE            reduce using rule 10 (simple_stmt -> small_stmt SEMICOLON .)
    PLUS            reduce using rule 10 (simple_stmt -> small_stmt SEMICOLON .)
    MINUS           reduce using rule 10 (simple_stmt -> small_stmt SEMICOLON .)
    LPAREN          reduce using rule 10 (simple_stmt -> small_stmt SEMICOLON .)
    LSQBRACK        reduce using rule 10 (simple_stmt -> small_stmt SEMICOLON .)
    TRUE            reduce using rule 10 (simple_stmt -> small_stmt SEMICOLON .)
    FALSE           reduce using rule 10 (simple_stmt -> small_stmt SEMICOLON .)
    NONE            reduce using rule 10 (simple_stmt -> small_stmt SEMICOLON .)
    INT             reduce using rule 10 (simple_stmt -> small_stmt SEMICOLON .)
    FLOAT           reduce using rule 10 (simple_stmt -> small_stmt SEMICOLON .)
    STRING          reduce using rule 10 (simple_stmt -> small_stmt SEMICOLON .)
    SEMICOLON       reduce using rule 10 (simple_stmt -> small_stmt SEMICOLON .)
    OR              reduce using rule 10 (simple_stmt -> small_stmt SEMICOLON .)
    AND             reduce using rule 10 (simple_stmt -> small_stmt SEMICOLON .)
    GT              reduce using rule 10 (simple_stmt -> small_stmt SEMICOLON .)
    LT              reduce using rule 10 (simple_stmt -> small_stmt SEMICOLON .)
    GTE             reduce using rule 10 (simple_stmt -> small_stmt SEMICOLON .)
    LTE             reduce using rule 10 (simple_stmt -> small_stmt SEMICOLON .)
    EQ              reduce using rule 10 (simple_stmt -> small_stmt SEMICOLON .)
    NEQ             reduce using rule 10 (simple_stmt -> small_stmt SEMICOLON .)
    TIMES           reduce using rule 10 (simple_stmt -> small_stmt SEMICOLON .)
    DIVIDE          reduce using rule 10 (simple_stmt -> small_stmt SEMICOLON .)
    MOD             reduce using rule 10 (simple_stmt -> small_stmt SEMICOLON .)
    $end            reduce using rule 10 (simple_stmt -> small_stmt SEMICOLON .)
    ELSE            reduce using rule 10 (simple_stmt -> small_stmt SEMICOLON .)
    RBRACK          reduce using rule 10 (simple_stmt -> small_stmt SEMICOLON .)


state 49

    (28) if_stmt -> IF test . suite
    (29) if_stmt -> IF test . suite ELSE suite
    (31) suite -> . simple_stmt
    (32) suite -> . LBRACK stmt_list RBRACK
    (10) simple_stmt -> . small_stmt SEMICOLON
    (11) small_stmt -> . test
    (12) small_stmt -> . flow_stmt
    (13) small_stmt -> . dl_stmt
    (14) small_stmt -> . assign_expr
    (33) test -> . comparison OR test
    (34) test -> . comparison AND test
    (35) test -> . comparison
    (22) flow_stmt -> . RETURN
    (23) flow_stmt -> . RETURN list_expr
    (24) flow_stmt -> . BREAK
    (25) flow_stmt -> . CONTINUE
    (16) dl_stmt -> . train_stmt
    (17) dl_stmt -> . pred_stmt
    (18) dl_stmt -> . save_stmt
    (49) assign_expr -> . NAME ASSIGN expr
    (50) assign_expr -> . NAME COLON basic_type ASSIGN expr
    (51) assign_expr -> . NAME COLON basic_type ASSIGN STRING COLON STRING
    (52) assign_expr -> . NAME COLON basic_type ASSIGN list_expr COLON STRING
    (36) comparison -> . expr GT expr
    (37) comparison -> . expr LT expr
    (38) comparison -> . expr GTE expr
    (39) comparison -> . expr LTE expr
    (40) comparison -> . expr EQ expr
    (41) comparison -> . expr NEQ expr
    (42) comparison -> . expr
    (19) train_stmt -> . TRAIN name list_expr
    (20) pred_stmt -> . PRED name STRING
    (21) save_stmt -> . SAVE name STRING
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MOD expr
    (58) expr -> . factor
    (59) factor -> . PLUS factor
    (60) factor -> . MINUS factor
    (61) factor -> . atom_expr
    (62) atom_expr -> .
    (63) atom_expr -> . atom
    (64) atom_expr -> . atom_expr LSQBRACK expr RSQBRACK
    (65) atom_expr -> . name LPAREN list_expr RPAREN
    (66) atom -> . LPAREN list_expr RPAREN
    (67) atom -> . LSQBRACK list_expr RSQBRACK
    (68) atom -> . name
    (69) atom -> . number
    (70) atom -> . string
    (71) atom -> . TRUE
    (72) atom -> . FALSE
    (73) atom -> . NONE
    (74) atom -> . name LSQBRACK atom RSQBRACK
    (77) name -> . NAME
    (78) number -> . INT
    (79) number -> . FLOAT
    (80) string -> . STRING

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
    LBRACK          shift and go to state 83
    RETURN          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    NAME            shift and go to state 28
    TRAIN           shift and go to state 31
    PRED            shift and go to state 32
    SAVE            shift and go to state 33
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    GT              reduce using rule 62 (atom_expr -> .)
    LT              reduce using rule 62 (atom_expr -> .)
    GTE             reduce using rule 62 (atom_expr -> .)
    LTE             reduce using rule 62 (atom_expr -> .)
    EQ              reduce using rule 62 (atom_expr -> .)
    NEQ             reduce using rule 62 (atom_expr -> .)
    TIMES           reduce using rule 62 (atom_expr -> .)
    DIVIDE          reduce using rule 62 (atom_expr -> .)
    MOD             reduce using rule 62 (atom_expr -> .)
    OR              reduce using rule 62 (atom_expr -> .)
    AND             reduce using rule 62 (atom_expr -> .)
    SEMICOLON       reduce using rule 62 (atom_expr -> .)
    LPAREN          shift and go to state 19
    LSQBRACK        shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    NONE            shift and go to state 44
    INT             shift and go to state 45
    FLOAT           shift and go to state 46
    STRING          shift and go to state 30

  ! LSQBRACK        [ reduce using rule 62 (atom_expr -> .) ]
  ! PLUS            [ reduce using rule 62 (atom_expr -> .) ]
  ! MINUS           [ reduce using rule 62 (atom_expr -> .) ]

    test                           shift and go to state 11
    suite                          shift and go to state 81
    simple_stmt                    shift and go to state 82
    small_stmt                     shift and go to state 6
    flow_stmt                      shift and go to state 12
    dl_stmt                        shift and go to state 13
    assign_expr                    shift and go to state 14
    comparison                     shift and go to state 21
    train_stmt                     shift and go to state 25
    pred_stmt                      shift and go to state 26
    save_stmt                      shift and go to state 27
    expr                           shift and go to state 29
    name                           shift and go to state 18
    factor                         shift and go to state 36
    atom_expr                      shift and go to state 37
    atom                           shift and go to state 38
    number                         shift and go to state 40
    string                         shift and go to state 41

state 50

    (77) name -> NAME .

    LPAREN          reduce using rule 77 (name -> NAME .)
    LSQBRACK        reduce using rule 77 (name -> NAME .)
    GT              reduce using rule 77 (name -> NAME .)
    LT              reduce using rule 77 (name -> NAME .)
    GTE             reduce using rule 77 (name -> NAME .)
    LTE             reduce using rule 77 (name -> NAME .)
    EQ              reduce using rule 77 (name -> NAME .)
    NEQ             reduce using rule 77 (name -> NAME .)
    PLUS            reduce using rule 77 (name -> NAME .)
    MINUS           reduce using rule 77 (name -> NAME .)
    TIMES           reduce using rule 77 (name -> NAME .)
    DIVIDE          reduce using rule 77 (name -> NAME .)
    MOD             reduce using rule 77 (name -> NAME .)
    OR              reduce using rule 77 (name -> NAME .)
    AND             reduce using rule 77 (name -> NAME .)
    LBRACK          reduce using rule 77 (name -> NAME .)
    RETURN          reduce using rule 77 (name -> NAME .)
    BREAK           reduce using rule 77 (name -> NAME .)
    CONTINUE        reduce using rule 77 (name -> NAME .)
    NAME            reduce using rule 77 (name -> NAME .)
    TRAIN           reduce using rule 77 (name -> NAME .)
    PRED            reduce using rule 77 (name -> NAME .)
    SAVE            reduce using rule 77 (name -> NAME .)
    TRUE            reduce using rule 77 (name -> NAME .)
    FALSE           reduce using rule 77 (name -> NAME .)
    NONE            reduce using rule 77 (name -> NAME .)
    INT             reduce using rule 77 (name -> NAME .)
    FLOAT           reduce using rule 77 (name -> NAME .)
    STRING          reduce using rule 77 (name -> NAME .)
    SEMICOLON       reduce using rule 77 (name -> NAME .)
    RPAREN          reduce using rule 77 (name -> NAME .)
    COMMA           reduce using rule 77 (name -> NAME .)
    RSQBRACK        reduce using rule 77 (name -> NAME .)
    COLON           reduce using rule 77 (name -> NAME .)


state 51

    (26) while_stmt -> WHILE test . suite
    (27) while_stmt -> WHILE test . suite ELSE suite
    (31) suite -> . simple_stmt
    (32) suite -> . LBRACK stmt_list RBRACK
    (10) simple_stmt -> . small_stmt SEMICOLON
    (11) small_stmt -> . test
    (12) small_stmt -> . flow_stmt
    (13) small_stmt -> . dl_stmt
    (14) small_stmt -> . assign_expr
    (33) test -> . comparison OR test
    (34) test -> . comparison AND test
    (35) test -> . comparison
    (22) flow_stmt -> . RETURN
    (23) flow_stmt -> . RETURN list_expr
    (24) flow_stmt -> . BREAK
    (25) flow_stmt -> . CONTINUE
    (16) dl_stmt -> . train_stmt
    (17) dl_stmt -> . pred_stmt
    (18) dl_stmt -> . save_stmt
    (49) assign_expr -> . NAME ASSIGN expr
    (50) assign_expr -> . NAME COLON basic_type ASSIGN expr
    (51) assign_expr -> . NAME COLON basic_type ASSIGN STRING COLON STRING
    (52) assign_expr -> . NAME COLON basic_type ASSIGN list_expr COLON STRING
    (36) comparison -> . expr GT expr
    (37) comparison -> . expr LT expr
    (38) comparison -> . expr GTE expr
    (39) comparison -> . expr LTE expr
    (40) comparison -> . expr EQ expr
    (41) comparison -> . expr NEQ expr
    (42) comparison -> . expr
    (19) train_stmt -> . TRAIN name list_expr
    (20) pred_stmt -> . PRED name STRING
    (21) save_stmt -> . SAVE name STRING
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MOD expr
    (58) expr -> . factor
    (59) factor -> . PLUS factor
    (60) factor -> . MINUS factor
    (61) factor -> . atom_expr
    (62) atom_expr -> .
    (63) atom_expr -> . atom
    (64) atom_expr -> . atom_expr LSQBRACK expr RSQBRACK
    (65) atom_expr -> . name LPAREN list_expr RPAREN
    (66) atom -> . LPAREN list_expr RPAREN
    (67) atom -> . LSQBRACK list_expr RSQBRACK
    (68) atom -> . name
    (69) atom -> . number
    (70) atom -> . string
    (71) atom -> . TRUE
    (72) atom -> . FALSE
    (73) atom -> . NONE
    (74) atom -> . name LSQBRACK atom RSQBRACK
    (77) name -> . NAME
    (78) number -> . INT
    (79) number -> . FLOAT
    (80) string -> . STRING

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
    LBRACK          shift and go to state 83
    RETURN          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    NAME            shift and go to state 28
    TRAIN           shift and go to state 31
    PRED            shift and go to state 32
    SAVE            shift and go to state 33
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    GT              reduce using rule 62 (atom_expr -> .)
    LT              reduce using rule 62 (atom_expr -> .)
    GTE             reduce using rule 62 (atom_expr -> .)
    LTE             reduce using rule 62 (atom_expr -> .)
    EQ              reduce using rule 62 (atom_expr -> .)
    NEQ             reduce using rule 62 (atom_expr -> .)
    TIMES           reduce using rule 62 (atom_expr -> .)
    DIVIDE          reduce using rule 62 (atom_expr -> .)
    MOD             reduce using rule 62 (atom_expr -> .)
    OR              reduce using rule 62 (atom_expr -> .)
    AND             reduce using rule 62 (atom_expr -> .)
    SEMICOLON       reduce using rule 62 (atom_expr -> .)
    LPAREN          shift and go to state 19
    LSQBRACK        shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    NONE            shift and go to state 44
    INT             shift and go to state 45
    FLOAT           shift and go to state 46
    STRING          shift and go to state 30

  ! LSQBRACK        [ reduce using rule 62 (atom_expr -> .) ]
  ! PLUS            [ reduce using rule 62 (atom_expr -> .) ]
  ! MINUS           [ reduce using rule 62 (atom_expr -> .) ]

    test                           shift and go to state 11
    suite                          shift and go to state 84
    simple_stmt                    shift and go to state 82
    small_stmt                     shift and go to state 6
    flow_stmt                      shift and go to state 12
    dl_stmt                        shift and go to state 13
    assign_expr                    shift and go to state 14
    comparison                     shift and go to state 21
    train_stmt                     shift and go to state 25
    pred_stmt                      shift and go to state 26
    save_stmt                      shift and go to state 27
    expr                           shift and go to state 29
    name                           shift and go to state 18
    factor                         shift and go to state 36
    atom_expr                      shift and go to state 37
    atom                           shift and go to state 38
    number                         shift and go to state 40
    string                         shift and go to state 41

state 52

    (30) funcdef_stmt -> DEF name . LPAREN list_expr RPAREN suite

    LPAREN          shift and go to state 85


state 53

    (65) atom_expr -> name LPAREN . list_expr RPAREN
    (75) list_expr -> . list_expr COMMA expr
    (76) list_expr -> . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MOD expr
    (58) expr -> . factor
    (59) factor -> . PLUS factor
    (60) factor -> . MINUS factor
    (61) factor -> . atom_expr
    (62) atom_expr -> .
    (63) atom_expr -> . atom
    (64) atom_expr -> . atom_expr LSQBRACK expr RSQBRACK
    (65) atom_expr -> . name LPAREN list_expr RPAREN
    (66) atom -> . LPAREN list_expr RPAREN
    (67) atom -> . LSQBRACK list_expr RSQBRACK
    (68) atom -> . name
    (69) atom -> . number
    (70) atom -> . string
    (71) atom -> . TRUE
    (72) atom -> . FALSE
    (73) atom -> . NONE
    (74) atom -> . name LSQBRACK atom RSQBRACK
    (77) name -> . NAME
    (78) number -> . INT
    (79) number -> . FLOAT
    (80) string -> . STRING

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           reduce using rule 62 (atom_expr -> .)
    DIVIDE          reduce using rule 62 (atom_expr -> .)
    MOD             reduce using rule 62 (atom_expr -> .)
    RPAREN          reduce using rule 62 (atom_expr -> .)
    COMMA           reduce using rule 62 (atom_expr -> .)
    LPAREN          shift and go to state 19
    LSQBRACK        shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    NONE            shift and go to state 44
    NAME            shift and go to state 50
    INT             shift and go to state 45
    FLOAT           shift and go to state 46
    STRING          shift and go to state 30

  ! LSQBRACK        [ reduce using rule 62 (atom_expr -> .) ]
  ! PLUS            [ reduce using rule 62 (atom_expr -> .) ]
  ! MINUS           [ reduce using rule 62 (atom_expr -> .) ]

    name                           shift and go to state 18
    list_expr                      shift and go to state 86
    expr                           shift and go to state 56
    factor                         shift and go to state 36
    atom_expr                      shift and go to state 37
    atom                           shift and go to state 38
    number                         shift and go to state 40
    string                         shift and go to state 41

state 54

    (74) atom -> name LSQBRACK . atom RSQBRACK
    (66) atom -> . LPAREN list_expr RPAREN
    (67) atom -> . LSQBRACK list_expr RSQBRACK
    (68) atom -> . name
    (69) atom -> . number
    (70) atom -> . string
    (71) atom -> . TRUE
    (72) atom -> . FALSE
    (73) atom -> . NONE
    (74) atom -> . name LSQBRACK atom RSQBRACK
    (77) name -> . NAME
    (78) number -> . INT
    (79) number -> . FLOAT
    (80) string -> . STRING

    LPAREN          shift and go to state 19
    LSQBRACK        shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    NONE            shift and go to state 44
    NAME            shift and go to state 50
    INT             shift and go to state 45
    FLOAT           shift and go to state 46
    STRING          shift and go to state 30

    name                           shift and go to state 87
    atom                           shift and go to state 88
    number                         shift and go to state 40
    string                         shift and go to state 41

state 55

    (66) atom -> LPAREN list_expr . RPAREN
    (75) list_expr -> list_expr . COMMA expr

    RPAREN          shift and go to state 89
    COMMA           shift and go to state 90


state 56

    (76) list_expr -> expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MOD expr

    RPAREN          reduce using rule 76 (list_expr -> expr .)
    COMMA           reduce using rule 76 (list_expr -> expr .)
    SEMICOLON       reduce using rule 76 (list_expr -> expr .)
    RSQBRACK        reduce using rule 76 (list_expr -> expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72
    MOD             shift and go to state 73


state 57

    (15) print -> PRINT LPAREN . small_stmt RPAREN SEMICOLON
    (11) small_stmt -> . test
    (12) small_stmt -> . flow_stmt
    (13) small_stmt -> . dl_stmt
    (14) small_stmt -> . assign_expr
    (33) test -> . comparison OR test
    (34) test -> . comparison AND test
    (35) test -> . comparison
    (22) flow_stmt -> . RETURN
    (23) flow_stmt -> . RETURN list_expr
    (24) flow_stmt -> . BREAK
    (25) flow_stmt -> . CONTINUE
    (16) dl_stmt -> . train_stmt
    (17) dl_stmt -> . pred_stmt
    (18) dl_stmt -> . save_stmt
    (49) assign_expr -> . NAME ASSIGN expr
    (50) assign_expr -> . NAME COLON basic_type ASSIGN expr
    (51) assign_expr -> . NAME COLON basic_type ASSIGN STRING COLON STRING
    (52) assign_expr -> . NAME COLON basic_type ASSIGN list_expr COLON STRING
    (36) comparison -> . expr GT expr
    (37) comparison -> . expr LT expr
    (38) comparison -> . expr GTE expr
    (39) comparison -> . expr LTE expr
    (40) comparison -> . expr EQ expr
    (41) comparison -> . expr NEQ expr
    (42) comparison -> . expr
    (19) train_stmt -> . TRAIN name list_expr
    (20) pred_stmt -> . PRED name STRING
    (21) save_stmt -> . SAVE name STRING
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MOD expr
    (58) expr -> . factor
    (59) factor -> . PLUS factor
    (60) factor -> . MINUS factor
    (61) factor -> . atom_expr
    (62) atom_expr -> .
    (63) atom_expr -> . atom
    (64) atom_expr -> . atom_expr LSQBRACK expr RSQBRACK
    (65) atom_expr -> . name LPAREN list_expr RPAREN
    (66) atom -> . LPAREN list_expr RPAREN
    (67) atom -> . LSQBRACK list_expr RSQBRACK
    (68) atom -> . name
    (69) atom -> . number
    (70) atom -> . string
    (71) atom -> . TRUE
    (72) atom -> . FALSE
    (73) atom -> . NONE
    (74) atom -> . name LSQBRACK atom RSQBRACK
    (77) name -> . NAME
    (78) number -> . INT
    (79) number -> . FLOAT
    (80) string -> . STRING

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
    RETURN          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    NAME            shift and go to state 28
    TRAIN           shift and go to state 31
    PRED            shift and go to state 32
    SAVE            shift and go to state 33
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    GT              reduce using rule 62 (atom_expr -> .)
    LT              reduce using rule 62 (atom_expr -> .)
    GTE             reduce using rule 62 (atom_expr -> .)
    LTE             reduce using rule 62 (atom_expr -> .)
    EQ              reduce using rule 62 (atom_expr -> .)
    NEQ             reduce using rule 62 (atom_expr -> .)
    TIMES           reduce using rule 62 (atom_expr -> .)
    DIVIDE          reduce using rule 62 (atom_expr -> .)
    MOD             reduce using rule 62 (atom_expr -> .)
    OR              reduce using rule 62 (atom_expr -> .)
    AND             reduce using rule 62 (atom_expr -> .)
    RPAREN          reduce using rule 62 (atom_expr -> .)
    LPAREN          shift and go to state 19
    LSQBRACK        shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    NONE            shift and go to state 44
    INT             shift and go to state 45
    FLOAT           shift and go to state 46
    STRING          shift and go to state 30

  ! LSQBRACK        [ reduce using rule 62 (atom_expr -> .) ]
  ! PLUS            [ reduce using rule 62 (atom_expr -> .) ]
  ! MINUS           [ reduce using rule 62 (atom_expr -> .) ]

    small_stmt                     shift and go to state 91
    test                           shift and go to state 11
    flow_stmt                      shift and go to state 12
    dl_stmt                        shift and go to state 13
    assign_expr                    shift and go to state 14
    comparison                     shift and go to state 21
    train_stmt                     shift and go to state 25
    pred_stmt                      shift and go to state 26
    save_stmt                      shift and go to state 27
    expr                           shift and go to state 29
    name                           shift and go to state 18
    factor                         shift and go to state 36
    atom_expr                      shift and go to state 37
    atom                           shift and go to state 38
    number                         shift and go to state 40
    string                         shift and go to state 41

state 58

    (33) test -> comparison OR . test
    (33) test -> . comparison OR test
    (34) test -> . comparison AND test
    (35) test -> . comparison
    (36) comparison -> . expr GT expr
    (37) comparison -> . expr LT expr
    (38) comparison -> . expr GTE expr
    (39) comparison -> . expr LTE expr
    (40) comparison -> . expr EQ expr
    (41) comparison -> . expr NEQ expr
    (42) comparison -> . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MOD expr
    (58) expr -> . factor
    (59) factor -> . PLUS factor
    (60) factor -> . MINUS factor
    (61) factor -> . atom_expr
    (62) atom_expr -> .
    (63) atom_expr -> . atom
    (64) atom_expr -> . atom_expr LSQBRACK expr RSQBRACK
    (65) atom_expr -> . name LPAREN list_expr RPAREN
    (66) atom -> . LPAREN list_expr RPAREN
    (67) atom -> . LSQBRACK list_expr RSQBRACK
    (68) atom -> . name
    (69) atom -> . number
    (70) atom -> . string
    (71) atom -> . TRUE
    (72) atom -> . FALSE
    (73) atom -> . NONE
    (74) atom -> . name LSQBRACK atom RSQBRACK
    (77) name -> . NAME
    (78) number -> . INT
    (79) number -> . FLOAT
    (80) string -> . STRING

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for NONE resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    GT              reduce using rule 62 (atom_expr -> .)
    LT              reduce using rule 62 (atom_expr -> .)
    GTE             reduce using rule 62 (atom_expr -> .)
    LTE             reduce using rule 62 (atom_expr -> .)
    EQ              reduce using rule 62 (atom_expr -> .)
    NEQ             reduce using rule 62 (atom_expr -> .)
    TIMES           reduce using rule 62 (atom_expr -> .)
    DIVIDE          reduce using rule 62 (atom_expr -> .)
    MOD             reduce using rule 62 (atom_expr -> .)
    OR              reduce using rule 62 (atom_expr -> .)
    AND             reduce using rule 62 (atom_expr -> .)
    SEMICOLON       reduce using rule 62 (atom_expr -> .)
    LBRACK          reduce using rule 62 (atom_expr -> .)
    RETURN          reduce using rule 62 (atom_expr -> .)
    BREAK           reduce using rule 62 (atom_expr -> .)
    CONTINUE        reduce using rule 62 (atom_expr -> .)
    TRAIN           reduce using rule 62 (atom_expr -> .)
    PRED            reduce using rule 62 (atom_expr -> .)
    SAVE            reduce using rule 62 (atom_expr -> .)
    RPAREN          reduce using rule 62 (atom_expr -> .)
    LPAREN          shift and go to state 19
    LSQBRACK        shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    NONE            shift and go to state 44
    NAME            shift and go to state 50
    INT             shift and go to state 45
    FLOAT           shift and go to state 46
    STRING          shift and go to state 30

  ! LSQBRACK        [ reduce using rule 62 (atom_expr -> .) ]
  ! PLUS            [ reduce using rule 62 (atom_expr -> .) ]
  ! MINUS           [ reduce using rule 62 (atom_expr -> .) ]
  ! NAME            [ reduce using rule 62 (atom_expr -> .) ]
  ! LPAREN          [ reduce using rule 62 (atom_expr -> .) ]
  ! TRUE            [ reduce using rule 62 (atom_expr -> .) ]
  ! FALSE           [ reduce using rule 62 (atom_expr -> .) ]
  ! NONE            [ reduce using rule 62 (atom_expr -> .) ]
  ! INT             [ reduce using rule 62 (atom_expr -> .) ]
  ! FLOAT           [ reduce using rule 62 (atom_expr -> .) ]
  ! STRING          [ reduce using rule 62 (atom_expr -> .) ]

    comparison                     shift and go to state 21
    test                           shift and go to state 92
    expr                           shift and go to state 29
    factor                         shift and go to state 36
    atom_expr                      shift and go to state 37
    atom                           shift and go to state 38
    name                           shift and go to state 18
    number                         shift and go to state 40
    string                         shift and go to state 41

state 59

    (34) test -> comparison AND . test
    (33) test -> . comparison OR test
    (34) test -> . comparison AND test
    (35) test -> . comparison
    (36) comparison -> . expr GT expr
    (37) comparison -> . expr LT expr
    (38) comparison -> . expr GTE expr
    (39) comparison -> . expr LTE expr
    (40) comparison -> . expr EQ expr
    (41) comparison -> . expr NEQ expr
    (42) comparison -> . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MOD expr
    (58) expr -> . factor
    (59) factor -> . PLUS factor
    (60) factor -> . MINUS factor
    (61) factor -> . atom_expr
    (62) atom_expr -> .
    (63) atom_expr -> . atom
    (64) atom_expr -> . atom_expr LSQBRACK expr RSQBRACK
    (65) atom_expr -> . name LPAREN list_expr RPAREN
    (66) atom -> . LPAREN list_expr RPAREN
    (67) atom -> . LSQBRACK list_expr RSQBRACK
    (68) atom -> . name
    (69) atom -> . number
    (70) atom -> . string
    (71) atom -> . TRUE
    (72) atom -> . FALSE
    (73) atom -> . NONE
    (74) atom -> . name LSQBRACK atom RSQBRACK
    (77) name -> . NAME
    (78) number -> . INT
    (79) number -> . FLOAT
    (80) string -> . STRING

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for NONE resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    GT              reduce using rule 62 (atom_expr -> .)
    LT              reduce using rule 62 (atom_expr -> .)
    GTE             reduce using rule 62 (atom_expr -> .)
    LTE             reduce using rule 62 (atom_expr -> .)
    EQ              reduce using rule 62 (atom_expr -> .)
    NEQ             reduce using rule 62 (atom_expr -> .)
    TIMES           reduce using rule 62 (atom_expr -> .)
    DIVIDE          reduce using rule 62 (atom_expr -> .)
    MOD             reduce using rule 62 (atom_expr -> .)
    OR              reduce using rule 62 (atom_expr -> .)
    AND             reduce using rule 62 (atom_expr -> .)
    SEMICOLON       reduce using rule 62 (atom_expr -> .)
    LBRACK          reduce using rule 62 (atom_expr -> .)
    RETURN          reduce using rule 62 (atom_expr -> .)
    BREAK           reduce using rule 62 (atom_expr -> .)
    CONTINUE        reduce using rule 62 (atom_expr -> .)
    TRAIN           reduce using rule 62 (atom_expr -> .)
    PRED            reduce using rule 62 (atom_expr -> .)
    SAVE            reduce using rule 62 (atom_expr -> .)
    RPAREN          reduce using rule 62 (atom_expr -> .)
    LPAREN          shift and go to state 19
    LSQBRACK        shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    NONE            shift and go to state 44
    NAME            shift and go to state 50
    INT             shift and go to state 45
    FLOAT           shift and go to state 46
    STRING          shift and go to state 30

  ! LSQBRACK        [ reduce using rule 62 (atom_expr -> .) ]
  ! PLUS            [ reduce using rule 62 (atom_expr -> .) ]
  ! MINUS           [ reduce using rule 62 (atom_expr -> .) ]
  ! NAME            [ reduce using rule 62 (atom_expr -> .) ]
  ! LPAREN          [ reduce using rule 62 (atom_expr -> .) ]
  ! TRUE            [ reduce using rule 62 (atom_expr -> .) ]
  ! FALSE           [ reduce using rule 62 (atom_expr -> .) ]
  ! NONE            [ reduce using rule 62 (atom_expr -> .) ]
  ! INT             [ reduce using rule 62 (atom_expr -> .) ]
  ! FLOAT           [ reduce using rule 62 (atom_expr -> .) ]
  ! STRING          [ reduce using rule 62 (atom_expr -> .) ]

    comparison                     shift and go to state 21
    test                           shift and go to state 93
    expr                           shift and go to state 29
    factor                         shift and go to state 36
    atom_expr                      shift and go to state 37
    atom                           shift and go to state 38
    name                           shift and go to state 18
    number                         shift and go to state 40
    string                         shift and go to state 41

state 60

    (23) flow_stmt -> RETURN list_expr .
    (75) list_expr -> list_expr . COMMA expr

    SEMICOLON       reduce using rule 23 (flow_stmt -> RETURN list_expr .)
    RPAREN          reduce using rule 23 (flow_stmt -> RETURN list_expr .)
    COMMA           shift and go to state 90


state 61

    (49) assign_expr -> NAME ASSIGN . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MOD expr
    (58) expr -> . factor
    (59) factor -> . PLUS factor
    (60) factor -> . MINUS factor
    (61) factor -> . atom_expr
    (62) atom_expr -> .
    (63) atom_expr -> . atom
    (64) atom_expr -> . atom_expr LSQBRACK expr RSQBRACK
    (65) atom_expr -> . name LPAREN list_expr RPAREN
    (66) atom -> . LPAREN list_expr RPAREN
    (67) atom -> . LSQBRACK list_expr RSQBRACK
    (68) atom -> . name
    (69) atom -> . number
    (70) atom -> . string
    (71) atom -> . TRUE
    (72) atom -> . FALSE
    (73) atom -> . NONE
    (74) atom -> . name LSQBRACK atom RSQBRACK
    (77) name -> . NAME
    (78) number -> . INT
    (79) number -> . FLOAT
    (80) string -> . STRING

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           reduce using rule 62 (atom_expr -> .)
    DIVIDE          reduce using rule 62 (atom_expr -> .)
    MOD             reduce using rule 62 (atom_expr -> .)
    SEMICOLON       reduce using rule 62 (atom_expr -> .)
    RPAREN          reduce using rule 62 (atom_expr -> .)
    LPAREN          shift and go to state 19
    LSQBRACK        shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    NONE            shift and go to state 44
    NAME            shift and go to state 50
    INT             shift and go to state 45
    FLOAT           shift and go to state 46
    STRING          shift and go to state 30

  ! LSQBRACK        [ reduce using rule 62 (atom_expr -> .) ]
  ! PLUS            [ reduce using rule 62 (atom_expr -> .) ]
  ! MINUS           [ reduce using rule 62 (atom_expr -> .) ]

    expr                           shift and go to state 94
    factor                         shift and go to state 36
    atom_expr                      shift and go to state 37
    atom                           shift and go to state 38
    name                           shift and go to state 18
    number                         shift and go to state 40
    string                         shift and go to state 41

state 62

    (50) assign_expr -> NAME COLON . basic_type ASSIGN expr
    (51) assign_expr -> NAME COLON . basic_type ASSIGN STRING COLON STRING
    (52) assign_expr -> NAME COLON . basic_type ASSIGN list_expr COLON STRING
    (43) basic_type -> . INT_TYPE
    (44) basic_type -> . FLOAT_TYPE
    (45) basic_type -> . LIST_TYPE
    (46) basic_type -> . TUPLE_TYPE
    (47) basic_type -> . MLP
    (48) basic_type -> . TRANSFORMER

    INT_TYPE        shift and go to state 96
    FLOAT_TYPE      shift and go to state 97
    LIST_TYPE       shift and go to state 98
    TUPLE_TYPE      shift and go to state 99
    MLP             shift and go to state 100
    TRANSFORMER     shift and go to state 101

    basic_type                     shift and go to state 95

state 63

    (36) comparison -> expr GT . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MOD expr
    (58) expr -> . factor
    (59) factor -> . PLUS factor
    (60) factor -> . MINUS factor
    (61) factor -> . atom_expr
    (62) atom_expr -> .
    (63) atom_expr -> . atom
    (64) atom_expr -> . atom_expr LSQBRACK expr RSQBRACK
    (65) atom_expr -> . name LPAREN list_expr RPAREN
    (66) atom -> . LPAREN list_expr RPAREN
    (67) atom -> . LSQBRACK list_expr RSQBRACK
    (68) atom -> . name
    (69) atom -> . number
    (70) atom -> . string
    (71) atom -> . TRUE
    (72) atom -> . FALSE
    (73) atom -> . NONE
    (74) atom -> . name LSQBRACK atom RSQBRACK
    (77) name -> . NAME
    (78) number -> . INT
    (79) number -> . FLOAT
    (80) string -> . STRING

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for NONE resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           reduce using rule 62 (atom_expr -> .)
    DIVIDE          reduce using rule 62 (atom_expr -> .)
    MOD             reduce using rule 62 (atom_expr -> .)
    OR              reduce using rule 62 (atom_expr -> .)
    AND             reduce using rule 62 (atom_expr -> .)
    SEMICOLON       reduce using rule 62 (atom_expr -> .)
    LBRACK          reduce using rule 62 (atom_expr -> .)
    RETURN          reduce using rule 62 (atom_expr -> .)
    BREAK           reduce using rule 62 (atom_expr -> .)
    CONTINUE        reduce using rule 62 (atom_expr -> .)
    TRAIN           reduce using rule 62 (atom_expr -> .)
    PRED            reduce using rule 62 (atom_expr -> .)
    SAVE            reduce using rule 62 (atom_expr -> .)
    GT              reduce using rule 62 (atom_expr -> .)
    LT              reduce using rule 62 (atom_expr -> .)
    GTE             reduce using rule 62 (atom_expr -> .)
    LTE             reduce using rule 62 (atom_expr -> .)
    EQ              reduce using rule 62 (atom_expr -> .)
    NEQ             reduce using rule 62 (atom_expr -> .)
    RPAREN          reduce using rule 62 (atom_expr -> .)
    LPAREN          shift and go to state 19
    LSQBRACK        shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    NONE            shift and go to state 44
    NAME            shift and go to state 50
    INT             shift and go to state 45
    FLOAT           shift and go to state 46
    STRING          shift and go to state 30

  ! LSQBRACK        [ reduce using rule 62 (atom_expr -> .) ]
  ! PLUS            [ reduce using rule 62 (atom_expr -> .) ]
  ! MINUS           [ reduce using rule 62 (atom_expr -> .) ]
  ! NAME            [ reduce using rule 62 (atom_expr -> .) ]
  ! LPAREN          [ reduce using rule 62 (atom_expr -> .) ]
  ! TRUE            [ reduce using rule 62 (atom_expr -> .) ]
  ! FALSE           [ reduce using rule 62 (atom_expr -> .) ]
  ! NONE            [ reduce using rule 62 (atom_expr -> .) ]
  ! INT             [ reduce using rule 62 (atom_expr -> .) ]
  ! FLOAT           [ reduce using rule 62 (atom_expr -> .) ]
  ! STRING          [ reduce using rule 62 (atom_expr -> .) ]

    expr                           shift and go to state 102
    factor                         shift and go to state 36
    atom_expr                      shift and go to state 37
    atom                           shift and go to state 38
    name                           shift and go to state 18
    number                         shift and go to state 40
    string                         shift and go to state 41

state 64

    (37) comparison -> expr LT . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MOD expr
    (58) expr -> . factor
    (59) factor -> . PLUS factor
    (60) factor -> . MINUS factor
    (61) factor -> . atom_expr
    (62) atom_expr -> .
    (63) atom_expr -> . atom
    (64) atom_expr -> . atom_expr LSQBRACK expr RSQBRACK
    (65) atom_expr -> . name LPAREN list_expr RPAREN
    (66) atom -> . LPAREN list_expr RPAREN
    (67) atom -> . LSQBRACK list_expr RSQBRACK
    (68) atom -> . name
    (69) atom -> . number
    (70) atom -> . string
    (71) atom -> . TRUE
    (72) atom -> . FALSE
    (73) atom -> . NONE
    (74) atom -> . name LSQBRACK atom RSQBRACK
    (77) name -> . NAME
    (78) number -> . INT
    (79) number -> . FLOAT
    (80) string -> . STRING

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for NONE resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           reduce using rule 62 (atom_expr -> .)
    DIVIDE          reduce using rule 62 (atom_expr -> .)
    MOD             reduce using rule 62 (atom_expr -> .)
    OR              reduce using rule 62 (atom_expr -> .)
    AND             reduce using rule 62 (atom_expr -> .)
    SEMICOLON       reduce using rule 62 (atom_expr -> .)
    LBRACK          reduce using rule 62 (atom_expr -> .)
    RETURN          reduce using rule 62 (atom_expr -> .)
    BREAK           reduce using rule 62 (atom_expr -> .)
    CONTINUE        reduce using rule 62 (atom_expr -> .)
    TRAIN           reduce using rule 62 (atom_expr -> .)
    PRED            reduce using rule 62 (atom_expr -> .)
    SAVE            reduce using rule 62 (atom_expr -> .)
    GT              reduce using rule 62 (atom_expr -> .)
    LT              reduce using rule 62 (atom_expr -> .)
    GTE             reduce using rule 62 (atom_expr -> .)
    LTE             reduce using rule 62 (atom_expr -> .)
    EQ              reduce using rule 62 (atom_expr -> .)
    NEQ             reduce using rule 62 (atom_expr -> .)
    RPAREN          reduce using rule 62 (atom_expr -> .)
    LPAREN          shift and go to state 19
    LSQBRACK        shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    NONE            shift and go to state 44
    NAME            shift and go to state 50
    INT             shift and go to state 45
    FLOAT           shift and go to state 46
    STRING          shift and go to state 30

  ! LSQBRACK        [ reduce using rule 62 (atom_expr -> .) ]
  ! PLUS            [ reduce using rule 62 (atom_expr -> .) ]
  ! MINUS           [ reduce using rule 62 (atom_expr -> .) ]
  ! NAME            [ reduce using rule 62 (atom_expr -> .) ]
  ! LPAREN          [ reduce using rule 62 (atom_expr -> .) ]
  ! TRUE            [ reduce using rule 62 (atom_expr -> .) ]
  ! FALSE           [ reduce using rule 62 (atom_expr -> .) ]
  ! NONE            [ reduce using rule 62 (atom_expr -> .) ]
  ! INT             [ reduce using rule 62 (atom_expr -> .) ]
  ! FLOAT           [ reduce using rule 62 (atom_expr -> .) ]
  ! STRING          [ reduce using rule 62 (atom_expr -> .) ]

    expr                           shift and go to state 103
    factor                         shift and go to state 36
    atom_expr                      shift and go to state 37
    atom                           shift and go to state 38
    name                           shift and go to state 18
    number                         shift and go to state 40
    string                         shift and go to state 41

state 65

    (38) comparison -> expr GTE . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MOD expr
    (58) expr -> . factor
    (59) factor -> . PLUS factor
    (60) factor -> . MINUS factor
    (61) factor -> . atom_expr
    (62) atom_expr -> .
    (63) atom_expr -> . atom
    (64) atom_expr -> . atom_expr LSQBRACK expr RSQBRACK
    (65) atom_expr -> . name LPAREN list_expr RPAREN
    (66) atom -> . LPAREN list_expr RPAREN
    (67) atom -> . LSQBRACK list_expr RSQBRACK
    (68) atom -> . name
    (69) atom -> . number
    (70) atom -> . string
    (71) atom -> . TRUE
    (72) atom -> . FALSE
    (73) atom -> . NONE
    (74) atom -> . name LSQBRACK atom RSQBRACK
    (77) name -> . NAME
    (78) number -> . INT
    (79) number -> . FLOAT
    (80) string -> . STRING

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for NONE resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           reduce using rule 62 (atom_expr -> .)
    DIVIDE          reduce using rule 62 (atom_expr -> .)
    MOD             reduce using rule 62 (atom_expr -> .)
    OR              reduce using rule 62 (atom_expr -> .)
    AND             reduce using rule 62 (atom_expr -> .)
    SEMICOLON       reduce using rule 62 (atom_expr -> .)
    LBRACK          reduce using rule 62 (atom_expr -> .)
    RETURN          reduce using rule 62 (atom_expr -> .)
    BREAK           reduce using rule 62 (atom_expr -> .)
    CONTINUE        reduce using rule 62 (atom_expr -> .)
    TRAIN           reduce using rule 62 (atom_expr -> .)
    PRED            reduce using rule 62 (atom_expr -> .)
    SAVE            reduce using rule 62 (atom_expr -> .)
    GT              reduce using rule 62 (atom_expr -> .)
    LT              reduce using rule 62 (atom_expr -> .)
    GTE             reduce using rule 62 (atom_expr -> .)
    LTE             reduce using rule 62 (atom_expr -> .)
    EQ              reduce using rule 62 (atom_expr -> .)
    NEQ             reduce using rule 62 (atom_expr -> .)
    RPAREN          reduce using rule 62 (atom_expr -> .)
    LPAREN          shift and go to state 19
    LSQBRACK        shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    NONE            shift and go to state 44
    NAME            shift and go to state 50
    INT             shift and go to state 45
    FLOAT           shift and go to state 46
    STRING          shift and go to state 30

  ! LSQBRACK        [ reduce using rule 62 (atom_expr -> .) ]
  ! PLUS            [ reduce using rule 62 (atom_expr -> .) ]
  ! MINUS           [ reduce using rule 62 (atom_expr -> .) ]
  ! NAME            [ reduce using rule 62 (atom_expr -> .) ]
  ! LPAREN          [ reduce using rule 62 (atom_expr -> .) ]
  ! TRUE            [ reduce using rule 62 (atom_expr -> .) ]
  ! FALSE           [ reduce using rule 62 (atom_expr -> .) ]
  ! NONE            [ reduce using rule 62 (atom_expr -> .) ]
  ! INT             [ reduce using rule 62 (atom_expr -> .) ]
  ! FLOAT           [ reduce using rule 62 (atom_expr -> .) ]
  ! STRING          [ reduce using rule 62 (atom_expr -> .) ]

    expr                           shift and go to state 104
    factor                         shift and go to state 36
    atom_expr                      shift and go to state 37
    atom                           shift and go to state 38
    name                           shift and go to state 18
    number                         shift and go to state 40
    string                         shift and go to state 41

state 66

    (39) comparison -> expr LTE . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MOD expr
    (58) expr -> . factor
    (59) factor -> . PLUS factor
    (60) factor -> . MINUS factor
    (61) factor -> . atom_expr
    (62) atom_expr -> .
    (63) atom_expr -> . atom
    (64) atom_expr -> . atom_expr LSQBRACK expr RSQBRACK
    (65) atom_expr -> . name LPAREN list_expr RPAREN
    (66) atom -> . LPAREN list_expr RPAREN
    (67) atom -> . LSQBRACK list_expr RSQBRACK
    (68) atom -> . name
    (69) atom -> . number
    (70) atom -> . string
    (71) atom -> . TRUE
    (72) atom -> . FALSE
    (73) atom -> . NONE
    (74) atom -> . name LSQBRACK atom RSQBRACK
    (77) name -> . NAME
    (78) number -> . INT
    (79) number -> . FLOAT
    (80) string -> . STRING

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for NONE resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           reduce using rule 62 (atom_expr -> .)
    DIVIDE          reduce using rule 62 (atom_expr -> .)
    MOD             reduce using rule 62 (atom_expr -> .)
    OR              reduce using rule 62 (atom_expr -> .)
    AND             reduce using rule 62 (atom_expr -> .)
    SEMICOLON       reduce using rule 62 (atom_expr -> .)
    LBRACK          reduce using rule 62 (atom_expr -> .)
    RETURN          reduce using rule 62 (atom_expr -> .)
    BREAK           reduce using rule 62 (atom_expr -> .)
    CONTINUE        reduce using rule 62 (atom_expr -> .)
    TRAIN           reduce using rule 62 (atom_expr -> .)
    PRED            reduce using rule 62 (atom_expr -> .)
    SAVE            reduce using rule 62 (atom_expr -> .)
    GT              reduce using rule 62 (atom_expr -> .)
    LT              reduce using rule 62 (atom_expr -> .)
    GTE             reduce using rule 62 (atom_expr -> .)
    LTE             reduce using rule 62 (atom_expr -> .)
    EQ              reduce using rule 62 (atom_expr -> .)
    NEQ             reduce using rule 62 (atom_expr -> .)
    RPAREN          reduce using rule 62 (atom_expr -> .)
    LPAREN          shift and go to state 19
    LSQBRACK        shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    NONE            shift and go to state 44
    NAME            shift and go to state 50
    INT             shift and go to state 45
    FLOAT           shift and go to state 46
    STRING          shift and go to state 30

  ! LSQBRACK        [ reduce using rule 62 (atom_expr -> .) ]
  ! PLUS            [ reduce using rule 62 (atom_expr -> .) ]
  ! MINUS           [ reduce using rule 62 (atom_expr -> .) ]
  ! NAME            [ reduce using rule 62 (atom_expr -> .) ]
  ! LPAREN          [ reduce using rule 62 (atom_expr -> .) ]
  ! TRUE            [ reduce using rule 62 (atom_expr -> .) ]
  ! FALSE           [ reduce using rule 62 (atom_expr -> .) ]
  ! NONE            [ reduce using rule 62 (atom_expr -> .) ]
  ! INT             [ reduce using rule 62 (atom_expr -> .) ]
  ! FLOAT           [ reduce using rule 62 (atom_expr -> .) ]
  ! STRING          [ reduce using rule 62 (atom_expr -> .) ]

    expr                           shift and go to state 105
    factor                         shift and go to state 36
    atom_expr                      shift and go to state 37
    atom                           shift and go to state 38
    name                           shift and go to state 18
    number                         shift and go to state 40
    string                         shift and go to state 41

state 67

    (40) comparison -> expr EQ . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MOD expr
    (58) expr -> . factor
    (59) factor -> . PLUS factor
    (60) factor -> . MINUS factor
    (61) factor -> . atom_expr
    (62) atom_expr -> .
    (63) atom_expr -> . atom
    (64) atom_expr -> . atom_expr LSQBRACK expr RSQBRACK
    (65) atom_expr -> . name LPAREN list_expr RPAREN
    (66) atom -> . LPAREN list_expr RPAREN
    (67) atom -> . LSQBRACK list_expr RSQBRACK
    (68) atom -> . name
    (69) atom -> . number
    (70) atom -> . string
    (71) atom -> . TRUE
    (72) atom -> . FALSE
    (73) atom -> . NONE
    (74) atom -> . name LSQBRACK atom RSQBRACK
    (77) name -> . NAME
    (78) number -> . INT
    (79) number -> . FLOAT
    (80) string -> . STRING

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for NONE resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           reduce using rule 62 (atom_expr -> .)
    DIVIDE          reduce using rule 62 (atom_expr -> .)
    MOD             reduce using rule 62 (atom_expr -> .)
    OR              reduce using rule 62 (atom_expr -> .)
    AND             reduce using rule 62 (atom_expr -> .)
    SEMICOLON       reduce using rule 62 (atom_expr -> .)
    LBRACK          reduce using rule 62 (atom_expr -> .)
    RETURN          reduce using rule 62 (atom_expr -> .)
    BREAK           reduce using rule 62 (atom_expr -> .)
    CONTINUE        reduce using rule 62 (atom_expr -> .)
    TRAIN           reduce using rule 62 (atom_expr -> .)
    PRED            reduce using rule 62 (atom_expr -> .)
    SAVE            reduce using rule 62 (atom_expr -> .)
    GT              reduce using rule 62 (atom_expr -> .)
    LT              reduce using rule 62 (atom_expr -> .)
    GTE             reduce using rule 62 (atom_expr -> .)
    LTE             reduce using rule 62 (atom_expr -> .)
    EQ              reduce using rule 62 (atom_expr -> .)
    NEQ             reduce using rule 62 (atom_expr -> .)
    RPAREN          reduce using rule 62 (atom_expr -> .)
    LPAREN          shift and go to state 19
    LSQBRACK        shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    NONE            shift and go to state 44
    NAME            shift and go to state 50
    INT             shift and go to state 45
    FLOAT           shift and go to state 46
    STRING          shift and go to state 30

  ! LSQBRACK        [ reduce using rule 62 (atom_expr -> .) ]
  ! PLUS            [ reduce using rule 62 (atom_expr -> .) ]
  ! MINUS           [ reduce using rule 62 (atom_expr -> .) ]
  ! NAME            [ reduce using rule 62 (atom_expr -> .) ]
  ! LPAREN          [ reduce using rule 62 (atom_expr -> .) ]
  ! TRUE            [ reduce using rule 62 (atom_expr -> .) ]
  ! FALSE           [ reduce using rule 62 (atom_expr -> .) ]
  ! NONE            [ reduce using rule 62 (atom_expr -> .) ]
  ! INT             [ reduce using rule 62 (atom_expr -> .) ]
  ! FLOAT           [ reduce using rule 62 (atom_expr -> .) ]
  ! STRING          [ reduce using rule 62 (atom_expr -> .) ]

    expr                           shift and go to state 106
    factor                         shift and go to state 36
    atom_expr                      shift and go to state 37
    atom                           shift and go to state 38
    name                           shift and go to state 18
    number                         shift and go to state 40
    string                         shift and go to state 41

state 68

    (41) comparison -> expr NEQ . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MOD expr
    (58) expr -> . factor
    (59) factor -> . PLUS factor
    (60) factor -> . MINUS factor
    (61) factor -> . atom_expr
    (62) atom_expr -> .
    (63) atom_expr -> . atom
    (64) atom_expr -> . atom_expr LSQBRACK expr RSQBRACK
    (65) atom_expr -> . name LPAREN list_expr RPAREN
    (66) atom -> . LPAREN list_expr RPAREN
    (67) atom -> . LSQBRACK list_expr RSQBRACK
    (68) atom -> . name
    (69) atom -> . number
    (70) atom -> . string
    (71) atom -> . TRUE
    (72) atom -> . FALSE
    (73) atom -> . NONE
    (74) atom -> . name LSQBRACK atom RSQBRACK
    (77) name -> . NAME
    (78) number -> . INT
    (79) number -> . FLOAT
    (80) string -> . STRING

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for NONE resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           reduce using rule 62 (atom_expr -> .)
    DIVIDE          reduce using rule 62 (atom_expr -> .)
    MOD             reduce using rule 62 (atom_expr -> .)
    OR              reduce using rule 62 (atom_expr -> .)
    AND             reduce using rule 62 (atom_expr -> .)
    SEMICOLON       reduce using rule 62 (atom_expr -> .)
    LBRACK          reduce using rule 62 (atom_expr -> .)
    RETURN          reduce using rule 62 (atom_expr -> .)
    BREAK           reduce using rule 62 (atom_expr -> .)
    CONTINUE        reduce using rule 62 (atom_expr -> .)
    TRAIN           reduce using rule 62 (atom_expr -> .)
    PRED            reduce using rule 62 (atom_expr -> .)
    SAVE            reduce using rule 62 (atom_expr -> .)
    GT              reduce using rule 62 (atom_expr -> .)
    LT              reduce using rule 62 (atom_expr -> .)
    GTE             reduce using rule 62 (atom_expr -> .)
    LTE             reduce using rule 62 (atom_expr -> .)
    EQ              reduce using rule 62 (atom_expr -> .)
    NEQ             reduce using rule 62 (atom_expr -> .)
    RPAREN          reduce using rule 62 (atom_expr -> .)
    LPAREN          shift and go to state 19
    LSQBRACK        shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    NONE            shift and go to state 44
    NAME            shift and go to state 50
    INT             shift and go to state 45
    FLOAT           shift and go to state 46
    STRING          shift and go to state 30

  ! LSQBRACK        [ reduce using rule 62 (atom_expr -> .) ]
  ! PLUS            [ reduce using rule 62 (atom_expr -> .) ]
  ! MINUS           [ reduce using rule 62 (atom_expr -> .) ]
  ! NAME            [ reduce using rule 62 (atom_expr -> .) ]
  ! LPAREN          [ reduce using rule 62 (atom_expr -> .) ]
  ! TRUE            [ reduce using rule 62 (atom_expr -> .) ]
  ! FALSE           [ reduce using rule 62 (atom_expr -> .) ]
  ! NONE            [ reduce using rule 62 (atom_expr -> .) ]
  ! INT             [ reduce using rule 62 (atom_expr -> .) ]
  ! FLOAT           [ reduce using rule 62 (atom_expr -> .) ]
  ! STRING          [ reduce using rule 62 (atom_expr -> .) ]

    expr                           shift and go to state 107
    factor                         shift and go to state 36
    atom_expr                      shift and go to state 37
    atom                           shift and go to state 38
    name                           shift and go to state 18
    number                         shift and go to state 40
    string                         shift and go to state 41

state 69

    (53) expr -> expr PLUS . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MOD expr
    (58) expr -> . factor
    (59) factor -> . PLUS factor
    (60) factor -> . MINUS factor
    (61) factor -> . atom_expr
    (62) atom_expr -> .
    (63) atom_expr -> . atom
    (64) atom_expr -> . atom_expr LSQBRACK expr RSQBRACK
    (65) atom_expr -> . name LPAREN list_expr RPAREN
    (66) atom -> . LPAREN list_expr RPAREN
    (67) atom -> . LSQBRACK list_expr RSQBRACK
    (68) atom -> . name
    (69) atom -> . number
    (70) atom -> . string
    (71) atom -> . TRUE
    (72) atom -> . FALSE
    (73) atom -> . NONE
    (74) atom -> . name LSQBRACK atom RSQBRACK
    (77) name -> . NAME
    (78) number -> . INT
    (79) number -> . FLOAT
    (80) string -> . STRING

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for NONE resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           reduce using rule 62 (atom_expr -> .)
    DIVIDE          reduce using rule 62 (atom_expr -> .)
    MOD             reduce using rule 62 (atom_expr -> .)
    GT              reduce using rule 62 (atom_expr -> .)
    LT              reduce using rule 62 (atom_expr -> .)
    GTE             reduce using rule 62 (atom_expr -> .)
    LTE             reduce using rule 62 (atom_expr -> .)
    EQ              reduce using rule 62 (atom_expr -> .)
    NEQ             reduce using rule 62 (atom_expr -> .)
    OR              reduce using rule 62 (atom_expr -> .)
    AND             reduce using rule 62 (atom_expr -> .)
    SEMICOLON       reduce using rule 62 (atom_expr -> .)
    LBRACK          reduce using rule 62 (atom_expr -> .)
    RETURN          reduce using rule 62 (atom_expr -> .)
    BREAK           reduce using rule 62 (atom_expr -> .)
    CONTINUE        reduce using rule 62 (atom_expr -> .)
    TRAIN           reduce using rule 62 (atom_expr -> .)
    PRED            reduce using rule 62 (atom_expr -> .)
    SAVE            reduce using rule 62 (atom_expr -> .)
    RPAREN          reduce using rule 62 (atom_expr -> .)
    COMMA           reduce using rule 62 (atom_expr -> .)
    RSQBRACK        reduce using rule 62 (atom_expr -> .)
    COLON           reduce using rule 62 (atom_expr -> .)
    LPAREN          shift and go to state 19
    LSQBRACK        shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    NONE            shift and go to state 44
    NAME            shift and go to state 50
    INT             shift and go to state 45
    FLOAT           shift and go to state 46
    STRING          shift and go to state 30

  ! LSQBRACK        [ reduce using rule 62 (atom_expr -> .) ]
  ! PLUS            [ reduce using rule 62 (atom_expr -> .) ]
  ! MINUS           [ reduce using rule 62 (atom_expr -> .) ]
  ! NAME            [ reduce using rule 62 (atom_expr -> .) ]
  ! LPAREN          [ reduce using rule 62 (atom_expr -> .) ]
  ! TRUE            [ reduce using rule 62 (atom_expr -> .) ]
  ! FALSE           [ reduce using rule 62 (atom_expr -> .) ]
  ! NONE            [ reduce using rule 62 (atom_expr -> .) ]
  ! INT             [ reduce using rule 62 (atom_expr -> .) ]
  ! FLOAT           [ reduce using rule 62 (atom_expr -> .) ]
  ! STRING          [ reduce using rule 62 (atom_expr -> .) ]

    expr                           shift and go to state 108
    factor                         shift and go to state 36
    atom_expr                      shift and go to state 37
    atom                           shift and go to state 38
    name                           shift and go to state 18
    number                         shift and go to state 40
    string                         shift and go to state 41

state 70

    (54) expr -> expr MINUS . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MOD expr
    (58) expr -> . factor
    (59) factor -> . PLUS factor
    (60) factor -> . MINUS factor
    (61) factor -> . atom_expr
    (62) atom_expr -> .
    (63) atom_expr -> . atom
    (64) atom_expr -> . atom_expr LSQBRACK expr RSQBRACK
    (65) atom_expr -> . name LPAREN list_expr RPAREN
    (66) atom -> . LPAREN list_expr RPAREN
    (67) atom -> . LSQBRACK list_expr RSQBRACK
    (68) atom -> . name
    (69) atom -> . number
    (70) atom -> . string
    (71) atom -> . TRUE
    (72) atom -> . FALSE
    (73) atom -> . NONE
    (74) atom -> . name LSQBRACK atom RSQBRACK
    (77) name -> . NAME
    (78) number -> . INT
    (79) number -> . FLOAT
    (80) string -> . STRING

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for NONE resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           reduce using rule 62 (atom_expr -> .)
    DIVIDE          reduce using rule 62 (atom_expr -> .)
    MOD             reduce using rule 62 (atom_expr -> .)
    GT              reduce using rule 62 (atom_expr -> .)
    LT              reduce using rule 62 (atom_expr -> .)
    GTE             reduce using rule 62 (atom_expr -> .)
    LTE             reduce using rule 62 (atom_expr -> .)
    EQ              reduce using rule 62 (atom_expr -> .)
    NEQ             reduce using rule 62 (atom_expr -> .)
    OR              reduce using rule 62 (atom_expr -> .)
    AND             reduce using rule 62 (atom_expr -> .)
    SEMICOLON       reduce using rule 62 (atom_expr -> .)
    LBRACK          reduce using rule 62 (atom_expr -> .)
    RETURN          reduce using rule 62 (atom_expr -> .)
    BREAK           reduce using rule 62 (atom_expr -> .)
    CONTINUE        reduce using rule 62 (atom_expr -> .)
    TRAIN           reduce using rule 62 (atom_expr -> .)
    PRED            reduce using rule 62 (atom_expr -> .)
    SAVE            reduce using rule 62 (atom_expr -> .)
    RPAREN          reduce using rule 62 (atom_expr -> .)
    COMMA           reduce using rule 62 (atom_expr -> .)
    RSQBRACK        reduce using rule 62 (atom_expr -> .)
    COLON           reduce using rule 62 (atom_expr -> .)
    LPAREN          shift and go to state 19
    LSQBRACK        shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    NONE            shift and go to state 44
    NAME            shift and go to state 50
    INT             shift and go to state 45
    FLOAT           shift and go to state 46
    STRING          shift and go to state 30

  ! LSQBRACK        [ reduce using rule 62 (atom_expr -> .) ]
  ! PLUS            [ reduce using rule 62 (atom_expr -> .) ]
  ! MINUS           [ reduce using rule 62 (atom_expr -> .) ]
  ! NAME            [ reduce using rule 62 (atom_expr -> .) ]
  ! LPAREN          [ reduce using rule 62 (atom_expr -> .) ]
  ! TRUE            [ reduce using rule 62 (atom_expr -> .) ]
  ! FALSE           [ reduce using rule 62 (atom_expr -> .) ]
  ! NONE            [ reduce using rule 62 (atom_expr -> .) ]
  ! INT             [ reduce using rule 62 (atom_expr -> .) ]
  ! FLOAT           [ reduce using rule 62 (atom_expr -> .) ]
  ! STRING          [ reduce using rule 62 (atom_expr -> .) ]

    expr                           shift and go to state 109
    factor                         shift and go to state 36
    atom_expr                      shift and go to state 37
    atom                           shift and go to state 38
    name                           shift and go to state 18
    number                         shift and go to state 40
    string                         shift and go to state 41

state 71

    (55) expr -> expr TIMES . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MOD expr
    (58) expr -> . factor
    (59) factor -> . PLUS factor
    (60) factor -> . MINUS factor
    (61) factor -> . atom_expr
    (62) atom_expr -> .
    (63) atom_expr -> . atom
    (64) atom_expr -> . atom_expr LSQBRACK expr RSQBRACK
    (65) atom_expr -> . name LPAREN list_expr RPAREN
    (66) atom -> . LPAREN list_expr RPAREN
    (67) atom -> . LSQBRACK list_expr RSQBRACK
    (68) atom -> . name
    (69) atom -> . number
    (70) atom -> . string
    (71) atom -> . TRUE
    (72) atom -> . FALSE
    (73) atom -> . NONE
    (74) atom -> . name LSQBRACK atom RSQBRACK
    (77) name -> . NAME
    (78) number -> . INT
    (79) number -> . FLOAT
    (80) string -> . STRING

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for NONE resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           reduce using rule 62 (atom_expr -> .)
    DIVIDE          reduce using rule 62 (atom_expr -> .)
    MOD             reduce using rule 62 (atom_expr -> .)
    GT              reduce using rule 62 (atom_expr -> .)
    LT              reduce using rule 62 (atom_expr -> .)
    GTE             reduce using rule 62 (atom_expr -> .)
    LTE             reduce using rule 62 (atom_expr -> .)
    EQ              reduce using rule 62 (atom_expr -> .)
    NEQ             reduce using rule 62 (atom_expr -> .)
    OR              reduce using rule 62 (atom_expr -> .)
    AND             reduce using rule 62 (atom_expr -> .)
    SEMICOLON       reduce using rule 62 (atom_expr -> .)
    LBRACK          reduce using rule 62 (atom_expr -> .)
    RETURN          reduce using rule 62 (atom_expr -> .)
    BREAK           reduce using rule 62 (atom_expr -> .)
    CONTINUE        reduce using rule 62 (atom_expr -> .)
    TRAIN           reduce using rule 62 (atom_expr -> .)
    PRED            reduce using rule 62 (atom_expr -> .)
    SAVE            reduce using rule 62 (atom_expr -> .)
    RPAREN          reduce using rule 62 (atom_expr -> .)
    COMMA           reduce using rule 62 (atom_expr -> .)
    RSQBRACK        reduce using rule 62 (atom_expr -> .)
    COLON           reduce using rule 62 (atom_expr -> .)
    LPAREN          shift and go to state 19
    LSQBRACK        shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    NONE            shift and go to state 44
    NAME            shift and go to state 50
    INT             shift and go to state 45
    FLOAT           shift and go to state 46
    STRING          shift and go to state 30

  ! LSQBRACK        [ reduce using rule 62 (atom_expr -> .) ]
  ! PLUS            [ reduce using rule 62 (atom_expr -> .) ]
  ! MINUS           [ reduce using rule 62 (atom_expr -> .) ]
  ! NAME            [ reduce using rule 62 (atom_expr -> .) ]
  ! LPAREN          [ reduce using rule 62 (atom_expr -> .) ]
  ! TRUE            [ reduce using rule 62 (atom_expr -> .) ]
  ! FALSE           [ reduce using rule 62 (atom_expr -> .) ]
  ! NONE            [ reduce using rule 62 (atom_expr -> .) ]
  ! INT             [ reduce using rule 62 (atom_expr -> .) ]
  ! FLOAT           [ reduce using rule 62 (atom_expr -> .) ]
  ! STRING          [ reduce using rule 62 (atom_expr -> .) ]

    expr                           shift and go to state 110
    factor                         shift and go to state 36
    atom_expr                      shift and go to state 37
    atom                           shift and go to state 38
    name                           shift and go to state 18
    number                         shift and go to state 40
    string                         shift and go to state 41

state 72

    (56) expr -> expr DIVIDE . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MOD expr
    (58) expr -> . factor
    (59) factor -> . PLUS factor
    (60) factor -> . MINUS factor
    (61) factor -> . atom_expr
    (62) atom_expr -> .
    (63) atom_expr -> . atom
    (64) atom_expr -> . atom_expr LSQBRACK expr RSQBRACK
    (65) atom_expr -> . name LPAREN list_expr RPAREN
    (66) atom -> . LPAREN list_expr RPAREN
    (67) atom -> . LSQBRACK list_expr RSQBRACK
    (68) atom -> . name
    (69) atom -> . number
    (70) atom -> . string
    (71) atom -> . TRUE
    (72) atom -> . FALSE
    (73) atom -> . NONE
    (74) atom -> . name LSQBRACK atom RSQBRACK
    (77) name -> . NAME
    (78) number -> . INT
    (79) number -> . FLOAT
    (80) string -> . STRING

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for NONE resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           reduce using rule 62 (atom_expr -> .)
    DIVIDE          reduce using rule 62 (atom_expr -> .)
    MOD             reduce using rule 62 (atom_expr -> .)
    GT              reduce using rule 62 (atom_expr -> .)
    LT              reduce using rule 62 (atom_expr -> .)
    GTE             reduce using rule 62 (atom_expr -> .)
    LTE             reduce using rule 62 (atom_expr -> .)
    EQ              reduce using rule 62 (atom_expr -> .)
    NEQ             reduce using rule 62 (atom_expr -> .)
    OR              reduce using rule 62 (atom_expr -> .)
    AND             reduce using rule 62 (atom_expr -> .)
    SEMICOLON       reduce using rule 62 (atom_expr -> .)
    LBRACK          reduce using rule 62 (atom_expr -> .)
    RETURN          reduce using rule 62 (atom_expr -> .)
    BREAK           reduce using rule 62 (atom_expr -> .)
    CONTINUE        reduce using rule 62 (atom_expr -> .)
    TRAIN           reduce using rule 62 (atom_expr -> .)
    PRED            reduce using rule 62 (atom_expr -> .)
    SAVE            reduce using rule 62 (atom_expr -> .)
    RPAREN          reduce using rule 62 (atom_expr -> .)
    COMMA           reduce using rule 62 (atom_expr -> .)
    RSQBRACK        reduce using rule 62 (atom_expr -> .)
    COLON           reduce using rule 62 (atom_expr -> .)
    LPAREN          shift and go to state 19
    LSQBRACK        shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    NONE            shift and go to state 44
    NAME            shift and go to state 50
    INT             shift and go to state 45
    FLOAT           shift and go to state 46
    STRING          shift and go to state 30

  ! LSQBRACK        [ reduce using rule 62 (atom_expr -> .) ]
  ! PLUS            [ reduce using rule 62 (atom_expr -> .) ]
  ! MINUS           [ reduce using rule 62 (atom_expr -> .) ]
  ! NAME            [ reduce using rule 62 (atom_expr -> .) ]
  ! LPAREN          [ reduce using rule 62 (atom_expr -> .) ]
  ! TRUE            [ reduce using rule 62 (atom_expr -> .) ]
  ! FALSE           [ reduce using rule 62 (atom_expr -> .) ]
  ! NONE            [ reduce using rule 62 (atom_expr -> .) ]
  ! INT             [ reduce using rule 62 (atom_expr -> .) ]
  ! FLOAT           [ reduce using rule 62 (atom_expr -> .) ]
  ! STRING          [ reduce using rule 62 (atom_expr -> .) ]

    expr                           shift and go to state 111
    factor                         shift and go to state 36
    atom_expr                      shift and go to state 37
    atom                           shift and go to state 38
    name                           shift and go to state 18
    number                         shift and go to state 40
    string                         shift and go to state 41

state 73

    (57) expr -> expr MOD . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MOD expr
    (58) expr -> . factor
    (59) factor -> . PLUS factor
    (60) factor -> . MINUS factor
    (61) factor -> . atom_expr
    (62) atom_expr -> .
    (63) atom_expr -> . atom
    (64) atom_expr -> . atom_expr LSQBRACK expr RSQBRACK
    (65) atom_expr -> . name LPAREN list_expr RPAREN
    (66) atom -> . LPAREN list_expr RPAREN
    (67) atom -> . LSQBRACK list_expr RSQBRACK
    (68) atom -> . name
    (69) atom -> . number
    (70) atom -> . string
    (71) atom -> . TRUE
    (72) atom -> . FALSE
    (73) atom -> . NONE
    (74) atom -> . name LSQBRACK atom RSQBRACK
    (77) name -> . NAME
    (78) number -> . INT
    (79) number -> . FLOAT
    (80) string -> . STRING

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for NONE resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           reduce using rule 62 (atom_expr -> .)
    DIVIDE          reduce using rule 62 (atom_expr -> .)
    MOD             reduce using rule 62 (atom_expr -> .)
    GT              reduce using rule 62 (atom_expr -> .)
    LT              reduce using rule 62 (atom_expr -> .)
    GTE             reduce using rule 62 (atom_expr -> .)
    LTE             reduce using rule 62 (atom_expr -> .)
    EQ              reduce using rule 62 (atom_expr -> .)
    NEQ             reduce using rule 62 (atom_expr -> .)
    OR              reduce using rule 62 (atom_expr -> .)
    AND             reduce using rule 62 (atom_expr -> .)
    SEMICOLON       reduce using rule 62 (atom_expr -> .)
    LBRACK          reduce using rule 62 (atom_expr -> .)
    RETURN          reduce using rule 62 (atom_expr -> .)
    BREAK           reduce using rule 62 (atom_expr -> .)
    CONTINUE        reduce using rule 62 (atom_expr -> .)
    TRAIN           reduce using rule 62 (atom_expr -> .)
    PRED            reduce using rule 62 (atom_expr -> .)
    SAVE            reduce using rule 62 (atom_expr -> .)
    RPAREN          reduce using rule 62 (atom_expr -> .)
    COMMA           reduce using rule 62 (atom_expr -> .)
    RSQBRACK        reduce using rule 62 (atom_expr -> .)
    COLON           reduce using rule 62 (atom_expr -> .)
    LPAREN          shift and go to state 19
    LSQBRACK        shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    NONE            shift and go to state 44
    NAME            shift and go to state 50
    INT             shift and go to state 45
    FLOAT           shift and go to state 46
    STRING          shift and go to state 30

  ! LSQBRACK        [ reduce using rule 62 (atom_expr -> .) ]
  ! PLUS            [ reduce using rule 62 (atom_expr -> .) ]
  ! MINUS           [ reduce using rule 62 (atom_expr -> .) ]
  ! NAME            [ reduce using rule 62 (atom_expr -> .) ]
  ! LPAREN          [ reduce using rule 62 (atom_expr -> .) ]
  ! TRUE            [ reduce using rule 62 (atom_expr -> .) ]
  ! FALSE           [ reduce using rule 62 (atom_expr -> .) ]
  ! NONE            [ reduce using rule 62 (atom_expr -> .) ]
  ! INT             [ reduce using rule 62 (atom_expr -> .) ]
  ! FLOAT           [ reduce using rule 62 (atom_expr -> .) ]
  ! STRING          [ reduce using rule 62 (atom_expr -> .) ]

    expr                           shift and go to state 112
    factor                         shift and go to state 36
    atom_expr                      shift and go to state 37
    atom                           shift and go to state 38
    name                           shift and go to state 18
    number                         shift and go to state 40
    string                         shift and go to state 41

state 74

    (19) train_stmt -> TRAIN name . list_expr
    (75) list_expr -> . list_expr COMMA expr
    (76) list_expr -> . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MOD expr
    (58) expr -> . factor
    (59) factor -> . PLUS factor
    (60) factor -> . MINUS factor
    (61) factor -> . atom_expr
    (62) atom_expr -> .
    (63) atom_expr -> . atom
    (64) atom_expr -> . atom_expr LSQBRACK expr RSQBRACK
    (65) atom_expr -> . name LPAREN list_expr RPAREN
    (66) atom -> . LPAREN list_expr RPAREN
    (67) atom -> . LSQBRACK list_expr RSQBRACK
    (68) atom -> . name
    (69) atom -> . number
    (70) atom -> . string
    (71) atom -> . TRUE
    (72) atom -> . FALSE
    (73) atom -> . NONE
    (74) atom -> . name LSQBRACK atom RSQBRACK
    (77) name -> . NAME
    (78) number -> . INT
    (79) number -> . FLOAT
    (80) string -> . STRING

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           reduce using rule 62 (atom_expr -> .)
    DIVIDE          reduce using rule 62 (atom_expr -> .)
    MOD             reduce using rule 62 (atom_expr -> .)
    COMMA           reduce using rule 62 (atom_expr -> .)
    SEMICOLON       reduce using rule 62 (atom_expr -> .)
    RPAREN          reduce using rule 62 (atom_expr -> .)
    LPAREN          shift and go to state 19
    LSQBRACK        shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    NONE            shift and go to state 44
    NAME            shift and go to state 50
    INT             shift and go to state 45
    FLOAT           shift and go to state 46
    STRING          shift and go to state 30

  ! LSQBRACK        [ reduce using rule 62 (atom_expr -> .) ]
  ! PLUS            [ reduce using rule 62 (atom_expr -> .) ]
  ! MINUS           [ reduce using rule 62 (atom_expr -> .) ]

    name                           shift and go to state 18
    list_expr                      shift and go to state 113
    expr                           shift and go to state 56
    factor                         shift and go to state 36
    atom_expr                      shift and go to state 37
    atom                           shift and go to state 38
    number                         shift and go to state 40
    string                         shift and go to state 41

state 75

    (20) pred_stmt -> PRED name . STRING

    STRING          shift and go to state 114


state 76

    (21) save_stmt -> SAVE name . STRING

    STRING          shift and go to state 115


state 77

    (59) factor -> PLUS factor .

    GT              reduce using rule 59 (factor -> PLUS factor .)
    LT              reduce using rule 59 (factor -> PLUS factor .)
    GTE             reduce using rule 59 (factor -> PLUS factor .)
    LTE             reduce using rule 59 (factor -> PLUS factor .)
    EQ              reduce using rule 59 (factor -> PLUS factor .)
    NEQ             reduce using rule 59 (factor -> PLUS factor .)
    PLUS            reduce using rule 59 (factor -> PLUS factor .)
    MINUS           reduce using rule 59 (factor -> PLUS factor .)
    TIMES           reduce using rule 59 (factor -> PLUS factor .)
    DIVIDE          reduce using rule 59 (factor -> PLUS factor .)
    MOD             reduce using rule 59 (factor -> PLUS factor .)
    OR              reduce using rule 59 (factor -> PLUS factor .)
    AND             reduce using rule 59 (factor -> PLUS factor .)
    SEMICOLON       reduce using rule 59 (factor -> PLUS factor .)
    LBRACK          reduce using rule 59 (factor -> PLUS factor .)
    RETURN          reduce using rule 59 (factor -> PLUS factor .)
    BREAK           reduce using rule 59 (factor -> PLUS factor .)
    CONTINUE        reduce using rule 59 (factor -> PLUS factor .)
    NAME            reduce using rule 59 (factor -> PLUS factor .)
    TRAIN           reduce using rule 59 (factor -> PLUS factor .)
    PRED            reduce using rule 59 (factor -> PLUS factor .)
    SAVE            reduce using rule 59 (factor -> PLUS factor .)
    LPAREN          reduce using rule 59 (factor -> PLUS factor .)
    LSQBRACK        reduce using rule 59 (factor -> PLUS factor .)
    TRUE            reduce using rule 59 (factor -> PLUS factor .)
    FALSE           reduce using rule 59 (factor -> PLUS factor .)
    NONE            reduce using rule 59 (factor -> PLUS factor .)
    INT             reduce using rule 59 (factor -> PLUS factor .)
    FLOAT           reduce using rule 59 (factor -> PLUS factor .)
    STRING          reduce using rule 59 (factor -> PLUS factor .)
    RPAREN          reduce using rule 59 (factor -> PLUS factor .)
    COMMA           reduce using rule 59 (factor -> PLUS factor .)
    RSQBRACK        reduce using rule 59 (factor -> PLUS factor .)
    COLON           reduce using rule 59 (factor -> PLUS factor .)


state 78

    (60) factor -> MINUS factor .

    GT              reduce using rule 60 (factor -> MINUS factor .)
    LT              reduce using rule 60 (factor -> MINUS factor .)
    GTE             reduce using rule 60 (factor -> MINUS factor .)
    LTE             reduce using rule 60 (factor -> MINUS factor .)
    EQ              reduce using rule 60 (factor -> MINUS factor .)
    NEQ             reduce using rule 60 (factor -> MINUS factor .)
    PLUS            reduce using rule 60 (factor -> MINUS factor .)
    MINUS           reduce using rule 60 (factor -> MINUS factor .)
    TIMES           reduce using rule 60 (factor -> MINUS factor .)
    DIVIDE          reduce using rule 60 (factor -> MINUS factor .)
    MOD             reduce using rule 60 (factor -> MINUS factor .)
    OR              reduce using rule 60 (factor -> MINUS factor .)
    AND             reduce using rule 60 (factor -> MINUS factor .)
    SEMICOLON       reduce using rule 60 (factor -> MINUS factor .)
    LBRACK          reduce using rule 60 (factor -> MINUS factor .)
    RETURN          reduce using rule 60 (factor -> MINUS factor .)
    BREAK           reduce using rule 60 (factor -> MINUS factor .)
    CONTINUE        reduce using rule 60 (factor -> MINUS factor .)
    NAME            reduce using rule 60 (factor -> MINUS factor .)
    TRAIN           reduce using rule 60 (factor -> MINUS factor .)
    PRED            reduce using rule 60 (factor -> MINUS factor .)
    SAVE            reduce using rule 60 (factor -> MINUS factor .)
    LPAREN          reduce using rule 60 (factor -> MINUS factor .)
    LSQBRACK        reduce using rule 60 (factor -> MINUS factor .)
    TRUE            reduce using rule 60 (factor -> MINUS factor .)
    FALSE           reduce using rule 60 (factor -> MINUS factor .)
    NONE            reduce using rule 60 (factor -> MINUS factor .)
    INT             reduce using rule 60 (factor -> MINUS factor .)
    FLOAT           reduce using rule 60 (factor -> MINUS factor .)
    STRING          reduce using rule 60 (factor -> MINUS factor .)
    RPAREN          reduce using rule 60 (factor -> MINUS factor .)
    COMMA           reduce using rule 60 (factor -> MINUS factor .)
    RSQBRACK        reduce using rule 60 (factor -> MINUS factor .)
    COLON           reduce using rule 60 (factor -> MINUS factor .)


state 79

    (64) atom_expr -> atom_expr LSQBRACK . expr RSQBRACK
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MOD expr
    (58) expr -> . factor
    (59) factor -> . PLUS factor
    (60) factor -> . MINUS factor
    (61) factor -> . atom_expr
    (62) atom_expr -> .
    (63) atom_expr -> . atom
    (64) atom_expr -> . atom_expr LSQBRACK expr RSQBRACK
    (65) atom_expr -> . name LPAREN list_expr RPAREN
    (66) atom -> . LPAREN list_expr RPAREN
    (67) atom -> . LSQBRACK list_expr RSQBRACK
    (68) atom -> . name
    (69) atom -> . number
    (70) atom -> . string
    (71) atom -> . TRUE
    (72) atom -> . FALSE
    (73) atom -> . NONE
    (74) atom -> . name LSQBRACK atom RSQBRACK
    (77) name -> . NAME
    (78) number -> . INT
    (79) number -> . FLOAT
    (80) string -> . STRING

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    RSQBRACK        reduce using rule 62 (atom_expr -> .)
    TIMES           reduce using rule 62 (atom_expr -> .)
    DIVIDE          reduce using rule 62 (atom_expr -> .)
    MOD             reduce using rule 62 (atom_expr -> .)
    LPAREN          shift and go to state 19
    LSQBRACK        shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    NONE            shift and go to state 44
    NAME            shift and go to state 50
    INT             shift and go to state 45
    FLOAT           shift and go to state 46
    STRING          shift and go to state 30

  ! LSQBRACK        [ reduce using rule 62 (atom_expr -> .) ]
  ! PLUS            [ reduce using rule 62 (atom_expr -> .) ]
  ! MINUS           [ reduce using rule 62 (atom_expr -> .) ]

    atom_expr                      shift and go to state 37
    expr                           shift and go to state 116
    factor                         shift and go to state 36
    atom                           shift and go to state 38
    name                           shift and go to state 18
    number                         shift and go to state 40
    string                         shift and go to state 41

state 80

    (67) atom -> LSQBRACK list_expr . RSQBRACK
    (75) list_expr -> list_expr . COMMA expr

    RSQBRACK        shift and go to state 117
    COMMA           shift and go to state 90


state 81

    (28) if_stmt -> IF test suite .
    (29) if_stmt -> IF test suite . ELSE suite

    IF              reduce using rule 28 (if_stmt -> IF test suite .)
    WHILE           reduce using rule 28 (if_stmt -> IF test suite .)
    DEF             reduce using rule 28 (if_stmt -> IF test suite .)
    PRINT           reduce using rule 28 (if_stmt -> IF test suite .)
    RETURN          reduce using rule 28 (if_stmt -> IF test suite .)
    BREAK           reduce using rule 28 (if_stmt -> IF test suite .)
    CONTINUE        reduce using rule 28 (if_stmt -> IF test suite .)
    NAME            reduce using rule 28 (if_stmt -> IF test suite .)
    TRAIN           reduce using rule 28 (if_stmt -> IF test suite .)
    PRED            reduce using rule 28 (if_stmt -> IF test suite .)
    SAVE            reduce using rule 28 (if_stmt -> IF test suite .)
    PLUS            reduce using rule 28 (if_stmt -> IF test suite .)
    MINUS           reduce using rule 28 (if_stmt -> IF test suite .)
    LPAREN          reduce using rule 28 (if_stmt -> IF test suite .)
    LSQBRACK        reduce using rule 28 (if_stmt -> IF test suite .)
    TRUE            reduce using rule 28 (if_stmt -> IF test suite .)
    FALSE           reduce using rule 28 (if_stmt -> IF test suite .)
    NONE            reduce using rule 28 (if_stmt -> IF test suite .)
    INT             reduce using rule 28 (if_stmt -> IF test suite .)
    FLOAT           reduce using rule 28 (if_stmt -> IF test suite .)
    STRING          reduce using rule 28 (if_stmt -> IF test suite .)
    SEMICOLON       reduce using rule 28 (if_stmt -> IF test suite .)
    OR              reduce using rule 28 (if_stmt -> IF test suite .)
    AND             reduce using rule 28 (if_stmt -> IF test suite .)
    GT              reduce using rule 28 (if_stmt -> IF test suite .)
    LT              reduce using rule 28 (if_stmt -> IF test suite .)
    GTE             reduce using rule 28 (if_stmt -> IF test suite .)
    LTE             reduce using rule 28 (if_stmt -> IF test suite .)
    EQ              reduce using rule 28 (if_stmt -> IF test suite .)
    NEQ             reduce using rule 28 (if_stmt -> IF test suite .)
    TIMES           reduce using rule 28 (if_stmt -> IF test suite .)
    DIVIDE          reduce using rule 28 (if_stmt -> IF test suite .)
    MOD             reduce using rule 28 (if_stmt -> IF test suite .)
    $end            reduce using rule 28 (if_stmt -> IF test suite .)
    RBRACK          reduce using rule 28 (if_stmt -> IF test suite .)
    ELSE            shift and go to state 118


state 82

    (31) suite -> simple_stmt .

    ELSE            reduce using rule 31 (suite -> simple_stmt .)
    IF              reduce using rule 31 (suite -> simple_stmt .)
    WHILE           reduce using rule 31 (suite -> simple_stmt .)
    DEF             reduce using rule 31 (suite -> simple_stmt .)
    PRINT           reduce using rule 31 (suite -> simple_stmt .)
    RETURN          reduce using rule 31 (suite -> simple_stmt .)
    BREAK           reduce using rule 31 (suite -> simple_stmt .)
    CONTINUE        reduce using rule 31 (suite -> simple_stmt .)
    NAME            reduce using rule 31 (suite -> simple_stmt .)
    TRAIN           reduce using rule 31 (suite -> simple_stmt .)
    PRED            reduce using rule 31 (suite -> simple_stmt .)
    SAVE            reduce using rule 31 (suite -> simple_stmt .)
    PLUS            reduce using rule 31 (suite -> simple_stmt .)
    MINUS           reduce using rule 31 (suite -> simple_stmt .)
    LPAREN          reduce using rule 31 (suite -> simple_stmt .)
    LSQBRACK        reduce using rule 31 (suite -> simple_stmt .)
    TRUE            reduce using rule 31 (suite -> simple_stmt .)
    FALSE           reduce using rule 31 (suite -> simple_stmt .)
    NONE            reduce using rule 31 (suite -> simple_stmt .)
    INT             reduce using rule 31 (suite -> simple_stmt .)
    FLOAT           reduce using rule 31 (suite -> simple_stmt .)
    STRING          reduce using rule 31 (suite -> simple_stmt .)
    SEMICOLON       reduce using rule 31 (suite -> simple_stmt .)
    OR              reduce using rule 31 (suite -> simple_stmt .)
    AND             reduce using rule 31 (suite -> simple_stmt .)
    GT              reduce using rule 31 (suite -> simple_stmt .)
    LT              reduce using rule 31 (suite -> simple_stmt .)
    GTE             reduce using rule 31 (suite -> simple_stmt .)
    LTE             reduce using rule 31 (suite -> simple_stmt .)
    EQ              reduce using rule 31 (suite -> simple_stmt .)
    NEQ             reduce using rule 31 (suite -> simple_stmt .)
    TIMES           reduce using rule 31 (suite -> simple_stmt .)
    DIVIDE          reduce using rule 31 (suite -> simple_stmt .)
    MOD             reduce using rule 31 (suite -> simple_stmt .)
    $end            reduce using rule 31 (suite -> simple_stmt .)
    RBRACK          reduce using rule 31 (suite -> simple_stmt .)


state 83

    (32) suite -> LBRACK . stmt_list RBRACK
    (2) stmt_list -> . stmt_list stmt
    (3) stmt_list -> . stmt
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (10) simple_stmt -> . small_stmt SEMICOLON
    (6) compound_stmt -> . if_stmt
    (7) compound_stmt -> . while_stmt
    (8) compound_stmt -> . funcdef_stmt
    (9) compound_stmt -> . print
    (11) small_stmt -> . test
    (12) small_stmt -> . flow_stmt
    (13) small_stmt -> . dl_stmt
    (14) small_stmt -> . assign_expr
    (28) if_stmt -> . IF test suite
    (29) if_stmt -> . IF test suite ELSE suite
    (26) while_stmt -> . WHILE test suite
    (27) while_stmt -> . WHILE test suite ELSE suite
    (30) funcdef_stmt -> . DEF name LPAREN list_expr RPAREN suite
    (15) print -> . PRINT LPAREN small_stmt RPAREN SEMICOLON
    (33) test -> . comparison OR test
    (34) test -> . comparison AND test
    (35) test -> . comparison
    (22) flow_stmt -> . RETURN
    (23) flow_stmt -> . RETURN list_expr
    (24) flow_stmt -> . BREAK
    (25) flow_stmt -> . CONTINUE
    (16) dl_stmt -> . train_stmt
    (17) dl_stmt -> . pred_stmt
    (18) dl_stmt -> . save_stmt
    (49) assign_expr -> . NAME ASSIGN expr
    (50) assign_expr -> . NAME COLON basic_type ASSIGN expr
    (51) assign_expr -> . NAME COLON basic_type ASSIGN STRING COLON STRING
    (52) assign_expr -> . NAME COLON basic_type ASSIGN list_expr COLON STRING
    (36) comparison -> . expr GT expr
    (37) comparison -> . expr LT expr
    (38) comparison -> . expr GTE expr
    (39) comparison -> . expr LTE expr
    (40) comparison -> . expr EQ expr
    (41) comparison -> . expr NEQ expr
    (42) comparison -> . expr
    (19) train_stmt -> . TRAIN name list_expr
    (20) pred_stmt -> . PRED name STRING
    (21) save_stmt -> . SAVE name STRING
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MOD expr
    (58) expr -> . factor
    (59) factor -> . PLUS factor
    (60) factor -> . MINUS factor
    (61) factor -> . atom_expr
    (62) atom_expr -> .
    (63) atom_expr -> . atom
    (64) atom_expr -> . atom_expr LSQBRACK expr RSQBRACK
    (65) atom_expr -> . name LPAREN list_expr RPAREN
    (66) atom -> . LPAREN list_expr RPAREN
    (67) atom -> . LSQBRACK list_expr RSQBRACK
    (68) atom -> . name
    (69) atom -> . number
    (70) atom -> . string
    (71) atom -> . TRUE
    (72) atom -> . FALSE
    (73) atom -> . NONE
    (74) atom -> . name LSQBRACK atom RSQBRACK
    (77) name -> . NAME
    (78) number -> . INT
    (79) number -> . FLOAT
    (80) string -> . STRING

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    DEF             shift and go to state 17
    PRINT           shift and go to state 20
    RETURN          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    NAME            shift and go to state 28
    TRAIN           shift and go to state 31
    PRED            shift and go to state 32
    SAVE            shift and go to state 33
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    GT              reduce using rule 62 (atom_expr -> .)
    LT              reduce using rule 62 (atom_expr -> .)
    GTE             reduce using rule 62 (atom_expr -> .)
    LTE             reduce using rule 62 (atom_expr -> .)
    EQ              reduce using rule 62 (atom_expr -> .)
    NEQ             reduce using rule 62 (atom_expr -> .)
    TIMES           reduce using rule 62 (atom_expr -> .)
    DIVIDE          reduce using rule 62 (atom_expr -> .)
    MOD             reduce using rule 62 (atom_expr -> .)
    OR              reduce using rule 62 (atom_expr -> .)
    AND             reduce using rule 62 (atom_expr -> .)
    SEMICOLON       reduce using rule 62 (atom_expr -> .)
    LPAREN          shift and go to state 19
    LSQBRACK        shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    NONE            shift and go to state 44
    INT             shift and go to state 45
    FLOAT           shift and go to state 46
    STRING          shift and go to state 30

  ! LSQBRACK        [ reduce using rule 62 (atom_expr -> .) ]
  ! PLUS            [ reduce using rule 62 (atom_expr -> .) ]
  ! MINUS           [ reduce using rule 62 (atom_expr -> .) ]

    stmt_list                      shift and go to state 119
    stmt                           shift and go to state 3
    simple_stmt                    shift and go to state 4
    compound_stmt                  shift and go to state 5
    small_stmt                     shift and go to state 6
    if_stmt                        shift and go to state 7
    while_stmt                     shift and go to state 8
    funcdef_stmt                   shift and go to state 9
    print                          shift and go to state 10
    test                           shift and go to state 11
    flow_stmt                      shift and go to state 12
    dl_stmt                        shift and go to state 13
    assign_expr                    shift and go to state 14
    name                           shift and go to state 18
    comparison                     shift and go to state 21
    train_stmt                     shift and go to state 25
    pred_stmt                      shift and go to state 26
    save_stmt                      shift and go to state 27
    expr                           shift and go to state 29
    factor                         shift and go to state 36
    atom_expr                      shift and go to state 37
    atom                           shift and go to state 38
    number                         shift and go to state 40
    string                         shift and go to state 41

state 84

    (26) while_stmt -> WHILE test suite .
    (27) while_stmt -> WHILE test suite . ELSE suite

    IF              reduce using rule 26 (while_stmt -> WHILE test suite .)
    WHILE           reduce using rule 26 (while_stmt -> WHILE test suite .)
    DEF             reduce using rule 26 (while_stmt -> WHILE test suite .)
    PRINT           reduce using rule 26 (while_stmt -> WHILE test suite .)
    RETURN          reduce using rule 26 (while_stmt -> WHILE test suite .)
    BREAK           reduce using rule 26 (while_stmt -> WHILE test suite .)
    CONTINUE        reduce using rule 26 (while_stmt -> WHILE test suite .)
    NAME            reduce using rule 26 (while_stmt -> WHILE test suite .)
    TRAIN           reduce using rule 26 (while_stmt -> WHILE test suite .)
    PRED            reduce using rule 26 (while_stmt -> WHILE test suite .)
    SAVE            reduce using rule 26 (while_stmt -> WHILE test suite .)
    PLUS            reduce using rule 26 (while_stmt -> WHILE test suite .)
    MINUS           reduce using rule 26 (while_stmt -> WHILE test suite .)
    LPAREN          reduce using rule 26 (while_stmt -> WHILE test suite .)
    LSQBRACK        reduce using rule 26 (while_stmt -> WHILE test suite .)
    TRUE            reduce using rule 26 (while_stmt -> WHILE test suite .)
    FALSE           reduce using rule 26 (while_stmt -> WHILE test suite .)
    NONE            reduce using rule 26 (while_stmt -> WHILE test suite .)
    INT             reduce using rule 26 (while_stmt -> WHILE test suite .)
    FLOAT           reduce using rule 26 (while_stmt -> WHILE test suite .)
    STRING          reduce using rule 26 (while_stmt -> WHILE test suite .)
    SEMICOLON       reduce using rule 26 (while_stmt -> WHILE test suite .)
    OR              reduce using rule 26 (while_stmt -> WHILE test suite .)
    AND             reduce using rule 26 (while_stmt -> WHILE test suite .)
    GT              reduce using rule 26 (while_stmt -> WHILE test suite .)
    LT              reduce using rule 26 (while_stmt -> WHILE test suite .)
    GTE             reduce using rule 26 (while_stmt -> WHILE test suite .)
    LTE             reduce using rule 26 (while_stmt -> WHILE test suite .)
    EQ              reduce using rule 26 (while_stmt -> WHILE test suite .)
    NEQ             reduce using rule 26 (while_stmt -> WHILE test suite .)
    TIMES           reduce using rule 26 (while_stmt -> WHILE test suite .)
    DIVIDE          reduce using rule 26 (while_stmt -> WHILE test suite .)
    MOD             reduce using rule 26 (while_stmt -> WHILE test suite .)
    $end            reduce using rule 26 (while_stmt -> WHILE test suite .)
    RBRACK          reduce using rule 26 (while_stmt -> WHILE test suite .)
    ELSE            shift and go to state 120


state 85

    (30) funcdef_stmt -> DEF name LPAREN . list_expr RPAREN suite
    (75) list_expr -> . list_expr COMMA expr
    (76) list_expr -> . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MOD expr
    (58) expr -> . factor
    (59) factor -> . PLUS factor
    (60) factor -> . MINUS factor
    (61) factor -> . atom_expr
    (62) atom_expr -> .
    (63) atom_expr -> . atom
    (64) atom_expr -> . atom_expr LSQBRACK expr RSQBRACK
    (65) atom_expr -> . name LPAREN list_expr RPAREN
    (66) atom -> . LPAREN list_expr RPAREN
    (67) atom -> . LSQBRACK list_expr RSQBRACK
    (68) atom -> . name
    (69) atom -> . number
    (70) atom -> . string
    (71) atom -> . TRUE
    (72) atom -> . FALSE
    (73) atom -> . NONE
    (74) atom -> . name LSQBRACK atom RSQBRACK
    (77) name -> . NAME
    (78) number -> . INT
    (79) number -> . FLOAT
    (80) string -> . STRING

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           reduce using rule 62 (atom_expr -> .)
    DIVIDE          reduce using rule 62 (atom_expr -> .)
    MOD             reduce using rule 62 (atom_expr -> .)
    RPAREN          reduce using rule 62 (atom_expr -> .)
    COMMA           reduce using rule 62 (atom_expr -> .)
    LPAREN          shift and go to state 19
    LSQBRACK        shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    NONE            shift and go to state 44
    NAME            shift and go to state 50
    INT             shift and go to state 45
    FLOAT           shift and go to state 46
    STRING          shift and go to state 30

  ! LSQBRACK        [ reduce using rule 62 (atom_expr -> .) ]
  ! PLUS            [ reduce using rule 62 (atom_expr -> .) ]
  ! MINUS           [ reduce using rule 62 (atom_expr -> .) ]

    name                           shift and go to state 18
    list_expr                      shift and go to state 121
    expr                           shift and go to state 56
    factor                         shift and go to state 36
    atom_expr                      shift and go to state 37
    atom                           shift and go to state 38
    number                         shift and go to state 40
    string                         shift and go to state 41

state 86

    (65) atom_expr -> name LPAREN list_expr . RPAREN
    (75) list_expr -> list_expr . COMMA expr

    RPAREN          shift and go to state 122
    COMMA           shift and go to state 90


state 87

    (68) atom -> name .
    (74) atom -> name . LSQBRACK atom RSQBRACK

    RSQBRACK        reduce using rule 68 (atom -> name .)
    LSQBRACK        shift and go to state 54


state 88

    (74) atom -> name LSQBRACK atom . RSQBRACK

    RSQBRACK        shift and go to state 123


state 89

    (66) atom -> LPAREN list_expr RPAREN .

    LSQBRACK        reduce using rule 66 (atom -> LPAREN list_expr RPAREN .)
    GT              reduce using rule 66 (atom -> LPAREN list_expr RPAREN .)
    LT              reduce using rule 66 (atom -> LPAREN list_expr RPAREN .)
    GTE             reduce using rule 66 (atom -> LPAREN list_expr RPAREN .)
    LTE             reduce using rule 66 (atom -> LPAREN list_expr RPAREN .)
    EQ              reduce using rule 66 (atom -> LPAREN list_expr RPAREN .)
    NEQ             reduce using rule 66 (atom -> LPAREN list_expr RPAREN .)
    PLUS            reduce using rule 66 (atom -> LPAREN list_expr RPAREN .)
    MINUS           reduce using rule 66 (atom -> LPAREN list_expr RPAREN .)
    TIMES           reduce using rule 66 (atom -> LPAREN list_expr RPAREN .)
    DIVIDE          reduce using rule 66 (atom -> LPAREN list_expr RPAREN .)
    MOD             reduce using rule 66 (atom -> LPAREN list_expr RPAREN .)
    OR              reduce using rule 66 (atom -> LPAREN list_expr RPAREN .)
    AND             reduce using rule 66 (atom -> LPAREN list_expr RPAREN .)
    SEMICOLON       reduce using rule 66 (atom -> LPAREN list_expr RPAREN .)
    LBRACK          reduce using rule 66 (atom -> LPAREN list_expr RPAREN .)
    RETURN          reduce using rule 66 (atom -> LPAREN list_expr RPAREN .)
    BREAK           reduce using rule 66 (atom -> LPAREN list_expr RPAREN .)
    CONTINUE        reduce using rule 66 (atom -> LPAREN list_expr RPAREN .)
    NAME            reduce using rule 66 (atom -> LPAREN list_expr RPAREN .)
    TRAIN           reduce using rule 66 (atom -> LPAREN list_expr RPAREN .)
    PRED            reduce using rule 66 (atom -> LPAREN list_expr RPAREN .)
    SAVE            reduce using rule 66 (atom -> LPAREN list_expr RPAREN .)
    LPAREN          reduce using rule 66 (atom -> LPAREN list_expr RPAREN .)
    TRUE            reduce using rule 66 (atom -> LPAREN list_expr RPAREN .)
    FALSE           reduce using rule 66 (atom -> LPAREN list_expr RPAREN .)
    NONE            reduce using rule 66 (atom -> LPAREN list_expr RPAREN .)
    INT             reduce using rule 66 (atom -> LPAREN list_expr RPAREN .)
    FLOAT           reduce using rule 66 (atom -> LPAREN list_expr RPAREN .)
    STRING          reduce using rule 66 (atom -> LPAREN list_expr RPAREN .)
    RPAREN          reduce using rule 66 (atom -> LPAREN list_expr RPAREN .)
    COMMA           reduce using rule 66 (atom -> LPAREN list_expr RPAREN .)
    RSQBRACK        reduce using rule 66 (atom -> LPAREN list_expr RPAREN .)
    COLON           reduce using rule 66 (atom -> LPAREN list_expr RPAREN .)


state 90

    (75) list_expr -> list_expr COMMA . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MOD expr
    (58) expr -> . factor
    (59) factor -> . PLUS factor
    (60) factor -> . MINUS factor
    (61) factor -> . atom_expr
    (62) atom_expr -> .
    (63) atom_expr -> . atom
    (64) atom_expr -> . atom_expr LSQBRACK expr RSQBRACK
    (65) atom_expr -> . name LPAREN list_expr RPAREN
    (66) atom -> . LPAREN list_expr RPAREN
    (67) atom -> . LSQBRACK list_expr RSQBRACK
    (68) atom -> . name
    (69) atom -> . number
    (70) atom -> . string
    (71) atom -> . TRUE
    (72) atom -> . FALSE
    (73) atom -> . NONE
    (74) atom -> . name LSQBRACK atom RSQBRACK
    (77) name -> . NAME
    (78) number -> . INT
    (79) number -> . FLOAT
    (80) string -> . STRING

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           reduce using rule 62 (atom_expr -> .)
    DIVIDE          reduce using rule 62 (atom_expr -> .)
    MOD             reduce using rule 62 (atom_expr -> .)
    RPAREN          reduce using rule 62 (atom_expr -> .)
    COMMA           reduce using rule 62 (atom_expr -> .)
    SEMICOLON       reduce using rule 62 (atom_expr -> .)
    RSQBRACK        reduce using rule 62 (atom_expr -> .)
    COLON           reduce using rule 62 (atom_expr -> .)
    LPAREN          shift and go to state 19
    LSQBRACK        shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    NONE            shift and go to state 44
    NAME            shift and go to state 50
    INT             shift and go to state 45
    FLOAT           shift and go to state 46
    STRING          shift and go to state 30

  ! LSQBRACK        [ reduce using rule 62 (atom_expr -> .) ]
  ! PLUS            [ reduce using rule 62 (atom_expr -> .) ]
  ! MINUS           [ reduce using rule 62 (atom_expr -> .) ]

    expr                           shift and go to state 124
    factor                         shift and go to state 36
    atom_expr                      shift and go to state 37
    atom                           shift and go to state 38
    name                           shift and go to state 18
    number                         shift and go to state 40
    string                         shift and go to state 41

state 91

    (15) print -> PRINT LPAREN small_stmt . RPAREN SEMICOLON

    RPAREN          shift and go to state 125


state 92

    (33) test -> comparison OR test .

    SEMICOLON       reduce using rule 33 (test -> comparison OR test .)
    LBRACK          reduce using rule 33 (test -> comparison OR test .)
    RETURN          reduce using rule 33 (test -> comparison OR test .)
    BREAK           reduce using rule 33 (test -> comparison OR test .)
    CONTINUE        reduce using rule 33 (test -> comparison OR test .)
    NAME            reduce using rule 33 (test -> comparison OR test .)
    TRAIN           reduce using rule 33 (test -> comparison OR test .)
    PRED            reduce using rule 33 (test -> comparison OR test .)
    SAVE            reduce using rule 33 (test -> comparison OR test .)
    PLUS            reduce using rule 33 (test -> comparison OR test .)
    MINUS           reduce using rule 33 (test -> comparison OR test .)
    LPAREN          reduce using rule 33 (test -> comparison OR test .)
    LSQBRACK        reduce using rule 33 (test -> comparison OR test .)
    TRUE            reduce using rule 33 (test -> comparison OR test .)
    FALSE           reduce using rule 33 (test -> comparison OR test .)
    NONE            reduce using rule 33 (test -> comparison OR test .)
    INT             reduce using rule 33 (test -> comparison OR test .)
    FLOAT           reduce using rule 33 (test -> comparison OR test .)
    STRING          reduce using rule 33 (test -> comparison OR test .)
    OR              reduce using rule 33 (test -> comparison OR test .)
    AND             reduce using rule 33 (test -> comparison OR test .)
    GT              reduce using rule 33 (test -> comparison OR test .)
    LT              reduce using rule 33 (test -> comparison OR test .)
    GTE             reduce using rule 33 (test -> comparison OR test .)
    LTE             reduce using rule 33 (test -> comparison OR test .)
    EQ              reduce using rule 33 (test -> comparison OR test .)
    NEQ             reduce using rule 33 (test -> comparison OR test .)
    TIMES           reduce using rule 33 (test -> comparison OR test .)
    DIVIDE          reduce using rule 33 (test -> comparison OR test .)
    MOD             reduce using rule 33 (test -> comparison OR test .)
    RPAREN          reduce using rule 33 (test -> comparison OR test .)


state 93

    (34) test -> comparison AND test .

    SEMICOLON       reduce using rule 34 (test -> comparison AND test .)
    LBRACK          reduce using rule 34 (test -> comparison AND test .)
    RETURN          reduce using rule 34 (test -> comparison AND test .)
    BREAK           reduce using rule 34 (test -> comparison AND test .)
    CONTINUE        reduce using rule 34 (test -> comparison AND test .)
    NAME            reduce using rule 34 (test -> comparison AND test .)
    TRAIN           reduce using rule 34 (test -> comparison AND test .)
    PRED            reduce using rule 34 (test -> comparison AND test .)
    SAVE            reduce using rule 34 (test -> comparison AND test .)
    PLUS            reduce using rule 34 (test -> comparison AND test .)
    MINUS           reduce using rule 34 (test -> comparison AND test .)
    LPAREN          reduce using rule 34 (test -> comparison AND test .)
    LSQBRACK        reduce using rule 34 (test -> comparison AND test .)
    TRUE            reduce using rule 34 (test -> comparison AND test .)
    FALSE           reduce using rule 34 (test -> comparison AND test .)
    NONE            reduce using rule 34 (test -> comparison AND test .)
    INT             reduce using rule 34 (test -> comparison AND test .)
    FLOAT           reduce using rule 34 (test -> comparison AND test .)
    STRING          reduce using rule 34 (test -> comparison AND test .)
    OR              reduce using rule 34 (test -> comparison AND test .)
    AND             reduce using rule 34 (test -> comparison AND test .)
    GT              reduce using rule 34 (test -> comparison AND test .)
    LT              reduce using rule 34 (test -> comparison AND test .)
    GTE             reduce using rule 34 (test -> comparison AND test .)
    LTE             reduce using rule 34 (test -> comparison AND test .)
    EQ              reduce using rule 34 (test -> comparison AND test .)
    NEQ             reduce using rule 34 (test -> comparison AND test .)
    TIMES           reduce using rule 34 (test -> comparison AND test .)
    DIVIDE          reduce using rule 34 (test -> comparison AND test .)
    MOD             reduce using rule 34 (test -> comparison AND test .)
    RPAREN          reduce using rule 34 (test -> comparison AND test .)


state 94

    (49) assign_expr -> NAME ASSIGN expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MOD expr

    SEMICOLON       reduce using rule 49 (assign_expr -> NAME ASSIGN expr .)
    RPAREN          reduce using rule 49 (assign_expr -> NAME ASSIGN expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72
    MOD             shift and go to state 73


state 95

    (50) assign_expr -> NAME COLON basic_type . ASSIGN expr
    (51) assign_expr -> NAME COLON basic_type . ASSIGN STRING COLON STRING
    (52) assign_expr -> NAME COLON basic_type . ASSIGN list_expr COLON STRING

    ASSIGN          shift and go to state 126


state 96

    (43) basic_type -> INT_TYPE .

    ASSIGN          reduce using rule 43 (basic_type -> INT_TYPE .)


state 97

    (44) basic_type -> FLOAT_TYPE .

    ASSIGN          reduce using rule 44 (basic_type -> FLOAT_TYPE .)


state 98

    (45) basic_type -> LIST_TYPE .

    ASSIGN          reduce using rule 45 (basic_type -> LIST_TYPE .)


state 99

    (46) basic_type -> TUPLE_TYPE .

    ASSIGN          reduce using rule 46 (basic_type -> TUPLE_TYPE .)


state 100

    (47) basic_type -> MLP .

    ASSIGN          reduce using rule 47 (basic_type -> MLP .)


state 101

    (48) basic_type -> TRANSFORMER .

    ASSIGN          reduce using rule 48 (basic_type -> TRANSFORMER .)


state 102

    (36) comparison -> expr GT expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MOD expr

    OR              reduce using rule 36 (comparison -> expr GT expr .)
    AND             reduce using rule 36 (comparison -> expr GT expr .)
    SEMICOLON       reduce using rule 36 (comparison -> expr GT expr .)
    LBRACK          reduce using rule 36 (comparison -> expr GT expr .)
    RETURN          reduce using rule 36 (comparison -> expr GT expr .)
    BREAK           reduce using rule 36 (comparison -> expr GT expr .)
    CONTINUE        reduce using rule 36 (comparison -> expr GT expr .)
    NAME            reduce using rule 36 (comparison -> expr GT expr .)
    TRAIN           reduce using rule 36 (comparison -> expr GT expr .)
    PRED            reduce using rule 36 (comparison -> expr GT expr .)
    SAVE            reduce using rule 36 (comparison -> expr GT expr .)
    LPAREN          reduce using rule 36 (comparison -> expr GT expr .)
    LSQBRACK        reduce using rule 36 (comparison -> expr GT expr .)
    TRUE            reduce using rule 36 (comparison -> expr GT expr .)
    FALSE           reduce using rule 36 (comparison -> expr GT expr .)
    NONE            reduce using rule 36 (comparison -> expr GT expr .)
    INT             reduce using rule 36 (comparison -> expr GT expr .)
    FLOAT           reduce using rule 36 (comparison -> expr GT expr .)
    STRING          reduce using rule 36 (comparison -> expr GT expr .)
    GT              reduce using rule 36 (comparison -> expr GT expr .)
    LT              reduce using rule 36 (comparison -> expr GT expr .)
    GTE             reduce using rule 36 (comparison -> expr GT expr .)
    LTE             reduce using rule 36 (comparison -> expr GT expr .)
    EQ              reduce using rule 36 (comparison -> expr GT expr .)
    NEQ             reduce using rule 36 (comparison -> expr GT expr .)
    MOD             reduce using rule 36 (comparison -> expr GT expr .)
    RPAREN          reduce using rule 36 (comparison -> expr GT expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72

  ! PLUS            [ reduce using rule 36 (comparison -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 36 (comparison -> expr GT expr .) ]
  ! TIMES           [ reduce using rule 36 (comparison -> expr GT expr .) ]
  ! DIVIDE          [ reduce using rule 36 (comparison -> expr GT expr .) ]
  ! MOD             [ shift and go to state 73 ]


state 103

    (37) comparison -> expr LT expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MOD expr

    OR              reduce using rule 37 (comparison -> expr LT expr .)
    AND             reduce using rule 37 (comparison -> expr LT expr .)
    SEMICOLON       reduce using rule 37 (comparison -> expr LT expr .)
    LBRACK          reduce using rule 37 (comparison -> expr LT expr .)
    RETURN          reduce using rule 37 (comparison -> expr LT expr .)
    BREAK           reduce using rule 37 (comparison -> expr LT expr .)
    CONTINUE        reduce using rule 37 (comparison -> expr LT expr .)
    NAME            reduce using rule 37 (comparison -> expr LT expr .)
    TRAIN           reduce using rule 37 (comparison -> expr LT expr .)
    PRED            reduce using rule 37 (comparison -> expr LT expr .)
    SAVE            reduce using rule 37 (comparison -> expr LT expr .)
    LPAREN          reduce using rule 37 (comparison -> expr LT expr .)
    LSQBRACK        reduce using rule 37 (comparison -> expr LT expr .)
    TRUE            reduce using rule 37 (comparison -> expr LT expr .)
    FALSE           reduce using rule 37 (comparison -> expr LT expr .)
    NONE            reduce using rule 37 (comparison -> expr LT expr .)
    INT             reduce using rule 37 (comparison -> expr LT expr .)
    FLOAT           reduce using rule 37 (comparison -> expr LT expr .)
    STRING          reduce using rule 37 (comparison -> expr LT expr .)
    GT              reduce using rule 37 (comparison -> expr LT expr .)
    LT              reduce using rule 37 (comparison -> expr LT expr .)
    GTE             reduce using rule 37 (comparison -> expr LT expr .)
    LTE             reduce using rule 37 (comparison -> expr LT expr .)
    EQ              reduce using rule 37 (comparison -> expr LT expr .)
    NEQ             reduce using rule 37 (comparison -> expr LT expr .)
    MOD             reduce using rule 37 (comparison -> expr LT expr .)
    RPAREN          reduce using rule 37 (comparison -> expr LT expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72

  ! PLUS            [ reduce using rule 37 (comparison -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 37 (comparison -> expr LT expr .) ]
  ! TIMES           [ reduce using rule 37 (comparison -> expr LT expr .) ]
  ! DIVIDE          [ reduce using rule 37 (comparison -> expr LT expr .) ]
  ! MOD             [ shift and go to state 73 ]


state 104

    (38) comparison -> expr GTE expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MOD expr

    OR              reduce using rule 38 (comparison -> expr GTE expr .)
    AND             reduce using rule 38 (comparison -> expr GTE expr .)
    SEMICOLON       reduce using rule 38 (comparison -> expr GTE expr .)
    LBRACK          reduce using rule 38 (comparison -> expr GTE expr .)
    RETURN          reduce using rule 38 (comparison -> expr GTE expr .)
    BREAK           reduce using rule 38 (comparison -> expr GTE expr .)
    CONTINUE        reduce using rule 38 (comparison -> expr GTE expr .)
    NAME            reduce using rule 38 (comparison -> expr GTE expr .)
    TRAIN           reduce using rule 38 (comparison -> expr GTE expr .)
    PRED            reduce using rule 38 (comparison -> expr GTE expr .)
    SAVE            reduce using rule 38 (comparison -> expr GTE expr .)
    LPAREN          reduce using rule 38 (comparison -> expr GTE expr .)
    LSQBRACK        reduce using rule 38 (comparison -> expr GTE expr .)
    TRUE            reduce using rule 38 (comparison -> expr GTE expr .)
    FALSE           reduce using rule 38 (comparison -> expr GTE expr .)
    NONE            reduce using rule 38 (comparison -> expr GTE expr .)
    INT             reduce using rule 38 (comparison -> expr GTE expr .)
    FLOAT           reduce using rule 38 (comparison -> expr GTE expr .)
    STRING          reduce using rule 38 (comparison -> expr GTE expr .)
    GT              reduce using rule 38 (comparison -> expr GTE expr .)
    LT              reduce using rule 38 (comparison -> expr GTE expr .)
    GTE             reduce using rule 38 (comparison -> expr GTE expr .)
    LTE             reduce using rule 38 (comparison -> expr GTE expr .)
    EQ              reduce using rule 38 (comparison -> expr GTE expr .)
    NEQ             reduce using rule 38 (comparison -> expr GTE expr .)
    MOD             reduce using rule 38 (comparison -> expr GTE expr .)
    RPAREN          reduce using rule 38 (comparison -> expr GTE expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72

  ! PLUS            [ reduce using rule 38 (comparison -> expr GTE expr .) ]
  ! MINUS           [ reduce using rule 38 (comparison -> expr GTE expr .) ]
  ! TIMES           [ reduce using rule 38 (comparison -> expr GTE expr .) ]
  ! DIVIDE          [ reduce using rule 38 (comparison -> expr GTE expr .) ]
  ! MOD             [ shift and go to state 73 ]


state 105

    (39) comparison -> expr LTE expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MOD expr

    OR              reduce using rule 39 (comparison -> expr LTE expr .)
    AND             reduce using rule 39 (comparison -> expr LTE expr .)
    SEMICOLON       reduce using rule 39 (comparison -> expr LTE expr .)
    LBRACK          reduce using rule 39 (comparison -> expr LTE expr .)
    RETURN          reduce using rule 39 (comparison -> expr LTE expr .)
    BREAK           reduce using rule 39 (comparison -> expr LTE expr .)
    CONTINUE        reduce using rule 39 (comparison -> expr LTE expr .)
    NAME            reduce using rule 39 (comparison -> expr LTE expr .)
    TRAIN           reduce using rule 39 (comparison -> expr LTE expr .)
    PRED            reduce using rule 39 (comparison -> expr LTE expr .)
    SAVE            reduce using rule 39 (comparison -> expr LTE expr .)
    LPAREN          reduce using rule 39 (comparison -> expr LTE expr .)
    LSQBRACK        reduce using rule 39 (comparison -> expr LTE expr .)
    TRUE            reduce using rule 39 (comparison -> expr LTE expr .)
    FALSE           reduce using rule 39 (comparison -> expr LTE expr .)
    NONE            reduce using rule 39 (comparison -> expr LTE expr .)
    INT             reduce using rule 39 (comparison -> expr LTE expr .)
    FLOAT           reduce using rule 39 (comparison -> expr LTE expr .)
    STRING          reduce using rule 39 (comparison -> expr LTE expr .)
    GT              reduce using rule 39 (comparison -> expr LTE expr .)
    LT              reduce using rule 39 (comparison -> expr LTE expr .)
    GTE             reduce using rule 39 (comparison -> expr LTE expr .)
    LTE             reduce using rule 39 (comparison -> expr LTE expr .)
    EQ              reduce using rule 39 (comparison -> expr LTE expr .)
    NEQ             reduce using rule 39 (comparison -> expr LTE expr .)
    MOD             reduce using rule 39 (comparison -> expr LTE expr .)
    RPAREN          reduce using rule 39 (comparison -> expr LTE expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72

  ! PLUS            [ reduce using rule 39 (comparison -> expr LTE expr .) ]
  ! MINUS           [ reduce using rule 39 (comparison -> expr LTE expr .) ]
  ! TIMES           [ reduce using rule 39 (comparison -> expr LTE expr .) ]
  ! DIVIDE          [ reduce using rule 39 (comparison -> expr LTE expr .) ]
  ! MOD             [ shift and go to state 73 ]


state 106

    (40) comparison -> expr EQ expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MOD expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    OR              reduce using rule 40 (comparison -> expr EQ expr .)
    AND             reduce using rule 40 (comparison -> expr EQ expr .)
    SEMICOLON       reduce using rule 40 (comparison -> expr EQ expr .)
    LBRACK          reduce using rule 40 (comparison -> expr EQ expr .)
    RETURN          reduce using rule 40 (comparison -> expr EQ expr .)
    BREAK           reduce using rule 40 (comparison -> expr EQ expr .)
    CONTINUE        reduce using rule 40 (comparison -> expr EQ expr .)
    NAME            reduce using rule 40 (comparison -> expr EQ expr .)
    TRAIN           reduce using rule 40 (comparison -> expr EQ expr .)
    PRED            reduce using rule 40 (comparison -> expr EQ expr .)
    SAVE            reduce using rule 40 (comparison -> expr EQ expr .)
    LPAREN          reduce using rule 40 (comparison -> expr EQ expr .)
    LSQBRACK        reduce using rule 40 (comparison -> expr EQ expr .)
    TRUE            reduce using rule 40 (comparison -> expr EQ expr .)
    FALSE           reduce using rule 40 (comparison -> expr EQ expr .)
    NONE            reduce using rule 40 (comparison -> expr EQ expr .)
    INT             reduce using rule 40 (comparison -> expr EQ expr .)
    FLOAT           reduce using rule 40 (comparison -> expr EQ expr .)
    STRING          reduce using rule 40 (comparison -> expr EQ expr .)
    GT              reduce using rule 40 (comparison -> expr EQ expr .)
    LT              reduce using rule 40 (comparison -> expr EQ expr .)
    GTE             reduce using rule 40 (comparison -> expr EQ expr .)
    LTE             reduce using rule 40 (comparison -> expr EQ expr .)
    EQ              reduce using rule 40 (comparison -> expr EQ expr .)
    NEQ             reduce using rule 40 (comparison -> expr EQ expr .)
    RPAREN          reduce using rule 40 (comparison -> expr EQ expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72
    MOD             shift and go to state 73

  ! PLUS            [ reduce using rule 40 (comparison -> expr EQ expr .) ]
  ! MINUS           [ reduce using rule 40 (comparison -> expr EQ expr .) ]
  ! TIMES           [ reduce using rule 40 (comparison -> expr EQ expr .) ]
  ! DIVIDE          [ reduce using rule 40 (comparison -> expr EQ expr .) ]
  ! MOD             [ reduce using rule 40 (comparison -> expr EQ expr .) ]


state 107

    (41) comparison -> expr NEQ expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MOD expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    OR              reduce using rule 41 (comparison -> expr NEQ expr .)
    AND             reduce using rule 41 (comparison -> expr NEQ expr .)
    SEMICOLON       reduce using rule 41 (comparison -> expr NEQ expr .)
    LBRACK          reduce using rule 41 (comparison -> expr NEQ expr .)
    RETURN          reduce using rule 41 (comparison -> expr NEQ expr .)
    BREAK           reduce using rule 41 (comparison -> expr NEQ expr .)
    CONTINUE        reduce using rule 41 (comparison -> expr NEQ expr .)
    NAME            reduce using rule 41 (comparison -> expr NEQ expr .)
    TRAIN           reduce using rule 41 (comparison -> expr NEQ expr .)
    PRED            reduce using rule 41 (comparison -> expr NEQ expr .)
    SAVE            reduce using rule 41 (comparison -> expr NEQ expr .)
    LPAREN          reduce using rule 41 (comparison -> expr NEQ expr .)
    LSQBRACK        reduce using rule 41 (comparison -> expr NEQ expr .)
    TRUE            reduce using rule 41 (comparison -> expr NEQ expr .)
    FALSE           reduce using rule 41 (comparison -> expr NEQ expr .)
    NONE            reduce using rule 41 (comparison -> expr NEQ expr .)
    INT             reduce using rule 41 (comparison -> expr NEQ expr .)
    FLOAT           reduce using rule 41 (comparison -> expr NEQ expr .)
    STRING          reduce using rule 41 (comparison -> expr NEQ expr .)
    GT              reduce using rule 41 (comparison -> expr NEQ expr .)
    LT              reduce using rule 41 (comparison -> expr NEQ expr .)
    GTE             reduce using rule 41 (comparison -> expr NEQ expr .)
    LTE             reduce using rule 41 (comparison -> expr NEQ expr .)
    EQ              reduce using rule 41 (comparison -> expr NEQ expr .)
    NEQ             reduce using rule 41 (comparison -> expr NEQ expr .)
    RPAREN          reduce using rule 41 (comparison -> expr NEQ expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72
    MOD             shift and go to state 73

  ! PLUS            [ reduce using rule 41 (comparison -> expr NEQ expr .) ]
  ! MINUS           [ reduce using rule 41 (comparison -> expr NEQ expr .) ]
  ! TIMES           [ reduce using rule 41 (comparison -> expr NEQ expr .) ]
  ! DIVIDE          [ reduce using rule 41 (comparison -> expr NEQ expr .) ]
  ! MOD             [ reduce using rule 41 (comparison -> expr NEQ expr .) ]


state 108

    (53) expr -> expr PLUS expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MOD expr

    GT              reduce using rule 53 (expr -> expr PLUS expr .)
    LT              reduce using rule 53 (expr -> expr PLUS expr .)
    GTE             reduce using rule 53 (expr -> expr PLUS expr .)
    LTE             reduce using rule 53 (expr -> expr PLUS expr .)
    EQ              reduce using rule 53 (expr -> expr PLUS expr .)
    NEQ             reduce using rule 53 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 53 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 53 (expr -> expr PLUS expr .)
    MOD             reduce using rule 53 (expr -> expr PLUS expr .)
    OR              reduce using rule 53 (expr -> expr PLUS expr .)
    AND             reduce using rule 53 (expr -> expr PLUS expr .)
    SEMICOLON       reduce using rule 53 (expr -> expr PLUS expr .)
    LBRACK          reduce using rule 53 (expr -> expr PLUS expr .)
    RETURN          reduce using rule 53 (expr -> expr PLUS expr .)
    BREAK           reduce using rule 53 (expr -> expr PLUS expr .)
    CONTINUE        reduce using rule 53 (expr -> expr PLUS expr .)
    NAME            reduce using rule 53 (expr -> expr PLUS expr .)
    TRAIN           reduce using rule 53 (expr -> expr PLUS expr .)
    PRED            reduce using rule 53 (expr -> expr PLUS expr .)
    SAVE            reduce using rule 53 (expr -> expr PLUS expr .)
    LPAREN          reduce using rule 53 (expr -> expr PLUS expr .)
    LSQBRACK        reduce using rule 53 (expr -> expr PLUS expr .)
    TRUE            reduce using rule 53 (expr -> expr PLUS expr .)
    FALSE           reduce using rule 53 (expr -> expr PLUS expr .)
    NONE            reduce using rule 53 (expr -> expr PLUS expr .)
    INT             reduce using rule 53 (expr -> expr PLUS expr .)
    FLOAT           reduce using rule 53 (expr -> expr PLUS expr .)
    STRING          reduce using rule 53 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 53 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 53 (expr -> expr PLUS expr .)
    RSQBRACK        reduce using rule 53 (expr -> expr PLUS expr .)
    COLON           reduce using rule 53 (expr -> expr PLUS expr .)
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72

  ! TIMES           [ reduce using rule 53 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 53 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 69 ]
  ! MINUS           [ shift and go to state 70 ]
  ! MOD             [ shift and go to state 73 ]


state 109

    (54) expr -> expr MINUS expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MOD expr

    GT              reduce using rule 54 (expr -> expr MINUS expr .)
    LT              reduce using rule 54 (expr -> expr MINUS expr .)
    GTE             reduce using rule 54 (expr -> expr MINUS expr .)
    LTE             reduce using rule 54 (expr -> expr MINUS expr .)
    EQ              reduce using rule 54 (expr -> expr MINUS expr .)
    NEQ             reduce using rule 54 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 54 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 54 (expr -> expr MINUS expr .)
    MOD             reduce using rule 54 (expr -> expr MINUS expr .)
    OR              reduce using rule 54 (expr -> expr MINUS expr .)
    AND             reduce using rule 54 (expr -> expr MINUS expr .)
    SEMICOLON       reduce using rule 54 (expr -> expr MINUS expr .)
    LBRACK          reduce using rule 54 (expr -> expr MINUS expr .)
    RETURN          reduce using rule 54 (expr -> expr MINUS expr .)
    BREAK           reduce using rule 54 (expr -> expr MINUS expr .)
    CONTINUE        reduce using rule 54 (expr -> expr MINUS expr .)
    NAME            reduce using rule 54 (expr -> expr MINUS expr .)
    TRAIN           reduce using rule 54 (expr -> expr MINUS expr .)
    PRED            reduce using rule 54 (expr -> expr MINUS expr .)
    SAVE            reduce using rule 54 (expr -> expr MINUS expr .)
    LPAREN          reduce using rule 54 (expr -> expr MINUS expr .)
    LSQBRACK        reduce using rule 54 (expr -> expr MINUS expr .)
    TRUE            reduce using rule 54 (expr -> expr MINUS expr .)
    FALSE           reduce using rule 54 (expr -> expr MINUS expr .)
    NONE            reduce using rule 54 (expr -> expr MINUS expr .)
    INT             reduce using rule 54 (expr -> expr MINUS expr .)
    FLOAT           reduce using rule 54 (expr -> expr MINUS expr .)
    STRING          reduce using rule 54 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 54 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 54 (expr -> expr MINUS expr .)
    RSQBRACK        reduce using rule 54 (expr -> expr MINUS expr .)
    COLON           reduce using rule 54 (expr -> expr MINUS expr .)
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72

  ! TIMES           [ reduce using rule 54 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 54 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 69 ]
  ! MINUS           [ shift and go to state 70 ]
  ! MOD             [ shift and go to state 73 ]


state 110

    (55) expr -> expr TIMES expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MOD expr

    GT              reduce using rule 55 (expr -> expr TIMES expr .)
    LT              reduce using rule 55 (expr -> expr TIMES expr .)
    GTE             reduce using rule 55 (expr -> expr TIMES expr .)
    LTE             reduce using rule 55 (expr -> expr TIMES expr .)
    EQ              reduce using rule 55 (expr -> expr TIMES expr .)
    NEQ             reduce using rule 55 (expr -> expr TIMES expr .)
    PLUS            reduce using rule 55 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 55 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 55 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 55 (expr -> expr TIMES expr .)
    MOD             reduce using rule 55 (expr -> expr TIMES expr .)
    OR              reduce using rule 55 (expr -> expr TIMES expr .)
    AND             reduce using rule 55 (expr -> expr TIMES expr .)
    SEMICOLON       reduce using rule 55 (expr -> expr TIMES expr .)
    LBRACK          reduce using rule 55 (expr -> expr TIMES expr .)
    RETURN          reduce using rule 55 (expr -> expr TIMES expr .)
    BREAK           reduce using rule 55 (expr -> expr TIMES expr .)
    CONTINUE        reduce using rule 55 (expr -> expr TIMES expr .)
    NAME            reduce using rule 55 (expr -> expr TIMES expr .)
    TRAIN           reduce using rule 55 (expr -> expr TIMES expr .)
    PRED            reduce using rule 55 (expr -> expr TIMES expr .)
    SAVE            reduce using rule 55 (expr -> expr TIMES expr .)
    LPAREN          reduce using rule 55 (expr -> expr TIMES expr .)
    LSQBRACK        reduce using rule 55 (expr -> expr TIMES expr .)
    TRUE            reduce using rule 55 (expr -> expr TIMES expr .)
    FALSE           reduce using rule 55 (expr -> expr TIMES expr .)
    NONE            reduce using rule 55 (expr -> expr TIMES expr .)
    INT             reduce using rule 55 (expr -> expr TIMES expr .)
    FLOAT           reduce using rule 55 (expr -> expr TIMES expr .)
    STRING          reduce using rule 55 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 55 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 55 (expr -> expr TIMES expr .)
    RSQBRACK        reduce using rule 55 (expr -> expr TIMES expr .)
    COLON           reduce using rule 55 (expr -> expr TIMES expr .)

  ! PLUS            [ shift and go to state 69 ]
  ! MINUS           [ shift and go to state 70 ]
  ! TIMES           [ shift and go to state 71 ]
  ! DIVIDE          [ shift and go to state 72 ]
  ! MOD             [ shift and go to state 73 ]


state 111

    (56) expr -> expr DIVIDE expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MOD expr

    GT              reduce using rule 56 (expr -> expr DIVIDE expr .)
    LT              reduce using rule 56 (expr -> expr DIVIDE expr .)
    GTE             reduce using rule 56 (expr -> expr DIVIDE expr .)
    LTE             reduce using rule 56 (expr -> expr DIVIDE expr .)
    EQ              reduce using rule 56 (expr -> expr DIVIDE expr .)
    NEQ             reduce using rule 56 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 56 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 56 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 56 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 56 (expr -> expr DIVIDE expr .)
    MOD             reduce using rule 56 (expr -> expr DIVIDE expr .)
    OR              reduce using rule 56 (expr -> expr DIVIDE expr .)
    AND             reduce using rule 56 (expr -> expr DIVIDE expr .)
    SEMICOLON       reduce using rule 56 (expr -> expr DIVIDE expr .)
    LBRACK          reduce using rule 56 (expr -> expr DIVIDE expr .)
    RETURN          reduce using rule 56 (expr -> expr DIVIDE expr .)
    BREAK           reduce using rule 56 (expr -> expr DIVIDE expr .)
    CONTINUE        reduce using rule 56 (expr -> expr DIVIDE expr .)
    NAME            reduce using rule 56 (expr -> expr DIVIDE expr .)
    TRAIN           reduce using rule 56 (expr -> expr DIVIDE expr .)
    PRED            reduce using rule 56 (expr -> expr DIVIDE expr .)
    SAVE            reduce using rule 56 (expr -> expr DIVIDE expr .)
    LPAREN          reduce using rule 56 (expr -> expr DIVIDE expr .)
    LSQBRACK        reduce using rule 56 (expr -> expr DIVIDE expr .)
    TRUE            reduce using rule 56 (expr -> expr DIVIDE expr .)
    FALSE           reduce using rule 56 (expr -> expr DIVIDE expr .)
    NONE            reduce using rule 56 (expr -> expr DIVIDE expr .)
    INT             reduce using rule 56 (expr -> expr DIVIDE expr .)
    FLOAT           reduce using rule 56 (expr -> expr DIVIDE expr .)
    STRING          reduce using rule 56 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 56 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 56 (expr -> expr DIVIDE expr .)
    RSQBRACK        reduce using rule 56 (expr -> expr DIVIDE expr .)
    COLON           reduce using rule 56 (expr -> expr DIVIDE expr .)

  ! PLUS            [ shift and go to state 69 ]
  ! MINUS           [ shift and go to state 70 ]
  ! TIMES           [ shift and go to state 71 ]
  ! DIVIDE          [ shift and go to state 72 ]
  ! MOD             [ shift and go to state 73 ]


state 112

    (57) expr -> expr MOD expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MOD expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    GT              reduce using rule 57 (expr -> expr MOD expr .)
    LT              reduce using rule 57 (expr -> expr MOD expr .)
    GTE             reduce using rule 57 (expr -> expr MOD expr .)
    LTE             reduce using rule 57 (expr -> expr MOD expr .)
    EQ              reduce using rule 57 (expr -> expr MOD expr .)
    NEQ             reduce using rule 57 (expr -> expr MOD expr .)
    OR              reduce using rule 57 (expr -> expr MOD expr .)
    AND             reduce using rule 57 (expr -> expr MOD expr .)
    SEMICOLON       reduce using rule 57 (expr -> expr MOD expr .)
    LBRACK          reduce using rule 57 (expr -> expr MOD expr .)
    RETURN          reduce using rule 57 (expr -> expr MOD expr .)
    BREAK           reduce using rule 57 (expr -> expr MOD expr .)
    CONTINUE        reduce using rule 57 (expr -> expr MOD expr .)
    NAME            reduce using rule 57 (expr -> expr MOD expr .)
    TRAIN           reduce using rule 57 (expr -> expr MOD expr .)
    PRED            reduce using rule 57 (expr -> expr MOD expr .)
    SAVE            reduce using rule 57 (expr -> expr MOD expr .)
    LPAREN          reduce using rule 57 (expr -> expr MOD expr .)
    LSQBRACK        reduce using rule 57 (expr -> expr MOD expr .)
    TRUE            reduce using rule 57 (expr -> expr MOD expr .)
    FALSE           reduce using rule 57 (expr -> expr MOD expr .)
    NONE            reduce using rule 57 (expr -> expr MOD expr .)
    INT             reduce using rule 57 (expr -> expr MOD expr .)
    FLOAT           reduce using rule 57 (expr -> expr MOD expr .)
    STRING          reduce using rule 57 (expr -> expr MOD expr .)
    RPAREN          reduce using rule 57 (expr -> expr MOD expr .)
    COMMA           reduce using rule 57 (expr -> expr MOD expr .)
    RSQBRACK        reduce using rule 57 (expr -> expr MOD expr .)
    COLON           reduce using rule 57 (expr -> expr MOD expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72
    MOD             shift and go to state 73

  ! PLUS            [ reduce using rule 57 (expr -> expr MOD expr .) ]
  ! MINUS           [ reduce using rule 57 (expr -> expr MOD expr .) ]
  ! TIMES           [ reduce using rule 57 (expr -> expr MOD expr .) ]
  ! DIVIDE          [ reduce using rule 57 (expr -> expr MOD expr .) ]
  ! MOD             [ reduce using rule 57 (expr -> expr MOD expr .) ]


state 113

    (19) train_stmt -> TRAIN name list_expr .
    (75) list_expr -> list_expr . COMMA expr

    SEMICOLON       reduce using rule 19 (train_stmt -> TRAIN name list_expr .)
    RPAREN          reduce using rule 19 (train_stmt -> TRAIN name list_expr .)
    COMMA           shift and go to state 90


state 114

    (20) pred_stmt -> PRED name STRING .

    SEMICOLON       reduce using rule 20 (pred_stmt -> PRED name STRING .)
    RPAREN          reduce using rule 20 (pred_stmt -> PRED name STRING .)


state 115

    (21) save_stmt -> SAVE name STRING .

    SEMICOLON       reduce using rule 21 (save_stmt -> SAVE name STRING .)
    RPAREN          reduce using rule 21 (save_stmt -> SAVE name STRING .)


state 116

    (64) atom_expr -> atom_expr LSQBRACK expr . RSQBRACK
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MOD expr

    RSQBRACK        shift and go to state 127
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72
    MOD             shift and go to state 73


state 117

    (67) atom -> LSQBRACK list_expr RSQBRACK .

    LSQBRACK        reduce using rule 67 (atom -> LSQBRACK list_expr RSQBRACK .)
    GT              reduce using rule 67 (atom -> LSQBRACK list_expr RSQBRACK .)
    LT              reduce using rule 67 (atom -> LSQBRACK list_expr RSQBRACK .)
    GTE             reduce using rule 67 (atom -> LSQBRACK list_expr RSQBRACK .)
    LTE             reduce using rule 67 (atom -> LSQBRACK list_expr RSQBRACK .)
    EQ              reduce using rule 67 (atom -> LSQBRACK list_expr RSQBRACK .)
    NEQ             reduce using rule 67 (atom -> LSQBRACK list_expr RSQBRACK .)
    PLUS            reduce using rule 67 (atom -> LSQBRACK list_expr RSQBRACK .)
    MINUS           reduce using rule 67 (atom -> LSQBRACK list_expr RSQBRACK .)
    TIMES           reduce using rule 67 (atom -> LSQBRACK list_expr RSQBRACK .)
    DIVIDE          reduce using rule 67 (atom -> LSQBRACK list_expr RSQBRACK .)
    MOD             reduce using rule 67 (atom -> LSQBRACK list_expr RSQBRACK .)
    OR              reduce using rule 67 (atom -> LSQBRACK list_expr RSQBRACK .)
    AND             reduce using rule 67 (atom -> LSQBRACK list_expr RSQBRACK .)
    SEMICOLON       reduce using rule 67 (atom -> LSQBRACK list_expr RSQBRACK .)
    LBRACK          reduce using rule 67 (atom -> LSQBRACK list_expr RSQBRACK .)
    RETURN          reduce using rule 67 (atom -> LSQBRACK list_expr RSQBRACK .)
    BREAK           reduce using rule 67 (atom -> LSQBRACK list_expr RSQBRACK .)
    CONTINUE        reduce using rule 67 (atom -> LSQBRACK list_expr RSQBRACK .)
    NAME            reduce using rule 67 (atom -> LSQBRACK list_expr RSQBRACK .)
    TRAIN           reduce using rule 67 (atom -> LSQBRACK list_expr RSQBRACK .)
    PRED            reduce using rule 67 (atom -> LSQBRACK list_expr RSQBRACK .)
    SAVE            reduce using rule 67 (atom -> LSQBRACK list_expr RSQBRACK .)
    LPAREN          reduce using rule 67 (atom -> LSQBRACK list_expr RSQBRACK .)
    TRUE            reduce using rule 67 (atom -> LSQBRACK list_expr RSQBRACK .)
    FALSE           reduce using rule 67 (atom -> LSQBRACK list_expr RSQBRACK .)
    NONE            reduce using rule 67 (atom -> LSQBRACK list_expr RSQBRACK .)
    INT             reduce using rule 67 (atom -> LSQBRACK list_expr RSQBRACK .)
    FLOAT           reduce using rule 67 (atom -> LSQBRACK list_expr RSQBRACK .)
    STRING          reduce using rule 67 (atom -> LSQBRACK list_expr RSQBRACK .)
    RPAREN          reduce using rule 67 (atom -> LSQBRACK list_expr RSQBRACK .)
    COMMA           reduce using rule 67 (atom -> LSQBRACK list_expr RSQBRACK .)
    RSQBRACK        reduce using rule 67 (atom -> LSQBRACK list_expr RSQBRACK .)
    COLON           reduce using rule 67 (atom -> LSQBRACK list_expr RSQBRACK .)


state 118

    (29) if_stmt -> IF test suite ELSE . suite
    (31) suite -> . simple_stmt
    (32) suite -> . LBRACK stmt_list RBRACK
    (10) simple_stmt -> . small_stmt SEMICOLON
    (11) small_stmt -> . test
    (12) small_stmt -> . flow_stmt
    (13) small_stmt -> . dl_stmt
    (14) small_stmt -> . assign_expr
    (33) test -> . comparison OR test
    (34) test -> . comparison AND test
    (35) test -> . comparison
    (22) flow_stmt -> . RETURN
    (23) flow_stmt -> . RETURN list_expr
    (24) flow_stmt -> . BREAK
    (25) flow_stmt -> . CONTINUE
    (16) dl_stmt -> . train_stmt
    (17) dl_stmt -> . pred_stmt
    (18) dl_stmt -> . save_stmt
    (49) assign_expr -> . NAME ASSIGN expr
    (50) assign_expr -> . NAME COLON basic_type ASSIGN expr
    (51) assign_expr -> . NAME COLON basic_type ASSIGN STRING COLON STRING
    (52) assign_expr -> . NAME COLON basic_type ASSIGN list_expr COLON STRING
    (36) comparison -> . expr GT expr
    (37) comparison -> . expr LT expr
    (38) comparison -> . expr GTE expr
    (39) comparison -> . expr LTE expr
    (40) comparison -> . expr EQ expr
    (41) comparison -> . expr NEQ expr
    (42) comparison -> . expr
    (19) train_stmt -> . TRAIN name list_expr
    (20) pred_stmt -> . PRED name STRING
    (21) save_stmt -> . SAVE name STRING
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MOD expr
    (58) expr -> . factor
    (59) factor -> . PLUS factor
    (60) factor -> . MINUS factor
    (61) factor -> . atom_expr
    (62) atom_expr -> .
    (63) atom_expr -> . atom
    (64) atom_expr -> . atom_expr LSQBRACK expr RSQBRACK
    (65) atom_expr -> . name LPAREN list_expr RPAREN
    (66) atom -> . LPAREN list_expr RPAREN
    (67) atom -> . LSQBRACK list_expr RSQBRACK
    (68) atom -> . name
    (69) atom -> . number
    (70) atom -> . string
    (71) atom -> . TRUE
    (72) atom -> . FALSE
    (73) atom -> . NONE
    (74) atom -> . name LSQBRACK atom RSQBRACK
    (77) name -> . NAME
    (78) number -> . INT
    (79) number -> . FLOAT
    (80) string -> . STRING

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
    LBRACK          shift and go to state 83
    RETURN          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    NAME            shift and go to state 28
    TRAIN           shift and go to state 31
    PRED            shift and go to state 32
    SAVE            shift and go to state 33
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    GT              reduce using rule 62 (atom_expr -> .)
    LT              reduce using rule 62 (atom_expr -> .)
    GTE             reduce using rule 62 (atom_expr -> .)
    LTE             reduce using rule 62 (atom_expr -> .)
    EQ              reduce using rule 62 (atom_expr -> .)
    NEQ             reduce using rule 62 (atom_expr -> .)
    TIMES           reduce using rule 62 (atom_expr -> .)
    DIVIDE          reduce using rule 62 (atom_expr -> .)
    MOD             reduce using rule 62 (atom_expr -> .)
    OR              reduce using rule 62 (atom_expr -> .)
    AND             reduce using rule 62 (atom_expr -> .)
    SEMICOLON       reduce using rule 62 (atom_expr -> .)
    LPAREN          shift and go to state 19
    LSQBRACK        shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    NONE            shift and go to state 44
    INT             shift and go to state 45
    FLOAT           shift and go to state 46
    STRING          shift and go to state 30

  ! LSQBRACK        [ reduce using rule 62 (atom_expr -> .) ]
  ! PLUS            [ reduce using rule 62 (atom_expr -> .) ]
  ! MINUS           [ reduce using rule 62 (atom_expr -> .) ]

    test                           shift and go to state 11
    suite                          shift and go to state 128
    simple_stmt                    shift and go to state 82
    small_stmt                     shift and go to state 6
    flow_stmt                      shift and go to state 12
    dl_stmt                        shift and go to state 13
    assign_expr                    shift and go to state 14
    comparison                     shift and go to state 21
    train_stmt                     shift and go to state 25
    pred_stmt                      shift and go to state 26
    save_stmt                      shift and go to state 27
    expr                           shift and go to state 29
    name                           shift and go to state 18
    factor                         shift and go to state 36
    atom_expr                      shift and go to state 37
    atom                           shift and go to state 38
    number                         shift and go to state 40
    string                         shift and go to state 41

state 119

    (32) suite -> LBRACK stmt_list . RBRACK
    (2) stmt_list -> stmt_list . stmt
    (4) stmt -> . simple_stmt
    (5) stmt -> . compound_stmt
    (10) simple_stmt -> . small_stmt SEMICOLON
    (6) compound_stmt -> . if_stmt
    (7) compound_stmt -> . while_stmt
    (8) compound_stmt -> . funcdef_stmt
    (9) compound_stmt -> . print
    (11) small_stmt -> . test
    (12) small_stmt -> . flow_stmt
    (13) small_stmt -> . dl_stmt
    (14) small_stmt -> . assign_expr
    (28) if_stmt -> . IF test suite
    (29) if_stmt -> . IF test suite ELSE suite
    (26) while_stmt -> . WHILE test suite
    (27) while_stmt -> . WHILE test suite ELSE suite
    (30) funcdef_stmt -> . DEF name LPAREN list_expr RPAREN suite
    (15) print -> . PRINT LPAREN small_stmt RPAREN SEMICOLON
    (33) test -> . comparison OR test
    (34) test -> . comparison AND test
    (35) test -> . comparison
    (22) flow_stmt -> . RETURN
    (23) flow_stmt -> . RETURN list_expr
    (24) flow_stmt -> . BREAK
    (25) flow_stmt -> . CONTINUE
    (16) dl_stmt -> . train_stmt
    (17) dl_stmt -> . pred_stmt
    (18) dl_stmt -> . save_stmt
    (49) assign_expr -> . NAME ASSIGN expr
    (50) assign_expr -> . NAME COLON basic_type ASSIGN expr
    (51) assign_expr -> . NAME COLON basic_type ASSIGN STRING COLON STRING
    (52) assign_expr -> . NAME COLON basic_type ASSIGN list_expr COLON STRING
    (36) comparison -> . expr GT expr
    (37) comparison -> . expr LT expr
    (38) comparison -> . expr GTE expr
    (39) comparison -> . expr LTE expr
    (40) comparison -> . expr EQ expr
    (41) comparison -> . expr NEQ expr
    (42) comparison -> . expr
    (19) train_stmt -> . TRAIN name list_expr
    (20) pred_stmt -> . PRED name STRING
    (21) save_stmt -> . SAVE name STRING
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MOD expr
    (58) expr -> . factor
    (59) factor -> . PLUS factor
    (60) factor -> . MINUS factor
    (61) factor -> . atom_expr
    (62) atom_expr -> .
    (63) atom_expr -> . atom
    (64) atom_expr -> . atom_expr LSQBRACK expr RSQBRACK
    (65) atom_expr -> . name LPAREN list_expr RPAREN
    (66) atom -> . LPAREN list_expr RPAREN
    (67) atom -> . LSQBRACK list_expr RSQBRACK
    (68) atom -> . name
    (69) atom -> . number
    (70) atom -> . string
    (71) atom -> . TRUE
    (72) atom -> . FALSE
    (73) atom -> . NONE
    (74) atom -> . name LSQBRACK atom RSQBRACK
    (77) name -> . NAME
    (78) number -> . INT
    (79) number -> . FLOAT
    (80) string -> . STRING

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
    RBRACK          shift and go to state 129
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    DEF             shift and go to state 17
    PRINT           shift and go to state 20
    RETURN          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    NAME            shift and go to state 28
    TRAIN           shift and go to state 31
    PRED            shift and go to state 32
    SAVE            shift and go to state 33
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    GT              reduce using rule 62 (atom_expr -> .)
    LT              reduce using rule 62 (atom_expr -> .)
    GTE             reduce using rule 62 (atom_expr -> .)
    LTE             reduce using rule 62 (atom_expr -> .)
    EQ              reduce using rule 62 (atom_expr -> .)
    NEQ             reduce using rule 62 (atom_expr -> .)
    TIMES           reduce using rule 62 (atom_expr -> .)
    DIVIDE          reduce using rule 62 (atom_expr -> .)
    MOD             reduce using rule 62 (atom_expr -> .)
    OR              reduce using rule 62 (atom_expr -> .)
    AND             reduce using rule 62 (atom_expr -> .)
    SEMICOLON       reduce using rule 62 (atom_expr -> .)
    LPAREN          shift and go to state 19
    LSQBRACK        shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    NONE            shift and go to state 44
    INT             shift and go to state 45
    FLOAT           shift and go to state 46
    STRING          shift and go to state 30

  ! LSQBRACK        [ reduce using rule 62 (atom_expr -> .) ]
  ! PLUS            [ reduce using rule 62 (atom_expr -> .) ]
  ! MINUS           [ reduce using rule 62 (atom_expr -> .) ]

    stmt                           shift and go to state 47
    simple_stmt                    shift and go to state 4
    compound_stmt                  shift and go to state 5
    small_stmt                     shift and go to state 6
    if_stmt                        shift and go to state 7
    while_stmt                     shift and go to state 8
    funcdef_stmt                   shift and go to state 9
    print                          shift and go to state 10
    test                           shift and go to state 11
    flow_stmt                      shift and go to state 12
    dl_stmt                        shift and go to state 13
    assign_expr                    shift and go to state 14
    name                           shift and go to state 18
    comparison                     shift and go to state 21
    train_stmt                     shift and go to state 25
    pred_stmt                      shift and go to state 26
    save_stmt                      shift and go to state 27
    expr                           shift and go to state 29
    factor                         shift and go to state 36
    atom_expr                      shift and go to state 37
    atom                           shift and go to state 38
    number                         shift and go to state 40
    string                         shift and go to state 41

state 120

    (27) while_stmt -> WHILE test suite ELSE . suite
    (31) suite -> . simple_stmt
    (32) suite -> . LBRACK stmt_list RBRACK
    (10) simple_stmt -> . small_stmt SEMICOLON
    (11) small_stmt -> . test
    (12) small_stmt -> . flow_stmt
    (13) small_stmt -> . dl_stmt
    (14) small_stmt -> . assign_expr
    (33) test -> . comparison OR test
    (34) test -> . comparison AND test
    (35) test -> . comparison
    (22) flow_stmt -> . RETURN
    (23) flow_stmt -> . RETURN list_expr
    (24) flow_stmt -> . BREAK
    (25) flow_stmt -> . CONTINUE
    (16) dl_stmt -> . train_stmt
    (17) dl_stmt -> . pred_stmt
    (18) dl_stmt -> . save_stmt
    (49) assign_expr -> . NAME ASSIGN expr
    (50) assign_expr -> . NAME COLON basic_type ASSIGN expr
    (51) assign_expr -> . NAME COLON basic_type ASSIGN STRING COLON STRING
    (52) assign_expr -> . NAME COLON basic_type ASSIGN list_expr COLON STRING
    (36) comparison -> . expr GT expr
    (37) comparison -> . expr LT expr
    (38) comparison -> . expr GTE expr
    (39) comparison -> . expr LTE expr
    (40) comparison -> . expr EQ expr
    (41) comparison -> . expr NEQ expr
    (42) comparison -> . expr
    (19) train_stmt -> . TRAIN name list_expr
    (20) pred_stmt -> . PRED name STRING
    (21) save_stmt -> . SAVE name STRING
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MOD expr
    (58) expr -> . factor
    (59) factor -> . PLUS factor
    (60) factor -> . MINUS factor
    (61) factor -> . atom_expr
    (62) atom_expr -> .
    (63) atom_expr -> . atom
    (64) atom_expr -> . atom_expr LSQBRACK expr RSQBRACK
    (65) atom_expr -> . name LPAREN list_expr RPAREN
    (66) atom -> . LPAREN list_expr RPAREN
    (67) atom -> . LSQBRACK list_expr RSQBRACK
    (68) atom -> . name
    (69) atom -> . number
    (70) atom -> . string
    (71) atom -> . TRUE
    (72) atom -> . FALSE
    (73) atom -> . NONE
    (74) atom -> . name LSQBRACK atom RSQBRACK
    (77) name -> . NAME
    (78) number -> . INT
    (79) number -> . FLOAT
    (80) string -> . STRING

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
    LBRACK          shift and go to state 83
    RETURN          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    NAME            shift and go to state 28
    TRAIN           shift and go to state 31
    PRED            shift and go to state 32
    SAVE            shift and go to state 33
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    GT              reduce using rule 62 (atom_expr -> .)
    LT              reduce using rule 62 (atom_expr -> .)
    GTE             reduce using rule 62 (atom_expr -> .)
    LTE             reduce using rule 62 (atom_expr -> .)
    EQ              reduce using rule 62 (atom_expr -> .)
    NEQ             reduce using rule 62 (atom_expr -> .)
    TIMES           reduce using rule 62 (atom_expr -> .)
    DIVIDE          reduce using rule 62 (atom_expr -> .)
    MOD             reduce using rule 62 (atom_expr -> .)
    OR              reduce using rule 62 (atom_expr -> .)
    AND             reduce using rule 62 (atom_expr -> .)
    SEMICOLON       reduce using rule 62 (atom_expr -> .)
    LPAREN          shift and go to state 19
    LSQBRACK        shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    NONE            shift and go to state 44
    INT             shift and go to state 45
    FLOAT           shift and go to state 46
    STRING          shift and go to state 30

  ! LSQBRACK        [ reduce using rule 62 (atom_expr -> .) ]
  ! PLUS            [ reduce using rule 62 (atom_expr -> .) ]
  ! MINUS           [ reduce using rule 62 (atom_expr -> .) ]

    test                           shift and go to state 11
    suite                          shift and go to state 130
    simple_stmt                    shift and go to state 82
    small_stmt                     shift and go to state 6
    flow_stmt                      shift and go to state 12
    dl_stmt                        shift and go to state 13
    assign_expr                    shift and go to state 14
    comparison                     shift and go to state 21
    train_stmt                     shift and go to state 25
    pred_stmt                      shift and go to state 26
    save_stmt                      shift and go to state 27
    expr                           shift and go to state 29
    name                           shift and go to state 18
    factor                         shift and go to state 36
    atom_expr                      shift and go to state 37
    atom                           shift and go to state 38
    number                         shift and go to state 40
    string                         shift and go to state 41

state 121

    (30) funcdef_stmt -> DEF name LPAREN list_expr . RPAREN suite
    (75) list_expr -> list_expr . COMMA expr

    RPAREN          shift and go to state 131
    COMMA           shift and go to state 90


state 122

    (65) atom_expr -> name LPAREN list_expr RPAREN .

    LSQBRACK        reduce using rule 65 (atom_expr -> name LPAREN list_expr RPAREN .)
    GT              reduce using rule 65 (atom_expr -> name LPAREN list_expr RPAREN .)
    LT              reduce using rule 65 (atom_expr -> name LPAREN list_expr RPAREN .)
    GTE             reduce using rule 65 (atom_expr -> name LPAREN list_expr RPAREN .)
    LTE             reduce using rule 65 (atom_expr -> name LPAREN list_expr RPAREN .)
    EQ              reduce using rule 65 (atom_expr -> name LPAREN list_expr RPAREN .)
    NEQ             reduce using rule 65 (atom_expr -> name LPAREN list_expr RPAREN .)
    PLUS            reduce using rule 65 (atom_expr -> name LPAREN list_expr RPAREN .)
    MINUS           reduce using rule 65 (atom_expr -> name LPAREN list_expr RPAREN .)
    TIMES           reduce using rule 65 (atom_expr -> name LPAREN list_expr RPAREN .)
    DIVIDE          reduce using rule 65 (atom_expr -> name LPAREN list_expr RPAREN .)
    MOD             reduce using rule 65 (atom_expr -> name LPAREN list_expr RPAREN .)
    OR              reduce using rule 65 (atom_expr -> name LPAREN list_expr RPAREN .)
    AND             reduce using rule 65 (atom_expr -> name LPAREN list_expr RPAREN .)
    SEMICOLON       reduce using rule 65 (atom_expr -> name LPAREN list_expr RPAREN .)
    LBRACK          reduce using rule 65 (atom_expr -> name LPAREN list_expr RPAREN .)
    RETURN          reduce using rule 65 (atom_expr -> name LPAREN list_expr RPAREN .)
    BREAK           reduce using rule 65 (atom_expr -> name LPAREN list_expr RPAREN .)
    CONTINUE        reduce using rule 65 (atom_expr -> name LPAREN list_expr RPAREN .)
    NAME            reduce using rule 65 (atom_expr -> name LPAREN list_expr RPAREN .)
    TRAIN           reduce using rule 65 (atom_expr -> name LPAREN list_expr RPAREN .)
    PRED            reduce using rule 65 (atom_expr -> name LPAREN list_expr RPAREN .)
    SAVE            reduce using rule 65 (atom_expr -> name LPAREN list_expr RPAREN .)
    LPAREN          reduce using rule 65 (atom_expr -> name LPAREN list_expr RPAREN .)
    TRUE            reduce using rule 65 (atom_expr -> name LPAREN list_expr RPAREN .)
    FALSE           reduce using rule 65 (atom_expr -> name LPAREN list_expr RPAREN .)
    NONE            reduce using rule 65 (atom_expr -> name LPAREN list_expr RPAREN .)
    INT             reduce using rule 65 (atom_expr -> name LPAREN list_expr RPAREN .)
    FLOAT           reduce using rule 65 (atom_expr -> name LPAREN list_expr RPAREN .)
    STRING          reduce using rule 65 (atom_expr -> name LPAREN list_expr RPAREN .)
    RPAREN          reduce using rule 65 (atom_expr -> name LPAREN list_expr RPAREN .)
    COMMA           reduce using rule 65 (atom_expr -> name LPAREN list_expr RPAREN .)
    RSQBRACK        reduce using rule 65 (atom_expr -> name LPAREN list_expr RPAREN .)
    COLON           reduce using rule 65 (atom_expr -> name LPAREN list_expr RPAREN .)


state 123

    (74) atom -> name LSQBRACK atom RSQBRACK .

    LSQBRACK        reduce using rule 74 (atom -> name LSQBRACK atom RSQBRACK .)
    GT              reduce using rule 74 (atom -> name LSQBRACK atom RSQBRACK .)
    LT              reduce using rule 74 (atom -> name LSQBRACK atom RSQBRACK .)
    GTE             reduce using rule 74 (atom -> name LSQBRACK atom RSQBRACK .)
    LTE             reduce using rule 74 (atom -> name LSQBRACK atom RSQBRACK .)
    EQ              reduce using rule 74 (atom -> name LSQBRACK atom RSQBRACK .)
    NEQ             reduce using rule 74 (atom -> name LSQBRACK atom RSQBRACK .)
    PLUS            reduce using rule 74 (atom -> name LSQBRACK atom RSQBRACK .)
    MINUS           reduce using rule 74 (atom -> name LSQBRACK atom RSQBRACK .)
    TIMES           reduce using rule 74 (atom -> name LSQBRACK atom RSQBRACK .)
    DIVIDE          reduce using rule 74 (atom -> name LSQBRACK atom RSQBRACK .)
    MOD             reduce using rule 74 (atom -> name LSQBRACK atom RSQBRACK .)
    OR              reduce using rule 74 (atom -> name LSQBRACK atom RSQBRACK .)
    AND             reduce using rule 74 (atom -> name LSQBRACK atom RSQBRACK .)
    SEMICOLON       reduce using rule 74 (atom -> name LSQBRACK atom RSQBRACK .)
    LBRACK          reduce using rule 74 (atom -> name LSQBRACK atom RSQBRACK .)
    RETURN          reduce using rule 74 (atom -> name LSQBRACK atom RSQBRACK .)
    BREAK           reduce using rule 74 (atom -> name LSQBRACK atom RSQBRACK .)
    CONTINUE        reduce using rule 74 (atom -> name LSQBRACK atom RSQBRACK .)
    NAME            reduce using rule 74 (atom -> name LSQBRACK atom RSQBRACK .)
    TRAIN           reduce using rule 74 (atom -> name LSQBRACK atom RSQBRACK .)
    PRED            reduce using rule 74 (atom -> name LSQBRACK atom RSQBRACK .)
    SAVE            reduce using rule 74 (atom -> name LSQBRACK atom RSQBRACK .)
    LPAREN          reduce using rule 74 (atom -> name LSQBRACK atom RSQBRACK .)
    TRUE            reduce using rule 74 (atom -> name LSQBRACK atom RSQBRACK .)
    FALSE           reduce using rule 74 (atom -> name LSQBRACK atom RSQBRACK .)
    NONE            reduce using rule 74 (atom -> name LSQBRACK atom RSQBRACK .)
    INT             reduce using rule 74 (atom -> name LSQBRACK atom RSQBRACK .)
    FLOAT           reduce using rule 74 (atom -> name LSQBRACK atom RSQBRACK .)
    STRING          reduce using rule 74 (atom -> name LSQBRACK atom RSQBRACK .)
    RPAREN          reduce using rule 74 (atom -> name LSQBRACK atom RSQBRACK .)
    COMMA           reduce using rule 74 (atom -> name LSQBRACK atom RSQBRACK .)
    RSQBRACK        reduce using rule 74 (atom -> name LSQBRACK atom RSQBRACK .)
    COLON           reduce using rule 74 (atom -> name LSQBRACK atom RSQBRACK .)


state 124

    (75) list_expr -> list_expr COMMA expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MOD expr

    RPAREN          reduce using rule 75 (list_expr -> list_expr COMMA expr .)
    COMMA           reduce using rule 75 (list_expr -> list_expr COMMA expr .)
    SEMICOLON       reduce using rule 75 (list_expr -> list_expr COMMA expr .)
    RSQBRACK        reduce using rule 75 (list_expr -> list_expr COMMA expr .)
    COLON           reduce using rule 75 (list_expr -> list_expr COMMA expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72
    MOD             shift and go to state 73


state 125

    (15) print -> PRINT LPAREN small_stmt RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 132


state 126

    (50) assign_expr -> NAME COLON basic_type ASSIGN . expr
    (51) assign_expr -> NAME COLON basic_type ASSIGN . STRING COLON STRING
    (52) assign_expr -> NAME COLON basic_type ASSIGN . list_expr COLON STRING
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MOD expr
    (58) expr -> . factor
    (75) list_expr -> . list_expr COMMA expr
    (76) list_expr -> . expr
    (59) factor -> . PLUS factor
    (60) factor -> . MINUS factor
    (61) factor -> . atom_expr
    (62) atom_expr -> .
    (63) atom_expr -> . atom
    (64) atom_expr -> . atom_expr LSQBRACK expr RSQBRACK
    (65) atom_expr -> . name LPAREN list_expr RPAREN
    (66) atom -> . LPAREN list_expr RPAREN
    (67) atom -> . LSQBRACK list_expr RSQBRACK
    (68) atom -> . name
    (69) atom -> . number
    (70) atom -> . string
    (71) atom -> . TRUE
    (72) atom -> . FALSE
    (73) atom -> . NONE
    (74) atom -> . name LSQBRACK atom RSQBRACK
    (77) name -> . NAME
    (78) number -> . INT
    (79) number -> . FLOAT
    (80) string -> . STRING

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
    STRING          shift and go to state 134
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           reduce using rule 62 (atom_expr -> .)
    DIVIDE          reduce using rule 62 (atom_expr -> .)
    MOD             reduce using rule 62 (atom_expr -> .)
    SEMICOLON       reduce using rule 62 (atom_expr -> .)
    RPAREN          reduce using rule 62 (atom_expr -> .)
    COLON           reduce using rule 62 (atom_expr -> .)
    COMMA           reduce using rule 62 (atom_expr -> .)
    LPAREN          shift and go to state 19
    LSQBRACK        shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    NONE            shift and go to state 44
    NAME            shift and go to state 50
    INT             shift and go to state 45
    FLOAT           shift and go to state 46

  ! LSQBRACK        [ reduce using rule 62 (atom_expr -> .) ]
  ! PLUS            [ reduce using rule 62 (atom_expr -> .) ]
  ! MINUS           [ reduce using rule 62 (atom_expr -> .) ]

    expr                           shift and go to state 133
    list_expr                      shift and go to state 135
    factor                         shift and go to state 36
    atom_expr                      shift and go to state 37
    atom                           shift and go to state 38
    name                           shift and go to state 18
    number                         shift and go to state 40
    string                         shift and go to state 41

state 127

    (64) atom_expr -> atom_expr LSQBRACK expr RSQBRACK .

    LSQBRACK        reduce using rule 64 (atom_expr -> atom_expr LSQBRACK expr RSQBRACK .)
    GT              reduce using rule 64 (atom_expr -> atom_expr LSQBRACK expr RSQBRACK .)
    LT              reduce using rule 64 (atom_expr -> atom_expr LSQBRACK expr RSQBRACK .)
    GTE             reduce using rule 64 (atom_expr -> atom_expr LSQBRACK expr RSQBRACK .)
    LTE             reduce using rule 64 (atom_expr -> atom_expr LSQBRACK expr RSQBRACK .)
    EQ              reduce using rule 64 (atom_expr -> atom_expr LSQBRACK expr RSQBRACK .)
    NEQ             reduce using rule 64 (atom_expr -> atom_expr LSQBRACK expr RSQBRACK .)
    PLUS            reduce using rule 64 (atom_expr -> atom_expr LSQBRACK expr RSQBRACK .)
    MINUS           reduce using rule 64 (atom_expr -> atom_expr LSQBRACK expr RSQBRACK .)
    TIMES           reduce using rule 64 (atom_expr -> atom_expr LSQBRACK expr RSQBRACK .)
    DIVIDE          reduce using rule 64 (atom_expr -> atom_expr LSQBRACK expr RSQBRACK .)
    MOD             reduce using rule 64 (atom_expr -> atom_expr LSQBRACK expr RSQBRACK .)
    OR              reduce using rule 64 (atom_expr -> atom_expr LSQBRACK expr RSQBRACK .)
    AND             reduce using rule 64 (atom_expr -> atom_expr LSQBRACK expr RSQBRACK .)
    SEMICOLON       reduce using rule 64 (atom_expr -> atom_expr LSQBRACK expr RSQBRACK .)
    LBRACK          reduce using rule 64 (atom_expr -> atom_expr LSQBRACK expr RSQBRACK .)
    RETURN          reduce using rule 64 (atom_expr -> atom_expr LSQBRACK expr RSQBRACK .)
    BREAK           reduce using rule 64 (atom_expr -> atom_expr LSQBRACK expr RSQBRACK .)
    CONTINUE        reduce using rule 64 (atom_expr -> atom_expr LSQBRACK expr RSQBRACK .)
    NAME            reduce using rule 64 (atom_expr -> atom_expr LSQBRACK expr RSQBRACK .)
    TRAIN           reduce using rule 64 (atom_expr -> atom_expr LSQBRACK expr RSQBRACK .)
    PRED            reduce using rule 64 (atom_expr -> atom_expr LSQBRACK expr RSQBRACK .)
    SAVE            reduce using rule 64 (atom_expr -> atom_expr LSQBRACK expr RSQBRACK .)
    LPAREN          reduce using rule 64 (atom_expr -> atom_expr LSQBRACK expr RSQBRACK .)
    TRUE            reduce using rule 64 (atom_expr -> atom_expr LSQBRACK expr RSQBRACK .)
    FALSE           reduce using rule 64 (atom_expr -> atom_expr LSQBRACK expr RSQBRACK .)
    NONE            reduce using rule 64 (atom_expr -> atom_expr LSQBRACK expr RSQBRACK .)
    INT             reduce using rule 64 (atom_expr -> atom_expr LSQBRACK expr RSQBRACK .)
    FLOAT           reduce using rule 64 (atom_expr -> atom_expr LSQBRACK expr RSQBRACK .)
    STRING          reduce using rule 64 (atom_expr -> atom_expr LSQBRACK expr RSQBRACK .)
    RPAREN          reduce using rule 64 (atom_expr -> atom_expr LSQBRACK expr RSQBRACK .)
    COMMA           reduce using rule 64 (atom_expr -> atom_expr LSQBRACK expr RSQBRACK .)
    RSQBRACK        reduce using rule 64 (atom_expr -> atom_expr LSQBRACK expr RSQBRACK .)
    COLON           reduce using rule 64 (atom_expr -> atom_expr LSQBRACK expr RSQBRACK .)


state 128

    (29) if_stmt -> IF test suite ELSE suite .

    IF              reduce using rule 29 (if_stmt -> IF test suite ELSE suite .)
    WHILE           reduce using rule 29 (if_stmt -> IF test suite ELSE suite .)
    DEF             reduce using rule 29 (if_stmt -> IF test suite ELSE suite .)
    PRINT           reduce using rule 29 (if_stmt -> IF test suite ELSE suite .)
    RETURN          reduce using rule 29 (if_stmt -> IF test suite ELSE suite .)
    BREAK           reduce using rule 29 (if_stmt -> IF test suite ELSE suite .)
    CONTINUE        reduce using rule 29 (if_stmt -> IF test suite ELSE suite .)
    NAME            reduce using rule 29 (if_stmt -> IF test suite ELSE suite .)
    TRAIN           reduce using rule 29 (if_stmt -> IF test suite ELSE suite .)
    PRED            reduce using rule 29 (if_stmt -> IF test suite ELSE suite .)
    SAVE            reduce using rule 29 (if_stmt -> IF test suite ELSE suite .)
    PLUS            reduce using rule 29 (if_stmt -> IF test suite ELSE suite .)
    MINUS           reduce using rule 29 (if_stmt -> IF test suite ELSE suite .)
    LPAREN          reduce using rule 29 (if_stmt -> IF test suite ELSE suite .)
    LSQBRACK        reduce using rule 29 (if_stmt -> IF test suite ELSE suite .)
    TRUE            reduce using rule 29 (if_stmt -> IF test suite ELSE suite .)
    FALSE           reduce using rule 29 (if_stmt -> IF test suite ELSE suite .)
    NONE            reduce using rule 29 (if_stmt -> IF test suite ELSE suite .)
    INT             reduce using rule 29 (if_stmt -> IF test suite ELSE suite .)
    FLOAT           reduce using rule 29 (if_stmt -> IF test suite ELSE suite .)
    STRING          reduce using rule 29 (if_stmt -> IF test suite ELSE suite .)
    SEMICOLON       reduce using rule 29 (if_stmt -> IF test suite ELSE suite .)
    OR              reduce using rule 29 (if_stmt -> IF test suite ELSE suite .)
    AND             reduce using rule 29 (if_stmt -> IF test suite ELSE suite .)
    GT              reduce using rule 29 (if_stmt -> IF test suite ELSE suite .)
    LT              reduce using rule 29 (if_stmt -> IF test suite ELSE suite .)
    GTE             reduce using rule 29 (if_stmt -> IF test suite ELSE suite .)
    LTE             reduce using rule 29 (if_stmt -> IF test suite ELSE suite .)
    EQ              reduce using rule 29 (if_stmt -> IF test suite ELSE suite .)
    NEQ             reduce using rule 29 (if_stmt -> IF test suite ELSE suite .)
    TIMES           reduce using rule 29 (if_stmt -> IF test suite ELSE suite .)
    DIVIDE          reduce using rule 29 (if_stmt -> IF test suite ELSE suite .)
    MOD             reduce using rule 29 (if_stmt -> IF test suite ELSE suite .)
    $end            reduce using rule 29 (if_stmt -> IF test suite ELSE suite .)
    RBRACK          reduce using rule 29 (if_stmt -> IF test suite ELSE suite .)


state 129

    (32) suite -> LBRACK stmt_list RBRACK .

    ELSE            reduce using rule 32 (suite -> LBRACK stmt_list RBRACK .)
    IF              reduce using rule 32 (suite -> LBRACK stmt_list RBRACK .)
    WHILE           reduce using rule 32 (suite -> LBRACK stmt_list RBRACK .)
    DEF             reduce using rule 32 (suite -> LBRACK stmt_list RBRACK .)
    PRINT           reduce using rule 32 (suite -> LBRACK stmt_list RBRACK .)
    RETURN          reduce using rule 32 (suite -> LBRACK stmt_list RBRACK .)
    BREAK           reduce using rule 32 (suite -> LBRACK stmt_list RBRACK .)
    CONTINUE        reduce using rule 32 (suite -> LBRACK stmt_list RBRACK .)
    NAME            reduce using rule 32 (suite -> LBRACK stmt_list RBRACK .)
    TRAIN           reduce using rule 32 (suite -> LBRACK stmt_list RBRACK .)
    PRED            reduce using rule 32 (suite -> LBRACK stmt_list RBRACK .)
    SAVE            reduce using rule 32 (suite -> LBRACK stmt_list RBRACK .)
    PLUS            reduce using rule 32 (suite -> LBRACK stmt_list RBRACK .)
    MINUS           reduce using rule 32 (suite -> LBRACK stmt_list RBRACK .)
    LPAREN          reduce using rule 32 (suite -> LBRACK stmt_list RBRACK .)
    LSQBRACK        reduce using rule 32 (suite -> LBRACK stmt_list RBRACK .)
    TRUE            reduce using rule 32 (suite -> LBRACK stmt_list RBRACK .)
    FALSE           reduce using rule 32 (suite -> LBRACK stmt_list RBRACK .)
    NONE            reduce using rule 32 (suite -> LBRACK stmt_list RBRACK .)
    INT             reduce using rule 32 (suite -> LBRACK stmt_list RBRACK .)
    FLOAT           reduce using rule 32 (suite -> LBRACK stmt_list RBRACK .)
    STRING          reduce using rule 32 (suite -> LBRACK stmt_list RBRACK .)
    SEMICOLON       reduce using rule 32 (suite -> LBRACK stmt_list RBRACK .)
    OR              reduce using rule 32 (suite -> LBRACK stmt_list RBRACK .)
    AND             reduce using rule 32 (suite -> LBRACK stmt_list RBRACK .)
    GT              reduce using rule 32 (suite -> LBRACK stmt_list RBRACK .)
    LT              reduce using rule 32 (suite -> LBRACK stmt_list RBRACK .)
    GTE             reduce using rule 32 (suite -> LBRACK stmt_list RBRACK .)
    LTE             reduce using rule 32 (suite -> LBRACK stmt_list RBRACK .)
    EQ              reduce using rule 32 (suite -> LBRACK stmt_list RBRACK .)
    NEQ             reduce using rule 32 (suite -> LBRACK stmt_list RBRACK .)
    TIMES           reduce using rule 32 (suite -> LBRACK stmt_list RBRACK .)
    DIVIDE          reduce using rule 32 (suite -> LBRACK stmt_list RBRACK .)
    MOD             reduce using rule 32 (suite -> LBRACK stmt_list RBRACK .)
    $end            reduce using rule 32 (suite -> LBRACK stmt_list RBRACK .)
    RBRACK          reduce using rule 32 (suite -> LBRACK stmt_list RBRACK .)


state 130

    (27) while_stmt -> WHILE test suite ELSE suite .

    IF              reduce using rule 27 (while_stmt -> WHILE test suite ELSE suite .)
    WHILE           reduce using rule 27 (while_stmt -> WHILE test suite ELSE suite .)
    DEF             reduce using rule 27 (while_stmt -> WHILE test suite ELSE suite .)
    PRINT           reduce using rule 27 (while_stmt -> WHILE test suite ELSE suite .)
    RETURN          reduce using rule 27 (while_stmt -> WHILE test suite ELSE suite .)
    BREAK           reduce using rule 27 (while_stmt -> WHILE test suite ELSE suite .)
    CONTINUE        reduce using rule 27 (while_stmt -> WHILE test suite ELSE suite .)
    NAME            reduce using rule 27 (while_stmt -> WHILE test suite ELSE suite .)
    TRAIN           reduce using rule 27 (while_stmt -> WHILE test suite ELSE suite .)
    PRED            reduce using rule 27 (while_stmt -> WHILE test suite ELSE suite .)
    SAVE            reduce using rule 27 (while_stmt -> WHILE test suite ELSE suite .)
    PLUS            reduce using rule 27 (while_stmt -> WHILE test suite ELSE suite .)
    MINUS           reduce using rule 27 (while_stmt -> WHILE test suite ELSE suite .)
    LPAREN          reduce using rule 27 (while_stmt -> WHILE test suite ELSE suite .)
    LSQBRACK        reduce using rule 27 (while_stmt -> WHILE test suite ELSE suite .)
    TRUE            reduce using rule 27 (while_stmt -> WHILE test suite ELSE suite .)
    FALSE           reduce using rule 27 (while_stmt -> WHILE test suite ELSE suite .)
    NONE            reduce using rule 27 (while_stmt -> WHILE test suite ELSE suite .)
    INT             reduce using rule 27 (while_stmt -> WHILE test suite ELSE suite .)
    FLOAT           reduce using rule 27 (while_stmt -> WHILE test suite ELSE suite .)
    STRING          reduce using rule 27 (while_stmt -> WHILE test suite ELSE suite .)
    SEMICOLON       reduce using rule 27 (while_stmt -> WHILE test suite ELSE suite .)
    OR              reduce using rule 27 (while_stmt -> WHILE test suite ELSE suite .)
    AND             reduce using rule 27 (while_stmt -> WHILE test suite ELSE suite .)
    GT              reduce using rule 27 (while_stmt -> WHILE test suite ELSE suite .)
    LT              reduce using rule 27 (while_stmt -> WHILE test suite ELSE suite .)
    GTE             reduce using rule 27 (while_stmt -> WHILE test suite ELSE suite .)
    LTE             reduce using rule 27 (while_stmt -> WHILE test suite ELSE suite .)
    EQ              reduce using rule 27 (while_stmt -> WHILE test suite ELSE suite .)
    NEQ             reduce using rule 27 (while_stmt -> WHILE test suite ELSE suite .)
    TIMES           reduce using rule 27 (while_stmt -> WHILE test suite ELSE suite .)
    DIVIDE          reduce using rule 27 (while_stmt -> WHILE test suite ELSE suite .)
    MOD             reduce using rule 27 (while_stmt -> WHILE test suite ELSE suite .)
    $end            reduce using rule 27 (while_stmt -> WHILE test suite ELSE suite .)
    RBRACK          reduce using rule 27 (while_stmt -> WHILE test suite ELSE suite .)


state 131

    (30) funcdef_stmt -> DEF name LPAREN list_expr RPAREN . suite
    (31) suite -> . simple_stmt
    (32) suite -> . LBRACK stmt_list RBRACK
    (10) simple_stmt -> . small_stmt SEMICOLON
    (11) small_stmt -> . test
    (12) small_stmt -> . flow_stmt
    (13) small_stmt -> . dl_stmt
    (14) small_stmt -> . assign_expr
    (33) test -> . comparison OR test
    (34) test -> . comparison AND test
    (35) test -> . comparison
    (22) flow_stmt -> . RETURN
    (23) flow_stmt -> . RETURN list_expr
    (24) flow_stmt -> . BREAK
    (25) flow_stmt -> . CONTINUE
    (16) dl_stmt -> . train_stmt
    (17) dl_stmt -> . pred_stmt
    (18) dl_stmt -> . save_stmt
    (49) assign_expr -> . NAME ASSIGN expr
    (50) assign_expr -> . NAME COLON basic_type ASSIGN expr
    (51) assign_expr -> . NAME COLON basic_type ASSIGN STRING COLON STRING
    (52) assign_expr -> . NAME COLON basic_type ASSIGN list_expr COLON STRING
    (36) comparison -> . expr GT expr
    (37) comparison -> . expr LT expr
    (38) comparison -> . expr GTE expr
    (39) comparison -> . expr LTE expr
    (40) comparison -> . expr EQ expr
    (41) comparison -> . expr NEQ expr
    (42) comparison -> . expr
    (19) train_stmt -> . TRAIN name list_expr
    (20) pred_stmt -> . PRED name STRING
    (21) save_stmt -> . SAVE name STRING
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MOD expr
    (58) expr -> . factor
    (59) factor -> . PLUS factor
    (60) factor -> . MINUS factor
    (61) factor -> . atom_expr
    (62) atom_expr -> .
    (63) atom_expr -> . atom
    (64) atom_expr -> . atom_expr LSQBRACK expr RSQBRACK
    (65) atom_expr -> . name LPAREN list_expr RPAREN
    (66) atom -> . LPAREN list_expr RPAREN
    (67) atom -> . LSQBRACK list_expr RSQBRACK
    (68) atom -> . name
    (69) atom -> . number
    (70) atom -> . string
    (71) atom -> . TRUE
    (72) atom -> . FALSE
    (73) atom -> . NONE
    (74) atom -> . name LSQBRACK atom RSQBRACK
    (77) name -> . NAME
    (78) number -> . INT
    (79) number -> . FLOAT
    (80) string -> . STRING

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
    LBRACK          shift and go to state 83
    RETURN          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    NAME            shift and go to state 28
    TRAIN           shift and go to state 31
    PRED            shift and go to state 32
    SAVE            shift and go to state 33
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    GT              reduce using rule 62 (atom_expr -> .)
    LT              reduce using rule 62 (atom_expr -> .)
    GTE             reduce using rule 62 (atom_expr -> .)
    LTE             reduce using rule 62 (atom_expr -> .)
    EQ              reduce using rule 62 (atom_expr -> .)
    NEQ             reduce using rule 62 (atom_expr -> .)
    TIMES           reduce using rule 62 (atom_expr -> .)
    DIVIDE          reduce using rule 62 (atom_expr -> .)
    MOD             reduce using rule 62 (atom_expr -> .)
    OR              reduce using rule 62 (atom_expr -> .)
    AND             reduce using rule 62 (atom_expr -> .)
    SEMICOLON       reduce using rule 62 (atom_expr -> .)
    LPAREN          shift and go to state 19
    LSQBRACK        shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    NONE            shift and go to state 44
    INT             shift and go to state 45
    FLOAT           shift and go to state 46
    STRING          shift and go to state 30

  ! LSQBRACK        [ reduce using rule 62 (atom_expr -> .) ]
  ! PLUS            [ reduce using rule 62 (atom_expr -> .) ]
  ! MINUS           [ reduce using rule 62 (atom_expr -> .) ]

    name                           shift and go to state 18
    suite                          shift and go to state 136
    simple_stmt                    shift and go to state 82
    small_stmt                     shift and go to state 6
    test                           shift and go to state 11
    flow_stmt                      shift and go to state 12
    dl_stmt                        shift and go to state 13
    assign_expr                    shift and go to state 14
    comparison                     shift and go to state 21
    train_stmt                     shift and go to state 25
    pred_stmt                      shift and go to state 26
    save_stmt                      shift and go to state 27
    expr                           shift and go to state 29
    factor                         shift and go to state 36
    atom_expr                      shift and go to state 37
    atom                           shift and go to state 38
    number                         shift and go to state 40
    string                         shift and go to state 41

state 132

    (15) print -> PRINT LPAREN small_stmt RPAREN SEMICOLON .

    IF              reduce using rule 15 (print -> PRINT LPAREN small_stmt RPAREN SEMICOLON .)
    WHILE           reduce using rule 15 (print -> PRINT LPAREN small_stmt RPAREN SEMICOLON .)
    DEF             reduce using rule 15 (print -> PRINT LPAREN small_stmt RPAREN SEMICOLON .)
    PRINT           reduce using rule 15 (print -> PRINT LPAREN small_stmt RPAREN SEMICOLON .)
    RETURN          reduce using rule 15 (print -> PRINT LPAREN small_stmt RPAREN SEMICOLON .)
    BREAK           reduce using rule 15 (print -> PRINT LPAREN small_stmt RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 15 (print -> PRINT LPAREN small_stmt RPAREN SEMICOLON .)
    NAME            reduce using rule 15 (print -> PRINT LPAREN small_stmt RPAREN SEMICOLON .)
    TRAIN           reduce using rule 15 (print -> PRINT LPAREN small_stmt RPAREN SEMICOLON .)
    PRED            reduce using rule 15 (print -> PRINT LPAREN small_stmt RPAREN SEMICOLON .)
    SAVE            reduce using rule 15 (print -> PRINT LPAREN small_stmt RPAREN SEMICOLON .)
    PLUS            reduce using rule 15 (print -> PRINT LPAREN small_stmt RPAREN SEMICOLON .)
    MINUS           reduce using rule 15 (print -> PRINT LPAREN small_stmt RPAREN SEMICOLON .)
    LPAREN          reduce using rule 15 (print -> PRINT LPAREN small_stmt RPAREN SEMICOLON .)
    LSQBRACK        reduce using rule 15 (print -> PRINT LPAREN small_stmt RPAREN SEMICOLON .)
    TRUE            reduce using rule 15 (print -> PRINT LPAREN small_stmt RPAREN SEMICOLON .)
    FALSE           reduce using rule 15 (print -> PRINT LPAREN small_stmt RPAREN SEMICOLON .)
    NONE            reduce using rule 15 (print -> PRINT LPAREN small_stmt RPAREN SEMICOLON .)
    INT             reduce using rule 15 (print -> PRINT LPAREN small_stmt RPAREN SEMICOLON .)
    FLOAT           reduce using rule 15 (print -> PRINT LPAREN small_stmt RPAREN SEMICOLON .)
    STRING          reduce using rule 15 (print -> PRINT LPAREN small_stmt RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 15 (print -> PRINT LPAREN small_stmt RPAREN SEMICOLON .)
    OR              reduce using rule 15 (print -> PRINT LPAREN small_stmt RPAREN SEMICOLON .)
    AND             reduce using rule 15 (print -> PRINT LPAREN small_stmt RPAREN SEMICOLON .)
    GT              reduce using rule 15 (print -> PRINT LPAREN small_stmt RPAREN SEMICOLON .)
    LT              reduce using rule 15 (print -> PRINT LPAREN small_stmt RPAREN SEMICOLON .)
    GTE             reduce using rule 15 (print -> PRINT LPAREN small_stmt RPAREN SEMICOLON .)
    LTE             reduce using rule 15 (print -> PRINT LPAREN small_stmt RPAREN SEMICOLON .)
    EQ              reduce using rule 15 (print -> PRINT LPAREN small_stmt RPAREN SEMICOLON .)
    NEQ             reduce using rule 15 (print -> PRINT LPAREN small_stmt RPAREN SEMICOLON .)
    TIMES           reduce using rule 15 (print -> PRINT LPAREN small_stmt RPAREN SEMICOLON .)
    DIVIDE          reduce using rule 15 (print -> PRINT LPAREN small_stmt RPAREN SEMICOLON .)
    MOD             reduce using rule 15 (print -> PRINT LPAREN small_stmt RPAREN SEMICOLON .)
    $end            reduce using rule 15 (print -> PRINT LPAREN small_stmt RPAREN SEMICOLON .)
    RBRACK          reduce using rule 15 (print -> PRINT LPAREN small_stmt RPAREN SEMICOLON .)


state 133

    (50) assign_expr -> NAME COLON basic_type ASSIGN expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MOD expr
    (76) list_expr -> expr .

    SEMICOLON       reduce using rule 50 (assign_expr -> NAME COLON basic_type ASSIGN expr .)
    RPAREN          reduce using rule 50 (assign_expr -> NAME COLON basic_type ASSIGN expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72
    MOD             shift and go to state 73
    COLON           reduce using rule 76 (list_expr -> expr .)
    COMMA           reduce using rule 76 (list_expr -> expr .)


state 134

    (51) assign_expr -> NAME COLON basic_type ASSIGN STRING . COLON STRING
    (80) string -> STRING .

  ! shift/reduce conflict for COLON resolved as shift
    COLON           shift and go to state 137
    LSQBRACK        reduce using rule 80 (string -> STRING .)
    PLUS            reduce using rule 80 (string -> STRING .)
    MINUS           reduce using rule 80 (string -> STRING .)
    TIMES           reduce using rule 80 (string -> STRING .)
    DIVIDE          reduce using rule 80 (string -> STRING .)
    MOD             reduce using rule 80 (string -> STRING .)
    SEMICOLON       reduce using rule 80 (string -> STRING .)
    RPAREN          reduce using rule 80 (string -> STRING .)
    COMMA           reduce using rule 80 (string -> STRING .)

  ! COLON           [ reduce using rule 80 (string -> STRING .) ]


state 135

    (52) assign_expr -> NAME COLON basic_type ASSIGN list_expr . COLON STRING
    (75) list_expr -> list_expr . COMMA expr

    COLON           shift and go to state 138
    COMMA           shift and go to state 90


state 136

    (30) funcdef_stmt -> DEF name LPAREN list_expr RPAREN suite .

    IF              reduce using rule 30 (funcdef_stmt -> DEF name LPAREN list_expr RPAREN suite .)
    WHILE           reduce using rule 30 (funcdef_stmt -> DEF name LPAREN list_expr RPAREN suite .)
    DEF             reduce using rule 30 (funcdef_stmt -> DEF name LPAREN list_expr RPAREN suite .)
    PRINT           reduce using rule 30 (funcdef_stmt -> DEF name LPAREN list_expr RPAREN suite .)
    RETURN          reduce using rule 30 (funcdef_stmt -> DEF name LPAREN list_expr RPAREN suite .)
    BREAK           reduce using rule 30 (funcdef_stmt -> DEF name LPAREN list_expr RPAREN suite .)
    CONTINUE        reduce using rule 30 (funcdef_stmt -> DEF name LPAREN list_expr RPAREN suite .)
    NAME            reduce using rule 30 (funcdef_stmt -> DEF name LPAREN list_expr RPAREN suite .)
    TRAIN           reduce using rule 30 (funcdef_stmt -> DEF name LPAREN list_expr RPAREN suite .)
    PRED            reduce using rule 30 (funcdef_stmt -> DEF name LPAREN list_expr RPAREN suite .)
    SAVE            reduce using rule 30 (funcdef_stmt -> DEF name LPAREN list_expr RPAREN suite .)
    PLUS            reduce using rule 30 (funcdef_stmt -> DEF name LPAREN list_expr RPAREN suite .)
    MINUS           reduce using rule 30 (funcdef_stmt -> DEF name LPAREN list_expr RPAREN suite .)
    LPAREN          reduce using rule 30 (funcdef_stmt -> DEF name LPAREN list_expr RPAREN suite .)
    LSQBRACK        reduce using rule 30 (funcdef_stmt -> DEF name LPAREN list_expr RPAREN suite .)
    TRUE            reduce using rule 30 (funcdef_stmt -> DEF name LPAREN list_expr RPAREN suite .)
    FALSE           reduce using rule 30 (funcdef_stmt -> DEF name LPAREN list_expr RPAREN suite .)
    NONE            reduce using rule 30 (funcdef_stmt -> DEF name LPAREN list_expr RPAREN suite .)
    INT             reduce using rule 30 (funcdef_stmt -> DEF name LPAREN list_expr RPAREN suite .)
    FLOAT           reduce using rule 30 (funcdef_stmt -> DEF name LPAREN list_expr RPAREN suite .)
    STRING          reduce using rule 30 (funcdef_stmt -> DEF name LPAREN list_expr RPAREN suite .)
    SEMICOLON       reduce using rule 30 (funcdef_stmt -> DEF name LPAREN list_expr RPAREN suite .)
    OR              reduce using rule 30 (funcdef_stmt -> DEF name LPAREN list_expr RPAREN suite .)
    AND             reduce using rule 30 (funcdef_stmt -> DEF name LPAREN list_expr RPAREN suite .)
    GT              reduce using rule 30 (funcdef_stmt -> DEF name LPAREN list_expr RPAREN suite .)
    LT              reduce using rule 30 (funcdef_stmt -> DEF name LPAREN list_expr RPAREN suite .)
    GTE             reduce using rule 30 (funcdef_stmt -> DEF name LPAREN list_expr RPAREN suite .)
    LTE             reduce using rule 30 (funcdef_stmt -> DEF name LPAREN list_expr RPAREN suite .)
    EQ              reduce using rule 30 (funcdef_stmt -> DEF name LPAREN list_expr RPAREN suite .)
    NEQ             reduce using rule 30 (funcdef_stmt -> DEF name LPAREN list_expr RPAREN suite .)
    TIMES           reduce using rule 30 (funcdef_stmt -> DEF name LPAREN list_expr RPAREN suite .)
    DIVIDE          reduce using rule 30 (funcdef_stmt -> DEF name LPAREN list_expr RPAREN suite .)
    MOD             reduce using rule 30 (funcdef_stmt -> DEF name LPAREN list_expr RPAREN suite .)
    $end            reduce using rule 30 (funcdef_stmt -> DEF name LPAREN list_expr RPAREN suite .)
    RBRACK          reduce using rule 30 (funcdef_stmt -> DEF name LPAREN list_expr RPAREN suite .)


state 137

    (51) assign_expr -> NAME COLON basic_type ASSIGN STRING COLON . STRING

    STRING          shift and go to state 139


state 138

    (52) assign_expr -> NAME COLON basic_type ASSIGN list_expr COLON . STRING

    STRING          shift and go to state 140


state 139

    (51) assign_expr -> NAME COLON basic_type ASSIGN STRING COLON STRING .

    SEMICOLON       reduce using rule 51 (assign_expr -> NAME COLON basic_type ASSIGN STRING COLON STRING .)
    RPAREN          reduce using rule 51 (assign_expr -> NAME COLON basic_type ASSIGN STRING COLON STRING .)


state 140

    (52) assign_expr -> NAME COLON basic_type ASSIGN list_expr COLON STRING .

    SEMICOLON       reduce using rule 52 (assign_expr -> NAME COLON basic_type ASSIGN list_expr COLON STRING .)
    RPAREN          reduce using rule 52 (assign_expr -> NAME COLON basic_type ASSIGN list_expr COLON STRING .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 0 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 0 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 0 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 2 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 2 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 2 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 15 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 15 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 15 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 15 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 15 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 15 resolved as shift
WARNING: shift/reduce conflict for NONE in state 15 resolved as shift
WARNING: shift/reduce conflict for NAME in state 15 resolved as shift
WARNING: shift/reduce conflict for INT in state 15 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 15 resolved as shift
WARNING: shift/reduce conflict for STRING in state 15 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 16 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 16 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 16 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 16 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 16 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 16 resolved as shift
WARNING: shift/reduce conflict for NONE in state 16 resolved as shift
WARNING: shift/reduce conflict for NAME in state 16 resolved as shift
WARNING: shift/reduce conflict for INT in state 16 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 16 resolved as shift
WARNING: shift/reduce conflict for STRING in state 16 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 18 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 18 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 19 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 19 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 19 resolved as shift
WARNING: shift/reduce conflict for OR in state 21 resolved as shift
WARNING: shift/reduce conflict for AND in state 21 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 22 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 22 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 22 resolved as shift
WARNING: shift/reduce conflict for GT in state 29 resolved as shift
WARNING: shift/reduce conflict for LT in state 29 resolved as shift
WARNING: shift/reduce conflict for GTE in state 29 resolved as shift
WARNING: shift/reduce conflict for LTE in state 29 resolved as shift
WARNING: shift/reduce conflict for EQ in state 29 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 29 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 29 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 29 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 29 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 29 resolved as shift
WARNING: shift/reduce conflict for MOD in state 29 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 34 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 34 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 34 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 34 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 34 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 34 resolved as shift
WARNING: shift/reduce conflict for NONE in state 34 resolved as shift
WARNING: shift/reduce conflict for NAME in state 34 resolved as shift
WARNING: shift/reduce conflict for INT in state 34 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 34 resolved as shift
WARNING: shift/reduce conflict for STRING in state 34 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 35 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 35 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 35 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 35 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 35 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 35 resolved as shift
WARNING: shift/reduce conflict for NONE in state 35 resolved as shift
WARNING: shift/reduce conflict for NAME in state 35 resolved as shift
WARNING: shift/reduce conflict for INT in state 35 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 35 resolved as shift
WARNING: shift/reduce conflict for STRING in state 35 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 37 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 39 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 39 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 39 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 49 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 49 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 49 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 51 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 51 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 51 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 53 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 53 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 53 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 57 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 57 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 57 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 58 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 58 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 58 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 58 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 58 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 58 resolved as shift
WARNING: shift/reduce conflict for NONE in state 58 resolved as shift
WARNING: shift/reduce conflict for NAME in state 58 resolved as shift
WARNING: shift/reduce conflict for INT in state 58 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 58 resolved as shift
WARNING: shift/reduce conflict for STRING in state 58 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 59 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 59 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 59 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 59 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 59 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 59 resolved as shift
WARNING: shift/reduce conflict for NONE in state 59 resolved as shift
WARNING: shift/reduce conflict for NAME in state 59 resolved as shift
WARNING: shift/reduce conflict for INT in state 59 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 59 resolved as shift
WARNING: shift/reduce conflict for STRING in state 59 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 61 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 61 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 61 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 63 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 63 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 63 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 63 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 63 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 63 resolved as shift
WARNING: shift/reduce conflict for NONE in state 63 resolved as shift
WARNING: shift/reduce conflict for NAME in state 63 resolved as shift
WARNING: shift/reduce conflict for INT in state 63 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 63 resolved as shift
WARNING: shift/reduce conflict for STRING in state 63 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 64 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 64 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 64 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 64 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 64 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 64 resolved as shift
WARNING: shift/reduce conflict for NONE in state 64 resolved as shift
WARNING: shift/reduce conflict for NAME in state 64 resolved as shift
WARNING: shift/reduce conflict for INT in state 64 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 64 resolved as shift
WARNING: shift/reduce conflict for STRING in state 64 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 65 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 65 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 65 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 65 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 65 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 65 resolved as shift
WARNING: shift/reduce conflict for NONE in state 65 resolved as shift
WARNING: shift/reduce conflict for NAME in state 65 resolved as shift
WARNING: shift/reduce conflict for INT in state 65 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 65 resolved as shift
WARNING: shift/reduce conflict for STRING in state 65 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 66 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 66 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 66 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 66 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 66 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 66 resolved as shift
WARNING: shift/reduce conflict for NONE in state 66 resolved as shift
WARNING: shift/reduce conflict for NAME in state 66 resolved as shift
WARNING: shift/reduce conflict for INT in state 66 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 66 resolved as shift
WARNING: shift/reduce conflict for STRING in state 66 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 67 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 67 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 67 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 67 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 67 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 67 resolved as shift
WARNING: shift/reduce conflict for NONE in state 67 resolved as shift
WARNING: shift/reduce conflict for NAME in state 67 resolved as shift
WARNING: shift/reduce conflict for INT in state 67 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 67 resolved as shift
WARNING: shift/reduce conflict for STRING in state 67 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 68 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 68 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 68 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 68 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 68 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 68 resolved as shift
WARNING: shift/reduce conflict for NONE in state 68 resolved as shift
WARNING: shift/reduce conflict for NAME in state 68 resolved as shift
WARNING: shift/reduce conflict for INT in state 68 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 68 resolved as shift
WARNING: shift/reduce conflict for STRING in state 68 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 69 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 69 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 69 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 69 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 69 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 69 resolved as shift
WARNING: shift/reduce conflict for NONE in state 69 resolved as shift
WARNING: shift/reduce conflict for NAME in state 69 resolved as shift
WARNING: shift/reduce conflict for INT in state 69 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 69 resolved as shift
WARNING: shift/reduce conflict for STRING in state 69 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 70 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 70 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 70 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 70 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 70 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 70 resolved as shift
WARNING: shift/reduce conflict for NONE in state 70 resolved as shift
WARNING: shift/reduce conflict for NAME in state 70 resolved as shift
WARNING: shift/reduce conflict for INT in state 70 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 70 resolved as shift
WARNING: shift/reduce conflict for STRING in state 70 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 71 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 71 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 71 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 71 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 71 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 71 resolved as shift
WARNING: shift/reduce conflict for NONE in state 71 resolved as shift
WARNING: shift/reduce conflict for NAME in state 71 resolved as shift
WARNING: shift/reduce conflict for INT in state 71 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 71 resolved as shift
WARNING: shift/reduce conflict for STRING in state 71 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 72 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 72 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 72 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 72 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 72 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 72 resolved as shift
WARNING: shift/reduce conflict for NONE in state 72 resolved as shift
WARNING: shift/reduce conflict for NAME in state 72 resolved as shift
WARNING: shift/reduce conflict for INT in state 72 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 72 resolved as shift
WARNING: shift/reduce conflict for STRING in state 72 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 73 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 73 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 73 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 73 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 73 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 73 resolved as shift
WARNING: shift/reduce conflict for NONE in state 73 resolved as shift
WARNING: shift/reduce conflict for NAME in state 73 resolved as shift
WARNING: shift/reduce conflict for INT in state 73 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 73 resolved as shift
WARNING: shift/reduce conflict for STRING in state 73 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 74 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 74 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 74 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 79 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 79 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 79 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 83 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 83 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 83 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 85 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 85 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 85 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 90 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 90 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 90 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 106 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 106 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 106 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 106 resolved as shift
WARNING: shift/reduce conflict for MOD in state 106 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 107 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 107 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 107 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 107 resolved as shift
WARNING: shift/reduce conflict for MOD in state 107 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 112 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 112 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 112 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 112 resolved as shift
WARNING: shift/reduce conflict for MOD in state 112 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 118 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 118 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 118 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 119 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 119 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 119 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 120 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 120 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 120 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 126 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 126 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 126 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 131 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 131 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 131 resolved as shift
WARNING: shift/reduce conflict for COLON in state 134 resolved as shift
WARNING: reduce/reduce conflict in state 22 resolved using rule (flow_stmt -> RETURN)
WARNING: rejected rule (atom_expr -> <empty>) in state 22
